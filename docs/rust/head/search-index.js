var searchIndex = JSON.parse('{\
"api_demo":{"doc":"An amalgamation of various usages of the API with …","t":[3,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Args","BoundingBox","Demo","ExtensionComponents","LogCleared","Points3D","Rects","Segmentation","TextLogs","Transforms3D","__clone_box","augment_args","augment_args_for_update","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone_into","command","command_for_update","demo","demo_3d_points","demo_bbox","demo_extension_components","demo_log_cleared","demo_rects","demo_segmentation","demo_text_logs","demo_transforms_3d","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","equivalent","equivalent","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","get_hash","group_id","hash","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","main","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","rerun","run","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","sim_time","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","update_from_arg_matches","update_from_arg_matches_mut","value_variants","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from"],"q":["api_demo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Which demo should we run? All of them by default.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,4,0,4,4,4,4,4,4,4,4,11,11,4,11,4,11,4,11,4,11,4,11,4,11,4,4,11,11,11,0,0,0,0,0,0,0,0,4,11,4,11,4,11,4,11,4,4,4,4,11,4,11,11,11,4,11,4,4,11,4,11,4,11,4,11,0,4,11,4,11,11,0,4,11,4,11,0,4,4,4,11,4,11,4,11,4,11,4,11,4,11,11,11,4,4,11,4,11,4,11],"f":[0,0,0,0,0,0,0,0,0,0,[1],[2,2],[2,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[4,4],[[]],[[],2],[[],2],0,[5,6],[5,6],[5,6],[5,6],[5,6],[5,6],[5,6],[5,6],[7],[7],[7],[7],[[]],[[]],[7],[7],[[4,4],8],[[],8],[[],8],[[4,9],10],[[11,9],10],[[]],[[]],[12,[[14,[11,13]]]],[12,[[14,[11,13]]]],[[],15],[[],[[3,[16]]]],[4],[[],7],[[],7],[[]],[[]],[[],3],[[],3],[[]],[[]],[[],6],[[]],[[]],[[]],[[]],0,[[5,11],6],[[]],[[]],[[]],[[]],[17,18],[[]],[4,[[3,[19]]]],[[],14],[[],14],[[],14],[[],14],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],3],[[],3],[[11,12],[[14,[13]]]],[[11,12],[[14,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Private"],[3,"Command"],[4,"Option"],[4,"Demo"],[3,"Session"],[6,"Result"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Args"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[15,"u64"],[3,"Id"],[15,"f64"],[3,"TimePoint"],[3,"PossibleValue"],[3,"TypeId"]]},\
"dna":{"doc":"The example from our Getting Started page.","t":[17,5,5],"n":["NUM_POINTS","main","run"],"q":["dna","",""],"d":["","",""],"i":[0,0,0],"f":[0,[[],[[3,[[2,[1]]]]]],[4,[[3,[5]]]]],"p":[[8,"Error"],[3,"Box"],[4,"Result"],[3,"Session"],[4,"MsgSenderError"]]},\
"minimal":{"doc":"Demonstrates the most barebone usage of the Rerun SDK.","t":[5],"n":["main"],"q":["minimal"],"d":[""],"i":[0],"f":[[[],[[3,[[2,[1]]]]]]],"p":[[8,"Error"],[3,"Box"],[4,"Result"]]},\
"objectron":{"doc":"Example of using the Rerun SDK to log the Objectron dataset…","tn":["AnnotationsPerFrame","ArFrame","Args","Bike","Book","Bottle","Camera","CerealBox","Chair","Cup","Laptop","Recording","RecordingInfo","Shoe","__clone_box","__clone_box","augment_args","augment_args_for_update","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","command","command_for_update","data","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dir","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","fmt","fmt","fmt","frames","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_raw","group_id","index","info","init","init","init","init","init","into","into","into","into","into","log_ar_camera","log_ar_frame","log_baseline_objects","log_coordinate_space","log_feature_points","log_frame_annotations","log_video_frame","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","main","objectron","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parse_duration","path_annotations","path_ar_frames","per_frame_sleep","read_annotations","read_ar_frames","recording","rerun","run","run_forever","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","timepoint","timepoint","to_owned","to_owned","to_possible_value","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","update_from_arg_matches","update_from_arg_matches_mut","value_variants","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","AnnotatedKeyPoint","ArBlendShapeMap","ArCamera","ArFaceAnchor","ArFaceGeometry","ArFrame","ArLightEstimate","ArMeshAnchor","ArMeshData","ArMeshGeometry","ArPlaneAnchor","ArPlaneGeometry","ArPointCloud","AvCameraCalibrationData","AvDepthData","CmAccelerometerData","CmCalibratedMagneticField","CmDeviceMotion","CmGyroData","CmMagnetometerData","CmMotionManagerSnapshot","CmVector","Edge","FrameAnnotation","KeyPoint","NormalizedPoint2D","Object","ObjectAnnotation","Point3D","Sequence","Skeleton","Skeletons","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","acceleration","accelerometer_data","alignment","alignment","ambient_color_temperature","ambient_color_temperature","ambient_intensity","ambient_intensity","annotations","ar_blend_shape_map","ar_camera","ar_face_geometry","ar_light_estimate","ar_mesh_geometry","ar_plane_anchor","ar_plane_geometry","ar_point_cloud","attitude_quaternion","av_depth_data","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","blend_shapes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_vertex_count","boundary_vertex_count","boundary_vertices","calibration_accuracy","calibration_accuracy","camera","camera","camera_calibration_data","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","category","category","center","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","classification","classification","classification","classification","classification_status","classification_status","classification_supported","classification_supported","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cm_calibrated_magnetic_field","cm_device_motion","confidence_radius","count","count","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","depth","depth_data","depth_data_accuracy","depth_data_accuracy","depth_data_filtered","depth_data_filtered","depth_data_map","depth_data_map","depth_data_map_height","depth_data_map_height","depth_data_map_original_maximum_value","depth_data_map_original_maximum_value","depth_data_map_original_minimum_value","depth_data_map_original_minimum_value","depth_data_map_raw_values","depth_data_map_raw_values","depth_data_map_width","depth_data_map_width","depth_data_quality","depth_data_quality","depth_data_timestamp","depth_data_timestamp","depth_data_type","depth_data_type","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","device_motion","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","edges","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","entries","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","euler_angles","extent","extrinsic_matrix","face_anchor","faces","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_annotations","frame_id","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","geometry","geometry","geometry","gravity","gyro_data","hidden","id","id","identifier","identifier","identifier","identifier","identifier","image_resolution_height","image_resolution_height","image_resolution_width","image_resolution_width","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intrinsic_matrix","intrinsic_matrix_reference_dimension_height","intrinsic_matrix_reference_dimension_height","intrinsic_matrix_reference_dimension_width","intrinsic_matrix_reference_dimension_width","intrinsics","inverse_lens_distortion_lookup_values","is_tracked","is_tracked","keypoints","keypoints","keypoints","lens_distortion_center_x","lens_distortion_center_x","lens_distortion_center_y","lens_distortion_center_y","lens_distortion_lookup_values","light_estimate","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","magnetic_field","magnetic_field","magnetometer_data","mesh_anchor","method","method","motion_manager_snapshot","name","normals","object","object","object_id","objects","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pixel_size","pixel_size","plane_anchor","plane_center","plane_normal","point","point_2d","point_3d","primary_light_direction","primary_light_intensity","primary_light_intensity","projection_matrix","push_classification","raw_feature_points","reference_keypoint","rotation","rotation_rate","rotation_rate","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scale","set_alignment","set_calibration_accuracy","set_classification","set_classification_status","set_depth_data_accuracy","set_depth_data_quality","set_method","set_tracking_state","set_tracking_state_reason","set_type","sink","source","spherical_harmonics_coefficients","texture_coordinate_count","texture_coordinate_count","texture_coordinate_count","texture_coordinate_count","texture_coordinates","texture_coordinates","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","tracking_state","tracking_state","tracking_state_reason","tracking_state_reason","transform","transform","transform","transform","translation","triangle_count","triangle_count","triangle_count","triangle_count","triangle_indices","triangle_indices","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","user_acceleration","vertex_count","vertex_count","vertex_count","vertex_count","vertices","vertices","vertices","view_matrix","visibility","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x","x","x","y","y","y","y","y","z","z","z","z","MapEntry","__clone_box","az","blend_shape_coefficient","blend_shape_coefficient","blend_shape_location","blend_shape_location","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clear","clone","clone_into","default","deref","deref_mut","downcast","drop","encoded_len","eq","fmt","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","EulerAngles","ExcessiveMotion","Initializing","InsufficientFeatures","Limited","None","Normal","Relocalizing","TrackingState","TrackingStateReason","Unavailable","UndefinedTrackingState","UndefinedTrackingStateReason","__clone_box","__clone_box","__clone_box","as_str_name","as_str_name","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","encoded_len","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_i32","from_i32","from_str_name","from_str_name","get_hash","get_hash","hash","hash","init","init","init","into","into","into","is_valid","is_valid","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","pitch","pitch","roll","roll","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","yaw","yaw","TextureCoordinate","Vertex","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clear","clear","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u","u","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","v","v","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","x","x","y","y","z","z","DirectionVector","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clear","clone","clone_into","default","deref","deref_mut","downcast","drop","encoded_len","eq","fmt","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","x","x","y","y","z","z","Ceiling","Door","Face","Floor","MeshClassification","None","Seat","Table","Vertex","Wall","Window","__clone_box","__clone_box","__clone_box","as_str_name","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","encoded_len","encoded_len","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_i32","from_str_name","get_hash","hash","init","init","init","into","into","into","is_valid","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","vertex_indices","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","y","y","z","z","Alignment","Ceiling","Floor","Horizontal","Known","None","PlaneClassification","PlaneClassificationStatus","PlaneVector","Seat","Table","Unavailable","Undefined","Undetermined","Unknown","Vertical","Wall","__clone_box","__clone_box","__clone_box","__clone_box","as_str_name","as_str_name","as_str_name","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","drop","drop","drop","drop","encoded_len","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_i32","from_i32","from_i32","from_str_name","from_str_name","from_str_name","get_hash","get_hash","get_hash","hash","hash","hash","init","init","init","init","into","into","into","into","is_valid","is_valid","is_valid","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","y","y","z","z","TextureCoordinate","Vertex","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clear","clear","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u","u","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","v","v","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","x","x","y","y","z","z","Point","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clear","clone","clone_into","default","deref","deref_mut","downcast","drop","encoded_len","eq","fmt","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","x","x","y","y","z","z","Absolute","Accuracy","High","Low","Quality","Relative","UndefinedAccuracy","UndefinedQuality","__clone_box","__clone_box","as_str_name","as_str_name","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_i32","from_i32","from_str_name","from_str_name","get_hash","get_hash","hash","hash","init","init","into","into","is_valid","is_valid","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","CalibrationAccuracy","High","Low","Medium","Uncalibrated","__clone_box","as_str_name","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","default","deref","deref_mut","downcast","drop","eq","equivalent","equivalent","fmt","from","from_i32","from_str_name","get_hash","hash","init","into","is_valid","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","partial_cmp","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Quaternion","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clear","clone","clone_into","default","deref","deref_mut","downcast","drop","encoded_len","eq","fmt","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","w","w","wrapping_as","wrapping_cast_from","x","x","y","y","z","z","Annotation","Augmentation","BoundingBox","Mesh","Method","Skeleton","Type","UndefinedType","UnknownMethod","__clone_box","__clone_box","as_str_name","as_str_name","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_i32","from_i32","from_str_name","from_str_name","get_hash","get_hash","hash","hash","init","init","into","into","is_valid","is_valid","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from"],"q":["objectronobjectron::objectronobjectron::objectron::ar_blend_shape_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::ar_camera","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::ar_face_geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::ar_light_estimate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::ar_mesh_geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::ar_plane_anchor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::ar_plane_geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::ar_point_cloud","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::av_depth_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::cm_calibrated_magnetic_field","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::cm_device_motion","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","objectron::objectron::object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Limits the number of frames logged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Throttle logging by sleeping between each frame (e.g. <code>0.25</code>…","","","Specifies the recording to replay.","","","If set, this indefinitely log and relog the same scene in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains a list of blend shape entries wherein each item …","Information about the camera position and imaging …","Information about the pose, topology, and expression of a …","Container for a 3D mesh describing face topology.","Video image and face position tracking information.","Estimated scene lighting information associated with a …","A subdividision of the reconstructed, real-world scene …","Container object for mesh data of real-world scene …","Mesh geometry data stored in an array-based format.","Information about the position and orientation of a …","Container for a 3D mesh.","A collection of points in the world coordinate space.","Info about the camera characteristics used to capture …","Container for depth data information.","A sample of raw accelerometer data.","Represents calibrated magnetic field data and accuracy …","A sample of device motion data. Encapsulates measurements …","A sample of raw gyroscope data.","A sample of raw magnetometer data.","Contains most recent snapshots of device motion data","A 3D vector","The edge connecting two keypoints together","","","Projection of a 3D point on an image, and its metric depth.","","","The 3D point in the camera coordinate system, the scales …","The sequence protocol contains the annotation data for the …","The skeleton template for different objects (e.g. humans, …","The list of all the modeled skeletons in our library. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raw acceleration measured by the accelerometer which …","Most recent samples of raw accelerometer data.","Returns the enum value of <code>alignment</code>, or the default if the …","The general orientation of the detected plane with respect …","Returns the value of <code>ambient_color_temperature</code>, or the …","The estimated color temperature, in degrees Kelvin, of …","Returns the value of <code>ambient_intensity</code>, or the default …","The estimated intensity, in lumens, of ambient light …","List of the annotated objects in this frame. Depending on …","Nested message and enum types in <code>ARBlendShapeMap</code>.","Nested message and enum types in <code>ARCamera</code>.","Nested message and enum types in <code>ARFaceGeometry</code>.","Nested message and enum types in <code>ARLightEstimate</code>.","Nested message and enum types in <code>ARMeshGeometry</code>.","Nested message and enum types in <code>ARPlaneAnchor</code>.","Nested message and enum types in <code>ARPlaneGeometry</code>.","Nested message and enum types in <code>ARPointCloud</code>.","The quaternion representing the device’s orientation …","Nested message and enum types in <code>AVDepthData</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A map of named coefficients representing the detected …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>boundary_vertex_count</code>, or the default …","The number of elements in the boundary_vertices buffer.","Each value in this buffer represents the position of a …","Returns the enum value of <code>calibration_accuracy</code>, or the …","Calibration accuracy of a magnetic field estimate.","Camera information associated with the frame.","Information about the camera transformation (in the world …","Associated calibration data for the depth_data_map.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Describes what category an object is. E.g. object class, …","The skeleton’s category (e.g. human, chair, hand.). …","The center point of the plane relative to its anchor …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the enum value of <code>classification</code>, or the default …","Returns an iterator which yields the valid enum values …","A general characterization of what kind of real-world …","Classification for each face in the mesh.","Returns the enum value of <code>classification_status</code>, or the …","The current state of process for classifying the plane …","Returns the value of <code>classification_supported</code>, or the …","A Boolean value that indicates whether plane …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nested message and enum types in <code>CMCalibratedMagneticField</code>.","Nested message and enum types in <code>CMDeviceMotion</code>.","Sphere around the keypoint, indicating annotator’s …","Returns the value of <code>count</code>, or the default value if <code>count</code> …","The number of points in the cloud.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The depth of the point in the camera coordinate system (in …","The depth data associated with the frame. Not all frames …","Returns the enum value of <code>depth_data_accuracy</code>, or the …","","Returns the value of <code>depth_data_filtered</code>, or the default …","Indicates whether the depth_data_map contains temporally …","Returns the value of <code>depth_data_map</code>, or the default value …","PNG representation of the grayscale depth data map. See …","Returns the value of <code>depth_data_map_height</code>, or the default …","The height of the depth buffer map.","Returns the value of <code>depth_data_map_original_maximum_value</code>…","","Returns the value of <code>depth_data_map_original_minimum_value</code>…","The original range of values expressed by the …","Returns the value of <code>depth_data_map_raw_values</code>, or the …","The row-major flattened array of the depth buffer map …","Returns the value of <code>depth_data_map_width</code>, or the default …","The width of the depth buffer map.","Returns the enum value of <code>depth_data_quality</code>, or the …","","Returns the value of <code>depth_data_timestamp</code>, or the default …","The depth data object timestamp associated with the frame. …","Returns the value of <code>depth_data_type</code>, or the default value …","Pixel format type of the original captured depth data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Most recent samples of device motion data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of edges connecting keypoints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The estimated width and length of the detected plane.","3x4 row-major matrix relating a camera’s position and …","Face anchor information associated with the frame. Not all …","The faces of the mesh.","Vector of magnetic field estimate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of annotated data per each frame in sequence + frame …","Unique frame id, corresponds to images.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A coarse triangle mesh representing the topology of the …","A coarse triangle mesh representing the general shape of …","3D information about the mesh such as its shape and …","The gravity acceleration vector expressed in the device’…","Most recent samples of raw gyroscope data.","Indicates whether the keypoint is hidden or not.","Unique object id through a sequence. There might be …","","Returns the value of <code>identifier</code>, or the default value if …","Returns the value of <code>identifier</code>, or the default value if …","The ID of the plane.","A list of unique identifiers corresponding to detected …","The ID of the mesh.","Returns the value of <code>image_resolution_height</code>, or the …","","Returns the value of <code>image_resolution_width</code>, or the …","The width and height, in pixels, of the captured camera …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","3x3 row-major matrix relating a camera’s internal …","Returns the value of …","","Returns the value of …","The image dimensions to which the intrinsic_matrix values …","3x3 row-major matrix that converts between the 2D camera …","A list of floating-point values describing radial …","Returns the value of <code>is_tracked</code>, or the default value if …","Indicates whether the anchor’s transform is valid. …","List of all the key points associated with this object in …","Initialization value for all the keypoints in the skeleton …","For each objects, list all the annotated keypoints here. …","Returns the value of <code>lens_distortion_center_x</code>, or the …","The offset of the distortion center of the camera lens …","Returns the value of <code>lens_distortion_center_y</code>, or the …","","A list of floating-point values describing radial …","Light information associated with the frame.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the magnetic field vector filtered with respect to …","Raw magnetic field measured by the magnetometer.","Most recent samples of raw magnetometer data.","Set of mesh anchors containing the mesh data.","Returns the enum value of <code>method</code>, or the default if the …","","Snapshot of Core Motion CMMotionManager object containing …","The name of the keypoint (e.g. legs, head, etc.). Does not …","Rays that define which direction is outside for each face. …","Nested message and enum types in <code>Object</code>.","","Reference to the object identifier in ObjectInstance.","List of all the annotated 3D objects in this sequence in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>pixel_size</code>, or the default value if …","The size, in millimeters, of one image pixel.","Plane anchors associated with the frame. Not all frames …","Plane center and normal in camera frame.","","The list of detected points.","","","A vector indicating the orientation of the strongest …","Returns the value of <code>primary_light_intensity</code>, or the …","The estimated intensity, in lumens, of the strongest …","4x4 row-major transform matrix appropriate for rendering …","Appends the provided enum value to <code>classification</code>.","The current intermediate results of the scene analysis …","The origin keypoint in the object coordinate system. (i.e. …","3x3 row-major rotation matrix describing the orientation …","The rotation rate of the device adjusted by bias-removing …","Raw rotation rate as measured by the gyroscope.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","3x1 vector describing the scale of the rigid object’s …","Sets <code>alignment</code> to the provided enum value.","Sets <code>calibration_accuracy</code> to the provided enum value.","Sets <code>classification</code> to the provided enum value.","Sets <code>classification_status</code> to the provided enum value.","Sets <code>depth_data_accuracy</code> to the provided enum value.","Sets <code>depth_data_quality</code> to the provided enum value.","Sets <code>method</code> to the provided enum value.","Sets <code>tracking_state</code> to the provided enum value.","Sets <code>tracking_state_reason</code> to the provided enum value.","Sets <code>type</code> to the provided enum value.","keypoint id of the edge’s sink","keypoint id of the edge’s source","Data describing the estimated lighting environment in all …","Returns the value of <code>texture_coordinate_count</code>, or the …","Returns the value of <code>texture_coordinate_count</code>, or the …","The number of elements in the texture_coordinates list.","The number of elements in the texture_coordinates buffer.","","A buffer of texture coordinate values for each point in …","Returns the value of <code>timestamp</code>, or the default value if …","Returns the value of <code>timestamp</code>, or the default value if …","Returns the value of <code>timestamp</code>, or the default value if …","Returns the value of <code>timestamp</code>, or the default value if …","Returns the value of <code>timestamp</code>, or the default value if …","Returns the value of <code>timestamp</code>, or the default value if …","The device motion data object timestamp. May differ from …","The accelerometer data object timestamp. May differ from …","The gyroscope data object timestamp. May differ from the …","The magnetometer data object timestamp. May differ from …","The timestamp for the frame.","The timestamp for the data.","The timestamp for the frame.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the enum value of <code>tracking_state</code>, or the default …","","Returns the enum value of <code>tracking_state_reason</code>, or the …","","4x4 row-major matrix expressing position and orientation …","4x4 row-major matrix encoding the position, orientation, …","4x4 row-major matrix encoding the position, orientation, …","4x4 row-major matrix encoding the position, orientation, …","3x1 vector describing the translation of the rigid object…","Returns the value of <code>triangle_count</code>, or the default value …","Returns the value of <code>triangle_count</code>, or the default value …","The number of triangles described by the triangle_indices …","Each set of three indices forms a triangle, so the number …","Each integer value in this ordered list represents an …","Each integer value in this ordered list represents an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the enum value of <code>type</code>, or the default if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The acceleration that the user is giving to the device.","Returns the value of <code>vertex_count</code>, or the default value if …","Returns the value of <code>vertex_count</code>, or the default value if …","The number of elements in the vertices list.","The number of elements in the vertices buffer.","","A buffer of vertex positions for each point in the plane …","The vertices of the mesh.","4x4 row-major transform matrix appropriate for converting …","Visibiity of this annotation in a frame.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>x</code>, or the default value if <code>x</code> is unset.","","The position of the keypoint in the local coordinate …","x-y position of the 2d keypoint in the image coordinate …","","Returns the value of <code>y</code>, or the default value if <code>y</code> is unset.","","","","","Returns the value of <code>z</code>, or the default value if <code>z</code> is unset.","","","","","","","Returns the value of <code>blend_shape_coefficient</code>, or the …","Indicates the current position of the feature relative to …","Returns the value of <code>blend_shape_location</code>, or the default …","Identifier for the specific facial feature.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The orientation of the camera, expressed as roll, pitch, …","The device is moving too fast for accurate image-based …","Not yet enough camera or motion data to provide tracking …","Not enough distinguishable features for image-based …","Tracking is available, but the quality of results is …","The current tracking state is not limited.","Camera position tracking is providing optimal results.","Tracking is limited due to a relocalization in progress.","The general quality of position tracking available when …","A possible diagnosis for limited position tracking quality …","Camera position tracking is not available.","","","","","","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>TrackingState</code>, or <code>None</code> if <code>value</code> is …","Converts an <code>i32</code> to a <code>TrackingStateReason</code>, or <code>None</code> if <code>value</code> …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>TrackingState</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>TrackingStateReason</code>.","","","","","","","","","","","","","","","Returns the value of <code>pitch</code>, or the default value if <code>pitch</code> …","","Returns the value of <code>roll</code>, or the default value if <code>roll</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>yaw</code>, or the default value if <code>yaw</code> is …","","Each texture coordinate represents UV texture coordinates …","Each vertex represents a 3D point in the face mesh, in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>u</code>, or the default value if <code>u</code> is unset.","","","","","","","","Returns the value of <code>v</code>, or the default value if <code>v</code> is unset.","","","","","","","","Returns the value of <code>x</code>, or the default value if <code>x</code> is unset.","","Returns the value of <code>y</code>, or the default value if <code>y</code> is unset.","","Returns the value of <code>z</code>, or the default value if <code>z</code> is unset.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the value of <code>x</code>, or the default value if <code>x</code> is unset.","","Returns the value of <code>y</code>, or the default value if <code>y</code> is unset.","","Returns the value of <code>z</code>, or the default value if <code>z</code> is unset.","","","","","","Type of objects","","","","","","","","","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>MeshClassification</code>, or <code>None</code> if <code>value</code> …","Creates an enum from field names used in the ProtoBuf …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>MeshClassification</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","/ Indices of vertices defining the face from correspondent …","","","","","","","","","","Returns the value of <code>x</code>, or the default value if <code>x</code> is unset.","","Returns the value of <code>y</code>, or the default value if <code>y</code> is unset.","","Returns the value of <code>z</code>, or the default value if <code>z</code> is unset.","","","","","The plane is perpendicular to gravity.","The classfication process for the plane anchor has …","","","The classification status for the plane.","Wrapper for a 3D point / vector within the plane. See …","","","No classication information can be provided (set on error …","","The classification process has not completed.","The classfication process for the plane anchor has …","The plane is parallel to gravity.","","","","","","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>Alignment</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>PlaneClassification</code>, or <code>None</code> if <code>value</code> …","Converts an <code>i32</code> to a <code>PlaneClassificationStatus</code>, or <code>None</code> if …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Alignment</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>PlaneClassification</code>.","Returns <code>true</code> if <code>value</code> is a variant of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>x</code>, or the default value if <code>x</code> is unset.","","Returns the value of <code>y</code>, or the default value if <code>y</code> is unset.","","Returns the value of <code>z</code>, or the default value if <code>z</code> is unset.","","Each texture coordinate represents UV texture coordinates …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>u</code>, or the default value if <code>u</code> is unset.","","","","","","","","Returns the value of <code>v</code>, or the default value if <code>v</code> is unset.","","","","","","","","Returns the value of <code>x</code>, or the default value if <code>x</code> is unset.","","Returns the value of <code>y</code>, or the default value if <code>y</code> is unset.","","Returns the value of <code>z</code>, or the default value if <code>z</code> is unset.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the value of <code>x</code>, or the default value if <code>x</code> is unset.","","Returns the value of <code>y</code>, or the default value if <code>y</code> is unset.","","Returns the value of <code>z</code>, or the default value if <code>z</code> is unset.","","Values in the depth map are absolutely accurate in the …","Indicates the general accuracy of the depth_data_map.","","","Quality of the depth_data_map.","Values in the depth map are usable for …","","","","","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>Accuracy</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>Quality</code>, or <code>None</code> if <code>value</code> is not a …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Accuracy</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Quality</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Indicates the calibration accuracy of a magnetic field …","","","","","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>CalibrationAccuracy</code>, or <code>None</code> if <code>value</code> …","Creates an enum from field names used in the ProtoBuf …","","","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>CalibrationAccuracy</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the value of <code>w</code>, or the default value if <code>w</code> is unset.","","","","Returns the value of <code>x</code>, or the default value if <code>x</code> is unset.","","Returns the value of <code>y</code>, or the default value if <code>y</code> is unset.","","Returns the value of <code>z</code>, or the default value if <code>z</code> is unset.","","Created by data annotation.","Created by data augmentation.","","","Enum to reflect how this object is created.","","","","","","","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>Type</code>, or <code>None</code> if <code>value</code> is not a valid …","Converts an <code>i32</code> to a <code>Method</code>, or <code>None</code> if <code>value</code> is not a …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Type</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Method</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,4,4,4,4,4,4,4,4,0,0,4,4,5,9,9,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,4,5,4,5,9,9,17,17,10,4,9,5,17,10,4,9,5,17,17,10,4,9,5,17,10,4,9,5,4,9,5,9,17,10,10,4,9,5,9,9,17,9,17,4,17,10,4,9,5,17,10,4,9,5,0,0,0,0,0,0,0,17,10,4,9,5,17,10,4,9,5,0,0,17,10,4,9,5,17,10,4,9,5,0,5,5,9,0,0,9,9,0,9,17,10,4,9,5,17,10,4,9,5,0,17,4,5,4,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,9,9,4,17,10,4,9,5,17,10,4,9,5,17,10,4,9,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,56,59,35,35,37,37,37,37,26,0,0,0,0,0,0,0,0,55,0,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,53,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,38,38,38,40,40,16,26,50,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,63,65,35,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,35,43,35,43,35,35,35,35,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,0,0,62,25,25,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,67,16,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,16,16,50,50,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,59,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,65,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,52,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,21,35,49,16,43,40,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,30,26,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,53,35,60,55,59,62,63,69,35,60,35,25,60,21,21,21,21,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,49,49,49,49,21,49,53,53,63,65,70,49,49,49,49,49,16,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,55,58,59,61,63,63,16,62,43,0,66,70,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,49,16,26,26,25,69,69,37,37,37,21,43,16,65,63,55,57,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,63,35,40,35,35,50,50,63,21,21,63,64,64,37,51,38,51,38,51,38,55,56,57,58,16,61,55,56,57,58,16,61,26,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,21,21,21,21,21,53,35,60,63,51,38,51,38,51,38,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,63,63,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,55,51,38,51,38,51,38,43,21,70,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,49,50,37,21,51,52,53,38,35,25,54,40,55,56,57,58,59,16,43,60,61,62,63,64,65,66,67,68,69,70,26,30,54,54,62,67,68,54,54,62,67,68,54,54,62,68,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,77,77,77,76,77,76,77,0,0,76,76,77,80,76,77,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,80,76,77,80,76,77,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,80,76,77,76,76,77,77,80,76,77,80,76,77,76,77,76,77,76,77,76,77,80,76,77,80,76,77,76,77,80,76,77,80,76,77,80,76,77,80,76,77,76,77,80,80,80,80,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,76,77,80,80,0,0,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,84,84,83,84,83,84,83,84,84,84,83,84,83,84,83,84,83,83,83,83,83,83,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,75,75,0,75,0,75,75,75,0,75,75,86,87,75,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,86,87,75,86,87,75,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,86,87,75,75,75,86,87,75,86,87,75,75,75,75,75,86,87,75,86,87,75,75,86,87,75,86,87,75,86,87,75,86,87,75,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,75,86,87,75,87,86,87,75,86,87,75,86,87,75,86,86,86,86,86,86,0,42,42,36,47,42,0,0,0,42,42,47,36,47,47,36,42,88,36,42,47,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,88,36,42,47,88,36,42,47,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,88,36,42,47,36,36,42,42,47,47,88,36,42,47,88,36,42,47,36,42,47,36,42,47,36,42,47,36,42,47,88,36,42,47,88,36,42,47,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,36,42,47,88,88,88,88,88,88,0,0,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,89,90,90,90,89,90,89,90,89,90,90,90,89,90,89,90,89,90,89,89,89,89,89,89,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,71,0,73,73,0,71,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,71,73,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,71,73,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,74,74,78,78,0,78,0,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,78,74,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74,78,74],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[2,2],[2,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[4,4],[5,5],[[]],[[]],[[],2],[[],2],0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[[4,7],8],[[9,7],8],[[5,7],8],0,[[]],[[],10],[[]],[[]],[[]],[[]],[11,[[13,[9,12]]]],[11,[[13,[9,12]]]],[[14,6,15,16],17],[[],[[3,[18]]]],0,[4,[[19,[5]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[20,15,21],19],[[20,10,17],19],[20,19],[[20,[23,[22]],24],19],[[20,15,25],19],[[20,15,26],19],[[20,17],19],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[],19],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,[[13,[27,28]]]],0,0,0,[29,[[19,[30]]]],[29,31],0,0,[[20,9],19],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,32],15],0,[[]],[[]],[4,[[3,[33]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],34],[[],34],[[],34],[[],34],[[],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[9,11],[[13,[12]]]],[[9,11],[[13,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],0,0,[35,36],0,[37,32],0,[37,32],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,39],0,0,[40,41],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[35,42],[43,[[46,[[45,[[44,[39]]]]]]]],0,0,[35,47],0,[35,48],0,[49],[50],[37],[21],[51],[52],[53],[38],[35],[25],[54],[40],[55],[56],[57],[58],[59],[16],[43],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[26],[30],[49,49],[50,50],[37,37],[21,21],[51,51],[52,52],[53,53],[38,38],[35,35],[25,25],[54,54],[40,40],[55,55],[56,56],[57,57],[58,58],[59,59],[16,16],[43,43],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[70,70],[26,26],[30,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[25,39],0,[[],49],[[],50],[[],37],[[],21],[[],51],[[],52],[[],53],[[],38],[[],35],[[],25],[[],54],[[],40],[[],55],[[],56],[[],57],[[],58],[[],59],[[],16],[[],43],[[],60],[[],61],[[],62],[[],63],[[],64],[[],65],[[],66],[[],67],[[],68],[[],69],[[],70],[[],26],[[],30],0,0,[50,71],0,[50,48],0,[50],0,[50,39],0,[50,72],0,[50,72],0,[50],0,[50,39],0,[50,73],0,[16,32],0,[50,24],0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[49,6],[50,6],[37,6],[21,6],[51,6],[52,6],[53,6],[38,6],[35,6],[25,6],[54,6],[40,6],[55,6],[56,6],[57,6],[58,6],[59,6],[16,6],[43,6],[60,6],[61,6],[62,6],[63,6],[64,6],[65,6],[66,6],[67,6],[68,6],[69,6],[70,6],[26,6],[30,6],0,[[49,49],48],[[50,50],48],[[37,37],48],[[21,21],48],[[51,51],48],[[52,52],48],[[53,53],48],[[38,38],48],[[35,35],48],[[25,25],48],[[54,54],48],[[40,40],48],[[55,55],48],[[56,56],48],[[57,57],48],[[58,58],48],[[59,59],48],[[16,16],48],[[43,43],48],[[60,60],48],[[61,61],48],[[62,62],48],[[63,63],48],[[64,64],48],[[65,65],48],[[66,66],48],[[67,67],48],[[68,68],48],[[69,69],48],[[70,70],48],[[26,26],48],[[30,30],48],0,0,0,0,0,0,[[49,7],8],[[50,7],8],[[37,7],8],[[21,7],8],[[51,7],8],[[52,7],8],[[53,7],8],[[38,7],8],[[35,7],8],[[25,7],8],[[54,7],8],[[40,7],8],[[55,7],8],[[56,7],8],[[57,7],8],[[58,7],8],[[59,7],8],[[16,7],8],[[43,7],8],[[60,7],8],[[61,7],8],[[62,7],8],[[63,7],8],[[64,7],8],[[65,7],8],[[66,7],8],[[67,7],8],[[68,7],8],[[69,7],8],[[70,7],8],[[26,7],8],[[30,7],8],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[35,24],[60,24],0,0,0,[21,39],0,[21,39],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[49,72],0,[49,72],0,0,0,[53,48],0,0,0,0,[49,72],0,[49,72],0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[63,74],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[49,72],0,0,0,0,0,0,0,0,[37,72],0,0,[[43,75]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[35,36]],[[40,41]],[[35,42]],[[35,47]],[[50,71]],[[50,73]],[[63,74]],[[21,76]],[[21,77]],[[63,78]],0,0,0,[51,39],[38,39],0,0,0,0,[55,32],[56,32],[57,32],[58,32],[16,32],[61,32],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,76],0,[21,77],0,0,0,0,0,0,[51,39],[38,39],0,0,0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[63,78],0,[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,[51,39],[38,39],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,32],0,0,0,0,[54,32],0,0,0,0,[54,32],0,0,0,0,[1],[[]],[79,72],0,[79,24],0,[[]],[[]],[[]],[[],3],[[],3],[79],[79,79],[[]],[[],79],[6],[6],[[]],[6],[79,6],[[79,79],48],[[79,7],8],[[]],[[],6],[[]],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],34],[[]],[[]],[[],3],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[76,24],[77,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[80],[80,80],[76,76],[77,77],[[]],[[]],[[]],[[76,76],81],[[77,77],81],[[],80],[[],76],[[],77],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[6],[6],[6],[80,6],[[80,80],48],[[76,76],48],[[77,77],48],[[],48],[[],48],[[],48],[[],48],[[80,7],8],[[76,7],8],[[77,7],8],[[]],[[]],[[]],[39,[[3,[76]]]],[39,[[3,[77]]]],[24,[[3,[76]]]],[24,[[3,[77]]]],[[],82],[[],82],[76],[77],[[],6],[[],6],[[],6],[[]],[[]],[[]],[39,48],[39,48],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[76,76],[[3,[81]]]],[[77,77],[[3,[81]]]],[80,72],0,[80,72],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],34],[[],34],[[],34],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[80,72],0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[83],[84],[83,83],[84,84],[[]],[[]],[[],83],[[],84],[6],[6],[6],[6],[[]],[[]],[6],[6],[83,6],[84,6],[[83,83],48],[[84,84],48],[[83,7],8],[[84,7],8],[[]],[[]],[[],6],[[],6],[[]],[[]],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],34],[[],34],[84,72],0,[[]],[[]],[[]],[[]],[[],3],[[],3],[84,72],0,[[]],[[]],[[]],[[]],[[]],[[]],[83,72],0,[83,72],0,[83,72],0,0,[1],[[]],[[]],[[]],[[]],[[],3],[[],3],[85],[85,85],[[]],[[],85],[6],[6],[[]],[6],[85,6],[[85,85],48],[[85,7],8],[[]],[[],6],[[]],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],34],[[]],[[]],[[],3],[[]],[[]],[[]],[85,72],0,[85,72],0,[85,72],0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[75,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[86],[87],[86,86],[87,87],[75,75],[[]],[[]],[[]],[[75,75],81],[[],86],[[],87],[[],75],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[6],[6],[6],[86,6],[87,6],[[86,86],48],[[87,87],48],[[75,75],48],[[],48],[[],48],[[86,7],8],[[87,7],8],[[75,7],8],[[]],[[]],[[]],[39,[[3,[75]]]],[24,[[3,[75]]]],[[],82],[75],[[],6],[[],6],[[],6],[[]],[[]],[[]],[39,48],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[75,75],[[3,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],34],[[],34],[[],34],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[86,72],0,[86,72],0,[86,72],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[36,24],[42,24],[47,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[88],[88,88],[36,36],[42,42],[47,47],[[]],[[]],[[]],[[]],[[36,36],81],[[42,42],81],[[47,47],81],[[],88],[[],36],[[],42],[[],47],[6],[6],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[88,6],[[88,88],48],[[36,36],48],[[42,42],48],[[47,47],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[88,7],8],[[36,7],8],[[42,7],8],[[47,7],8],[[]],[[]],[[]],[[]],[39,[[3,[36]]]],[39,[[3,[42]]]],[39,[[3,[47]]]],[24,[[3,[36]]]],[24,[[3,[42]]]],[24,[[3,[47]]]],[[],82],[[],82],[[],82],[36],[42],[47],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[39,48],[39,48],[39,48],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,36],[[3,[81]]]],[[42,42],[[3,[81]]]],[[47,47],[[3,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],34],[[],34],[[],34],[[],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[88,72],0,[88,72],0,[88,72],0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[89],[90],[89,89],[90,90],[[]],[[]],[[],89],[[],90],[6],[6],[6],[6],[[]],[[]],[6],[6],[89,6],[90,6],[[89,89],48],[[90,90],48],[[89,7],8],[[90,7],8],[[]],[[]],[[],6],[[],6],[[]],[[]],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],34],[[],34],[90,72],0,[[]],[[]],[[]],[[]],[[],3],[[],3],[90,72],0,[[]],[[]],[[]],[[]],[[]],[[]],[89,72],0,[89,72],0,[89,72],0,0,[1],[[]],[[]],[[]],[[]],[[],3],[[],3],[91],[91,91],[[]],[[],91],[6],[6],[[]],[6],[91,6],[[91,91],48],[[91,7],8],[[]],[[],6],[[]],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],34],[[]],[[]],[[],3],[[]],[[]],[[]],[91,72],0,[91,72],0,[91,72],0,0,0,0,0,0,0,0,0,[1],[1],[71,24],[73,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[71,71],[73,73],[[]],[[]],[[71,71],81],[[73,73],81],[[],71],[[],73],[6],[6],[6],[6],[[]],[[]],[6],[6],[[71,71],48],[[73,73],48],[[],48],[[],48],[[],48],[[],48],[[71,7],8],[[73,7],8],[[]],[[]],[39,[[3,[71]]]],[39,[[3,[73]]]],[24,[[3,[71]]]],[24,[[3,[73]]]],[[],82],[[],82],[71],[73],[[],6],[[],6],[[]],[[]],[39,48],[39,48],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[71,71],[[3,[81]]]],[[73,73],[[3,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],34],[[],34],[[]],[[]],[[]],[[]],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],[41,24],[[]],[[]],[[]],[[]],[[],3],[[],3],[41,41],[[]],[[41,41],81],[[],41],[6],[6],[[]],[6],[[41,41],48],[[],48],[[],48],[[41,7],8],[[]],[39,[[3,[41]]]],[24,[[3,[41]]]],[[],82],[41],[[],6],[[]],[39,48],[[],3],[[]],[[]],[[]],[[41,41],[[3,[81]]]],[[]],[[]],[[]],[[],13],[[],13],[[],34],[[]],[[]],[[],3],[[]],[[]],[[]],0,[1],[[]],[[]],[[]],[[]],[[],3],[[],3],[92],[92,92],[[]],[[],92],[6],[6],[[]],[6],[92,6],[[92,92],48],[[92,7],8],[[]],[[],6],[[]],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],34],[[]],[[]],[[],3],[[]],[92,32],0,[[]],[[]],[92,32],0,[92,32],0,[92,32],0,0,0,0,0,0,0,0,0,0,[1],[1],[78,24],[74,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[78,78],[74,74],[[]],[[]],[[78,78],81],[[74,74],81],[[],78],[[],74],[6],[6],[6],[6],[[]],[[]],[6],[6],[[78,78],48],[[74,74],48],[[],48],[[],48],[[],48],[[],48],[[78,7],8],[[74,7],8],[[]],[[]],[39,[[3,[78]]]],[39,[[3,[74]]]],[24,[[3,[78]]]],[24,[[3,[74]]]],[[],82],[[],82],[78],[74],[[],6],[[],6],[[]],[[]],[39,48],[39,48],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[78,78],[[3,[81]]]],[[74,74],[[3,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],34],[[],34],[[]],[[]],[[]],[[]],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Private"],[3,"Command"],[4,"Option"],[4,"Recording"],[3,"RecordingInfo"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Args"],[3,"AnnotationsPerFrame"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"PathBuf"],[3,"TimePoint"],[3,"ArFrame"],[3,"ArFrame"],[3,"Id"],[6,"Result"],[3,"Session"],[3,"ArCamera"],[3,"EntityPath"],[8,"Into"],[15,"str"],[3,"ArPointCloud"],[3,"FrameAnnotation"],[3,"Duration"],[3,"ParseFloatError"],[3,"Path"],[3,"Sequence"],[8,"Iterator"],[15,"f64"],[3,"PossibleValue"],[3,"TypeId"],[3,"ArPlaneAnchor"],[4,"Alignment"],[3,"ArLightEstimate"],[3,"ArPlaneGeometry"],[15,"i32"],[3,"CmCalibratedMagneticField"],[4,"CalibrationAccuracy"],[4,"PlaneClassification"],[3,"ArMeshGeometry"],[3,"Iter"],[3,"Cloned"],[3,"FilterMap"],[4,"PlaneClassificationStatus"],[15,"bool"],[3,"AvCameraCalibrationData"],[3,"AvDepthData"],[3,"ArFaceGeometry"],[3,"ArBlendShapeMap"],[3,"ArFaceAnchor"],[3,"CmVector"],[3,"CmDeviceMotion"],[3,"CmAccelerometerData"],[3,"CmGyroData"],[3,"CmMagnetometerData"],[3,"CmMotionManagerSnapshot"],[3,"ArMeshAnchor"],[3,"ArMeshData"],[3,"KeyPoint"],[3,"Object"],[3,"Edge"],[3,"Skeleton"],[3,"Skeletons"],[3,"NormalizedPoint2D"],[3,"Point3D"],[3,"AnnotatedKeyPoint"],[3,"ObjectAnnotation"],[4,"Accuracy"],[15,"f32"],[4,"Quality"],[4,"Method"],[4,"MeshClassification"],[4,"TrackingState"],[4,"TrackingStateReason"],[4,"Type"],[3,"MapEntry"],[3,"EulerAngles"],[4,"Ordering"],[15,"u64"],[3,"Vertex"],[3,"TextureCoordinate"],[3,"DirectionVector"],[3,"Vertex"],[3,"Face"],[3,"PlaneVector"],[3,"Vertex"],[3,"TextureCoordinate"],[3,"Point"],[3,"Quaternion"]]},\
"raw_mesh":{"doc":"This example demonstrates how to use the Rerun Rust SDK to …","t":[3,13,13,13,7,3,3,3,13,4,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,5,12,5,5,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,12,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Args","Avocado","BrainStem","Buggy","GLOBAL","GltfNode","GltfPrimitive","GltfTransform","Lantern","Scene","__clone_box","albedo_factor","augment_args","augment_args_for_update","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","children","clone","clone_into","colors","command","command_for_update","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_gltf","group_id","indices","init","init","init","init","init","into","into","into","into","into","load_gltf","log_coordinate_space","log_node","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","main","name","node_name","node_primitives","normals","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","positions","primitives","r","rerun","run","s","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scene","scene_path","scene_path","t","texcoords","to_owned","to_possible_value","transform","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","update_from_arg_matches","update_from_arg_matches_mut","value_variants","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from"],"q":["raw_meshd":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Log a glTF node with Rerun.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specifies the glTF scene to load.","","Specifies the path of an arbitrary glTF scene to load.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,4,4,4,0,0,0,0,4,0,4,26,8,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,13,4,4,26,8,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,4,8,13,26,27,4,8,8,8,13,8,26,13,26,27,4,8,13,26,27,4,8,0,0,0,13,26,27,4,8,13,26,27,4,8,0,13,0,0,26,13,26,27,4,8,13,26,27,4,8,26,13,27,8,0,27,13,26,27,4,8,13,26,27,4,8,8,8,8,27,26,4,4,13,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8,8,8,4,13,26,27,4,8,13,26,27,4,8,13,26,27,4,8],"f":[0,0,0,0,0,0,0,0,0,0,[1],0,[2,2],[2,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,[4,4],[[]],0,[[],2],[[],2],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[]],[[]],[[]],[[]],[[]],[5],[5],[5],[5],[5],[[4,6],7],[[8,6],7],[[]],[[]],[[]],[[]],[[]],[9,[[11,[8,10]]]],[9,[[11,[8,10]]]],[12,13],[[],[[3,[14]]]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[15,16],[[17,[19,[18]],20],21],[[17,13],21],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[],21],0,[12,22],[12,16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[17,8],21],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[8,[[21,[23]]]],0,0,0,[[]],[4,[[3,[24]]]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[8,9],[[11,[10]]]],[[8,9],[[11,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Private"],[3,"Command"],[4,"Option"],[4,"Scene"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Args"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Node"],[3,"GltfNode"],[3,"Id"],[3,"Document"],[8,"Iterator"],[3,"Session"],[3,"EntityPath"],[8,"Into"],[15,"str"],[6,"Result"],[3,"String"],[3,"PathBuf"],[3,"PossibleValue"],[3,"TypeId"],[3,"GltfPrimitive"],[3,"GltfTransform"]]},\
"re_analytics":{"doc":"Rerun’s analytics SDK.","t":[3,4,13,13,13,17,3,4,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,0,12,11,11,11,11,11,11,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,17,13,13,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,5,11,11,11,11,11,3,4,13,13,13,12,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,13,3,4,13,5,11,11,11,11,11,11,11,11,11,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,13,13,13,13,13,17,3,3,4,3,3,13,4,18,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["Analytics","AnalyticsError","Append","Bool","Config","DISCLAIMER","Event","EventKind","Float","Integer","Pipeline","Property","Sink","String","Update","append","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cli","clone","clone","clone","clone_into","clone_into","clone_into","config","config","config_native","default_append_props","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deregister_append_property","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","event_id","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","hashed","init","init","init","init","init","into","into","into","into","into","kind","name","new","pipeline","pipeline_native","props","provide","record","register_append_property","serialize","serialize","serialize","sink_native","source","time_utc","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","with_build_info","with_prop","Analytics","CliError","Config","DETAILS","Io","Serde","borrow","borrow_mut","clear","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","init","into","opt","print_config","print_details","provide","set","source","to_string","try_from","try_into","type_id","Config","ConfigError","Io","Serde","UnknownLocation","analytics_enabled","analytics_id","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","config_dir","config_file","config_file_path","data_dir","data_dir_path","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","fmt","fmt","fmt","from","from","from","from","init","init","into","into","is_first_run","is_first_run","load","opt_in_metadata","project_dirs","provide","save","serialize","session_id","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Io","Pipeline","PipelineError","Serde","append_event","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","event_tx","flush_events","flush_pending_events","fmt","fmt","fmt","from","from","from","from","init","init","into","into","new","provide","realtime_pipeline","record","source","to_string","try_from","try_from","try_into","try_into","try_send_event","type_id","type_id","Capture","FileSeek","HttpStatus","HttpTransport","Identify","PUBLIC_POSTHOG_PROJECT_KEY","PostHogBatch","PostHogCaptureEvent","PostHogEvent","PostHogIdentifyEvent","PostHogSink","Serde","SinkError","URL","Url","agent","api_key","batch","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","distinct_id","distinct_id","drop","drop","drop","drop","drop","drop","drop","event","event","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_event","from_events","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","properties","properties","provide","resolved_url","send","serialize","serialize","serialize","serialize","set","source","timestamp","timestamp","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","body","status_code","status_text"],"q":["re_analytics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_analytics::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_analytics::config_native","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_analytics::pipeline_native","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_analytics::sink_native","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_analytics::sink_native::SinkError","",""],"d":["","","Append a new event to the time series associated with this …","","","","","","","","","","","","Update the permanent state associated with this analytics …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deregister a property.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns a new string property that is a hex representation …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","<code>None</code> if analytics are disabled.","","","","Record an event.","Register a property that will be included in all …","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds Rerun version, git hash, build date and similar as …","NOTE: due to an earlier snafu, we filter out all …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","The path of the config file.","","The directory where pending data is stored.","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Is this the first time the user runs the app?","","Opt-in meta-data you can set via <code>rerun analytics</code>.","","","","","A unique ID for this session.","","","","","","","","","","","An eventual, at-least-once(-ish) event pipeline, backed by …","","","Appends the <code>event</code> to the active <code>session_file</code>.","","","","","","","","","","","","Sends all events currently buffered in the <code>session_file</code> …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Our public entrypoint; this will be resolved into an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,5,6,14,0,0,0,6,6,14,0,14,6,5,4,7,5,4,6,14,7,5,4,6,14,0,5,4,6,5,4,6,7,7,0,7,7,5,4,6,14,7,5,4,6,14,7,5,4,6,7,5,4,6,14,5,7,5,4,6,14,14,7,5,4,6,6,6,6,6,6,14,14,14,14,6,7,5,4,6,14,7,5,4,6,14,4,4,7,7,0,4,14,7,7,5,4,6,0,14,4,5,4,6,14,7,5,4,6,14,7,5,4,6,14,7,5,4,6,14,4,4,4,27,0,27,0,27,27,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,27,0,27,27,27,27,27,0,0,18,18,18,8,8,18,8,18,8,8,8,8,8,8,8,8,18,8,18,8,8,18,8,18,18,8,18,18,18,8,18,8,18,8,8,8,8,8,8,18,8,8,8,18,8,18,18,8,18,8,18,8,20,0,0,20,0,20,36,20,36,20,36,20,36,20,36,36,0,0,20,20,36,20,20,20,36,20,36,20,36,36,20,0,36,20,20,20,36,20,36,0,20,36,40,19,19,19,40,0,0,0,0,0,0,19,0,34,0,34,43,43,39,19,34,40,41,42,43,39,19,34,40,41,42,43,39,34,39,34,34,39,19,34,40,41,42,43,39,19,34,40,41,42,43,41,42,39,19,34,40,41,42,43,41,42,39,19,19,34,40,41,42,43,39,19,19,19,34,40,41,42,43,40,43,39,19,34,34,40,41,42,43,39,19,34,40,41,42,43,41,42,19,34,34,40,41,42,43,42,19,41,42,39,34,19,39,19,34,40,41,42,43,39,19,34,40,41,42,43,39,19,34,40,41,42,43,45,45,45],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[2,[1]]]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5,5],[4,4],[6,6],[[]],[[]],[[]],[7,8],0,0,0,[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[[7,1]],[[],[[10,[5]]]],[[],[[10,[4]]]],[[],[[10,[6]]]],[9],[9],[9],[9],[9],[[5,5],11],0,[[5,12],13],[[4,12],13],[[6,12],13],[[14,12],13],[[14,12],13],[[]],[[]],[[]],[15,6],[11,6],[[]],[16,6],[17,6],[1,6],[18,14],[19,14],[20,14],[[]],[6,6],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],0,0,[21,[[10,[7,14]]]],0,0,0,[22],[[7,4]],[[7,1,[3,[6]]]],[5,10],[4,10],[6,10],0,[14,[[24,[23]]]],0,[[]],[[]],[[]],[[],17],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],25],[[],25],[[],25],[[],25],[[],25],[[[3,[[2,[1]]]]],4],[[4,26],4],[[4,[3,[[2,[1]]]],[3,[6]]],4],0,0,0,0,0,0,[[]],[[]],[[],[[10,[27]]]],[9],[9],[9],[[27,12],13],[[27,12],13],[18,27],[14,27],[[]],[28,27],[29,27],[[],9],[[]],[11,[[10,[27]]]],[[],[[10,[27]]]],[[]],[22],[30,[[10,[27]]]],[27,[[24,[23]]]],[[],17],[[],10],[[],10],[[],25],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[8,8],[[]],[8,31],[8,31],0,[8,31],0,[9],[9],[9],[9],[[],[[10,[8]]]],[9],[9],[[18,12],13],[[18,12],13],[[8,12],13],[[]],[29,18],[28,18],[[]],[[],9],[[],9],[[]],[[]],[8,11],0,[[],[[10,[8,18]]]],0,[[],[[10,[32,18]]]],[22],[8,[[10,[18]]]],[8,10],0,[18,[[24,[23]]]],[[]],[[],17],[[],10],[[],10],[[],10],[[],10],[[],25],[[],25],0,0,0,0,[[33,1,1,4],[[10,[4]]]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],[9],[9],0,[[33,1,1,34],[[10,[19]]]],[[8,34],35],[[20,12],13],[[20,12],13],[[36,12],13],[28,20],[[]],[29,20],[[]],[[],9],[[],9],[[]],[[]],[[8,21,34],[[10,[[24,[36]],20]]]],[22],[[8,34,33,21,37,38],35],[[36,4]],[20,[[24,[23]]]],[[],17],[[],10],[[],10],[[],10],[[],10],[[37,4]],[[],25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[34,34],[[]],[[]],[[],34],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],0,0,[9],[9],[9],[9],[9],[9],[9],0,0,[[39,12],13],[[19,12],13],[[19,12],13],[[34,12],13],[[40,12],13],[[41,12],13],[[42,12],13],[[43,12],13],[[]],[44,19],[29,19],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1,4],40],[[],43],[[],9],[[],9],[[],9],[34,[[10,[17,19]]]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[22],0,[[34,1,1],[[10,[19]]]],[40,10],[41,10],[42,10],[43,10],0,[19,[[24,[23]]]],0,0,[[]],[[]],[[],17],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,0],"p":[[15,"str"],[4,"Cow"],[8,"Into"],[3,"Event"],[4,"EventKind"],[4,"Property"],[3,"Analytics"],[3,"Config"],[15,"usize"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"AnalyticsError"],[15,"f64"],[15,"i64"],[3,"String"],[4,"ConfigError"],[4,"SinkError"],[4,"PipelineError"],[3,"Duration"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"TypeId"],[3,"BuildInfo"],[4,"CliError"],[3,"Error"],[3,"Error"],[8,"IntoIterator"],[3,"Path"],[3,"ProjectDirs"],[3,"File"],[3,"PostHogSink"],[6,"Result"],[3,"Pipeline"],[3,"Sender"],[3,"Receiver"],[3,"Url"],[4,"PostHogEvent"],[3,"PostHogCaptureEvent"],[3,"PostHogIdentifyEvent"],[3,"PostHogBatch"],[4,"Error"],[13,"HttpStatus"]]},\
"re_arrow_store":{"doc":"The Rerun datastore, implemented on top of Apache Arrow …","t":[8,3,3,3,13,4,3,3,3,13,3,13,13,13,13,3,3,4,13,2,2,13,2,2,2,13,2,4,6,12,0,12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,10,12,12,12,12,12,10,10,12,0,12,12,0,0,12,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,10,10,10,10,6,6,5,5,5,5,5,5,3,3,18,3,3,3,3,3,3,18,3,3,3,4,6,13,6,13,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,11,11,11,12,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,3,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,13,13,13,13,13,13,4,6,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["ArrayExt","DataStore","DataStoreConfig","DataStoreStats","DropAtLeastPercentage","GarbageCollectionTarget","IndexBucket","IndexRowNr","IndexTable","InvalidClusteringComponent","LatestAtQuery","MismatchedInstances","MismatchedRows","MoreThanOneRow","Other","RangeQuery","RowIndex","RowIndexKind","SparseClusteringComponent","StreamReader","StreamState","Temporal","TimeInt","TimeRange","TimeType","Timeless","Timeline","WriteError","WriteResult","all_components","arrow_util","at","buckets","clean_for_polars","cluster_comp_cache","cluster_key","cluster_key","cluster_key","component_bucket_nb_rows","component_bucket_size_bytes","components","config","config","enable_compaction","ent_path","gc_id","get_child_length","index_bucket_nb_rows","index_bucket_size_bytes","indices","indices","insert_id","is_dense","is_sorted_and_unique","messages","polars_util","query_id","range","store","store_gc","store_insert_ids","store_polars","store_read","store_stats","store_write","timeless_components","timeless_indices","timeline","timeline","timeline","timeline","total_component_rows","total_component_size_bytes","total_index_rows","total_index_size_bytes","total_temporal_component_buckets","total_temporal_component_rows","total_temporal_component_size_bytes","total_temporal_index_buckets","total_temporal_index_rows","total_temporal_index_size_bytes","total_timeless_component_rows","total_timeless_component_size_bytes","total_timeless_index_rows","total_timeless_index_size_bytes","cluster_comp","cluster_comp_nb_instances","key","num_instances","ArrayExt","clean_for_polars","get_child_length","is_dense","is_sorted_and_unique","SharedPolarsError","SharedResult","dataframe_from_results","drop_all_nulls","join_dataframes","latest_component","latest_components","range_components","ComponentBucket","ComponentTable","DEFAULT","DataStore","DataStoreConfig","IndexBucket","IndexBucketIndices","IndexRowNr","IndexTable","KIND_MASK","PersistentComponentTable","PersistentIndexTable","RowIndex","RowIndexKind","SecondaryIndex","Temporal","TimeIndex","Timeless","__clone_box","__clone_box","__clone_box","__clone_box","all_components","all_components","all_components","archive","archived","as_u64","az","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buckets","buckets","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","chunks","chunks","clear_msg_metadata","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cluster_comp_cache","cluster_key","cluster_key","cluster_key","cluster_key","cluster_key","cmp","cmp","cmp","component_bucket_nb_rows","component_bucket_size_bytes","components","config","data","datatype","datatype","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable_compaction","encompasses","ent_path","ent_path","entity_path","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","find_bucket","find_bucket_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","formatted_time_range","from","from","from","from","from","from","from","from","from","from","from","from","from_u63","gc","gc_drop_at_least_size_bytes","gc_id","get","get","get","get","get_msg_metadata","get_or_create_cluster_component","index_bucket_nb_rows","index_bucket_size_bytes","indices","indices","indices","indices","init","init","init","init","init","init","init","init","init","init","init","init","insert","insert","insert","insert","insert_id","insert_id_key","insert_row","insert_timeless_row","into","into","into","into","into","into","into","into","into","into","into","into","is_sorted","is_sorted","iter_buckets","iter_buckets","iter_indices","iter_time_ranges","kind","latest_at","latest_at","latest_at","latest_at","lookup_data_type","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","messages","name","name","name","name","named_indices","named_indices","new","new","new","new","new","new","new","num_rows","oldest_time_per_timeline","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","push","push","push","query_id","range","range","range","range","range_bucket_rev_mut","range_buckets","range_buckets_rev","row_offset","sanity_check","sanity_check","sanity_check","sanity_check","sanity_check","sanity_check","sanity_check","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sort","sort_indices_if_needed","sort_indices_if_needed","sort_indices_if_needed","split","store_insert_ids","time_range","time_ranges","timeless_components","timeless_indices","timeline","timeline","times","times","to_dataframe","to_dataframe","to_dataframe","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_buckets","total_buckets","total_rows","total_rows","total_rows","total_rows","total_rows","total_rows","total_rows","total_rows","total_size_bytes","total_size_bytes","total_size_bytes","total_size_bytes","total_size_bytes","total_size_bytes","total_size_bytes","total_size_bytes","total_temporal_component_buckets","total_temporal_component_rows","total_temporal_component_size_bytes","total_temporal_index_buckets","total_temporal_index_rows","total_temporal_index_size_bytes","total_timeless_component_rows","total_timeless_component_size_bytes","total_timeless_index_rows","total_timeless_index_size_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","DropAtLeastPercentage","GarbageCollectionTarget","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","component_as_series","find_component_datatype","insert_ids_as_series","new_infallible_series","sort_df_columns","LatestAtQuery","RangeQuery","__clone_box","__clone_box","at","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","range","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","timeline","timeline","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","DataStoreStats","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","config","default","deref","deref_mut","drop","fmt","from","from_store","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","total_component_rows","total_component_size_bytes","total_index_rows","total_index_size_bytes","total_temporal_component_buckets","total_temporal_component_rows","total_temporal_component_size_bytes","total_temporal_index_buckets","total_temporal_index_rows","total_temporal_index_size_bytes","total_timeless_component_rows","total_timeless_component_size_bytes","total_timeless_index_rows","total_timeless_index_size_bytes","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","InvalidClusteringComponent","MismatchedInstances","MismatchedRows","MoreThanOneRow","Other","SparseClusteringComponent","WriteError","WriteResult","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","drop","find_split_index","fmt","fmt","from","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","provide","saturating_as","saturating_cast_from","source","split_time_range_off","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","cluster_comp","cluster_comp_nb_instances","key","num_instances"],"q":["re_arrow_store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_arrow_store::WriteError","","","","re_arrow_store::arrow_util","","","","","re_arrow_store::polars_util","","","","","","","","re_arrow_store::storere_arrow_store::store_gc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_arrow_store::store_polars","","","","","re_arrow_store::store_read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_arrow_store::store_stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_arrow_store::store_write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_arrow_store::store_write::WriteError","","",""],"d":["","A complete data store: covers all timelines, all entities, …","","","Try to drop <em>at least</em> the given percentage.","","An <code>IndexBucket</code> holds a size-delimited (data size and/or …","","An <code>IndexTable</code> maps specific points in time to rows in …","","A query a given time, for a given timeline.","","","","","A query over a time range, for a given timeline.","An opaque type that directly refers to a row of data …","","","","","","","","","","","","","Track all of the components that have been written to.","","","The actual buckets, where the indices are stored.","Create a new <code>Array</code> which avoids problematic types for …","Used to cache auto-generated cluster components, i.e. <code>[0]</code>, …","The cluster key specifies a column/component that is …","Carrying the cluster key around to help with assertions …","Carrying the cluster key around to help with assertions …","The maximum number of rows in a component bucket before …","The maximum size of a component bucket before triggering a …","Maps a component name to its associated table, for all …","The configuration of the data store (e.g. bucket sizes).","","Should soon-to-be inactive buckets be compacted before …","The entity this table is related to, for debugging …","Monotonically increasing ID for GCs.","Returns the length of the child array at the given index.","The maximum number of rows in an index bucket before …","The maximum size of an index bucket before triggering a …","Maps an entity to its index, for a specific timeline.","","Monotonically increasing ID for insertions.","Returns <code>true</code> if the array is dense (no nulls).","Returns <code>true</code> if the array is both sorted (increasing …","Maps <code>MsgId</code>s to some metadata (just timepoints at the …","","Monotonically increasing ID for queries.","","","","If enabled, will store the ID of the write request …","","","","","Dedicated component tables for timeless data. Never …","Dedicated index tables for timeless data. Never garbage …","The timeline this table operates in, for debugging …","The timeline the bucket’s parent table operates in, for …","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Array</code> which avoids problematic types for …","Returns the length of the child array at the given index.","Returns <code>true</code> if the array is dense (no nulls).","Returns <code>true</code> if the array is both sorted (increasing …","","","","Returns a new <code>DataFrame</code> where all rows that only contain …","Reduces an iterator of dataframes into a single dataframe …","Queries a single component from its own point-of-view as …","Queries any number of components and their cluster keys …","Iterates over the rows of any number of components and …","A <code>ComponentBucket</code> holds a size-delimited (data size) chunk …","A <code>ComponentTable</code> holds all the values ever inserted for a …","","A complete data store: covers all timelines, all entities, …","","An <code>IndexBucket</code> holds a size-delimited (data size and/or …","Just the indices, to simplify interior mutability.","","An <code>IndexTable</code> maps specific points in time to rows in …","","A <code>PersistentComponentTable</code> holds all the timeless values …","A <code>PersistentIndexTable</code> maps specific entries to rows in …","An opaque type that directly refers to a row of data …","","A vector of references into the component tables. None = …","","A vector of times. Our primary column, always densely …","","","","","","Retrieve all the <code>ComponentName</code>s that have been written to …","Track all of the components that have been written to.","Track all of the components that have been written to.","Archives the bucket as a new one is about to take its …","Has this bucket been archived yet?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The actual buckets, where the indices are stored.","The actual buckets, where the component data is stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All the data for this table: many rows of a single column.","All the data for this bucket: many rows of a single column.","","","","","","","","","","Used to cache auto-generated cluster components, i.e. <code>[0]</code>, …","See <code>Self::cluster_key</code> for more information about the …","The cluster key specifies a column/component that is …","Carrying the cluster key around to help with assertions …","Carrying the cluster key around to help with assertions …","Carrying the cluster key around to help with assertions …","","","","The maximum number of rows in a component bucket before …","The maximum size of a component bucket before triggering a …","Maps a component name to its associated table, for all …","The configuration of the data store (e.g. bucket sizes).","Returns a shallow clone of all the chunks in this bucket.","Type of the underlying component.","Type of the underlying component.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Should soon-to-be inactive buckets be compacted before …","Does <code>self</code> fully encompass <code>time_ranges</code> for the given …","The entity this table is related to, for debugging …","The entity this table is related to, for debugging …","","","","","","","","","","","Returns the index bucket whose time range covers the given …","Returns the index bucket whose time range covers the given …","","","","","","","","","","","","","","","","","","","","","Returns a formatted string of the time range in the bucket","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Panics if <code>v</code> is 0. In debug, panics if <code>v</code> has its most …","Triggers a garbage collection according to the desired …","","Monotonically increasing ID for GCs.","Retrieves the data associated with a list of <code>components</code> at …","Returns a shallow clone of the row data present at the …","","Returns a shallow clone of the row data present at the …","","Tries to find the cluster component for the current row, …","The maximum number of rows in an index bucket before …","The maximum size of an index bucket before triggering a …","Maps an entity to its index, for a specific timeline.","All component indices for this bucket.","","All secondary indices for this bucket (i.e. everything but …","","","","","","","","","","","","","Inserts a <code>MsgBundle</code>’s worth of components into the …","","","","Monotonically increasing ID for insertions.","The column name used for storing insert requests’ IDs …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the indices in this <code>IndexBucket</code> are sorted","Whether the indices (all of them!) are currently sorted.","Returns a read-only iterator over the raw buckets.","Returns an iterator over the <code>ComponentBucket</code> in this table","Returns a read-only iterator over the raw index tables.","Return an iterator over the time ranges in this bucket.","","Queries the datastore for the internal row indices of the …","Returns <code>None</code> iff no row index could be found for the …","Returns <code>None</code> iff no row index could be found for the …","Returns <code>None</code> iff no row index could be found for the …","Lookup the arrow <code>DataType</code> of a <code>Component</code>","","","","","","","","","","","","","","","","","","","","","","","","","Maps <code>MsgId</code>s to some metadata (just timepoints at the …","Returns the name of the component stored in this bucket.","Name of the underlying component, for debugging purposes.","Name of the underlying component.","The component’s name, for debugging purposes.","","Returns a Vec each of (name, array) for each index in the …","See <code>Self::cluster_key</code> for more information about the …","","","","Creates a new timeless component table for the specified …","Creates a new component table for the specified component …","Creates a new component bucket for the specified component …","The number of rows in the table: all indices should always …","The oldest time for which we have any data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pushes <code>rows_single</code> to the end of the bucket, returning the …","Finds the appropriate bucket in this component table and …","Pushes <code>rows_single</code> to the end of the bucket, returning the …","Monotonically increasing ID for queries.","Iterates the datastore in order to return the internal row …","Returns an empty iterator if no data could be found for …","Returns an empty iterator if no data could be found for …","Returns an empty iterator if no data could be found for …","Returns an iterator that is guaranteed to yield at least …","Returns an iterator that is guaranteed to yield at least …","Returns an iterator that is guaranteed to yield at least …","The offset of this bucket in the global table.","Runs the sanity check suite for the entire datastore.","Runs the sanity check suite for the entire table.","Runs the sanity check suite for the entire table.","Runs the sanity check suite for the entire bucket.","Runs the sanity check suite for the entire table.","Runs the sanity check suite for the entire table.","Runs the sanity check suite for the entire table.","","","","","","","","","","","","","","","","","","","","","","","","","","Sort all unsorted indices in the store.","Sort all unsorted index buckets in this table.","Sort all component indices by time, provided that’s not …","Splits the bucket into two, potentially uneven parts.","If enabled, will store the ID of the write request …","The time range covered by the primary time index.","The time ranges (plural!) covered by this bucket. Buckets …","Dedicated component tables for timeless data. Never …","Dedicated index tables for timeless data. Never garbage …","The timeline this table operates in, for debugging …","The timeline the bucket’s parent table operates in, for …","Returns an (name, <code>Int64Array</code>) with a logical type matching …","","Dumps the entire datastore as a flat, denormalized …","Dumps the entire table as a flat, denormalized dataframe.","Dumps the entire bucket as a flat, denormalized dataframe.","","","","","","","","","","","","","","Returns the number of buckets stored across this entire …","Returns the number of buckets stored across this entire …","Returns the number of rows stored across this table.","Returns the number of rows stored across this entire …","Returns the number of rows stored across this bucket.","Returns the number of rows stored across this table.","Returns the number of rows stored across this entire …","Returns the number of rows stored across this bucket.","The total number of rows present in this bucket, across …","The total number of rows present in this bucket, across …","Returns the size of the data stored across this table, in …","Returns the size of data stored across this entire table, …","Returns the size of the data stored across this bucket, in …","Returns the size of the data stored across this table, in …","Returns the size of data stored across this entire table, …","Returns the size of the data stored across this bucket, in …","The size of this bucket in bytes, across all chunks.","The size of this bucket in bytes, across all chunks.","Returns the number of temporal component buckets stored …","Returns the number of temporal component rows stored …","Returns the size of the temporal component data stored …","Returns the number of temporal index buckets stored across …","Returns the number of temporal index rows stored across …","Returns the size of the temporal index data stored across …","Returns the number of timeless component rows stored …","Returns the size of the timeless component data stored …","Returns the number of timeless index rows stored across …","Returns the size of the timeless index data stored across …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to drop <em>at least</em> the given percentage.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Sorts the columns of the given dataframe according to the …","A query a given time, for a given timeline.","A query over a time range, for a given timeline.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Finds an optimal split point for the given time index, or …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Given a time index and a desired split index, splits off …","","","","","","","","","","","","",""],"i":[0,0,0,0,39,0,0,0,0,57,0,57,57,57,57,0,0,0,57,0,0,24,0,0,0,24,0,0,0,30,0,13,30,61,12,12,30,35,26,26,12,12,56,26,30,12,61,26,26,12,35,12,61,61,12,0,12,15,0,0,26,0,0,0,0,12,12,30,35,13,15,56,56,56,56,56,56,56,56,56,56,56,56,56,56,62,62,62,62,0,61,61,61,61,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,21,0,0,0,0,0,24,0,24,24,21,25,26,12,34,30,20,20,21,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,30,37,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,36,20,12,24,21,25,26,24,21,25,26,12,12,12,34,30,35,24,21,25,26,26,12,12,20,36,37,26,28,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,26,20,34,30,30,24,21,25,24,24,21,21,25,25,30,30,12,24,21,21,25,25,26,34,34,30,30,35,35,28,36,36,37,37,20,20,35,12,24,21,25,26,34,30,35,28,36,37,20,21,12,12,12,12,36,37,20,12,12,26,26,12,34,35,28,12,24,21,25,26,34,30,35,28,36,37,20,12,34,30,35,12,12,12,12,12,24,21,25,26,34,30,35,28,36,37,20,35,28,30,37,12,20,21,12,34,30,35,12,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,20,36,37,20,34,35,12,34,30,35,36,37,20,34,12,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,24,21,25,36,37,20,12,12,34,30,35,30,30,30,20,12,34,30,35,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,28,12,30,35,35,26,28,20,12,12,30,35,35,28,12,34,35,24,21,25,26,12,21,25,34,30,35,36,37,20,30,37,34,30,35,36,37,20,36,20,34,30,35,36,37,20,36,20,12,12,12,12,12,12,12,12,12,12,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,12,24,21,25,26,34,30,35,28,36,37,20,39,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,0,0,13,15,13,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,13,15,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,0,0,57,57,57,57,57,57,57,57,57,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,57,57,57,57,57,57,57,57,57,62,62,62,62],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,[3,3],0,0,0,0,0,[[],4],[[],[[5,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[3,3],[[],4],[[],[[5,[4]]]],0,0,[[],[[7,[6]]]],[[6,8],[[9,[6]]]],[[8,10,11],[[7,[6]]]],[[12,13,14,8],[[7,[6]]]],[[12,13,14,10],[[7,[6]]]],[[12,15,14,8,10],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16],[16],[16],[16],[[12,17,14],[[19,[[18,[8]]]]]],0,0,[20],0,[21,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,[[12,23]],[24,24],[21,21],[25,25],[26,26],[[]],[[]],[[]],[[]],0,[12,8],0,0,0,0,[[24,24],27],[[21,21],27],[[25,25],27],0,0,0,0,[20,[[18,[[2,[1]]]]]],0,0,[[],26],[[],28],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],0,[[20,17,29],4],0,0,[30,14],[[24,24],4],[[21,21],4],[[25,25],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[30,31]],[[30,31]],[[12,32],33],[[24,32],33],[[21,32],33],[[21,32],33],[[25,32],33],[[25,32],33],[[26,32],33],[[34,32],33],[[34,32],33],[[30,32],33],[[30,32],33],[[35,32],33],[[35,32],33],[[28,32],33],[[36,32],33],[[36,32],33],[[37,32],33],[[37,32],33],[[20,32],33],[[20,32],33],[35,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[24,22],21],[[12,39,17,8],[[18,[[2,[1]]]]]],[[12,17,8,40],[[18,[[2,[1]]]]]],0,[12],[[36,21],[[2,[1]]]],[[37,21],[[19,[[2,[1]]]]]],[[20,21],[[19,[[2,[1]]]]]],[[12,41],[[19,[42]]]],[[12,3,[19,[3]],42],43],0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[12,44],43],[[34,45],5],[[30,26,31,45],5],[[35,31,45],5],0,[[],8],[[12,42,3,[19,[3]],45],43],[[12,3,[19,[3]],45],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,4],0,[30,46],[37,46],[12,46],[20,11],[21,24],[[12,13,14,8],19],[[34,8],19],[[30,31,8],19],[[35,31,8],19],[[12,8],[[19,[47]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[20,48],0,0,0,[34],[35],[[8,26],12],[[8,14],34],[[8,17,14],30],[[8,17],35],[[8,47],36],[[8,47],37],[[8,47,22],20],0,[12,[[49,[17,31]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[24,24],[[19,[27]]]],[[21,21],[[19,[27]]]],[[25,25],[[19,[27]]]],[[36,1],21],[[37,26,42,1],21],[[20,42,1],22],0,[[12,15,14],11],[34,11],[[30,50],11],[[35,50],11],[[30,[51,[31]]],11],[[30,[51,[31]]],11],[[30,[51,[31]]],11],0,[12,5],[34,5],[30,5],[35,5],[36,5],[37,5],[20,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28],[12],[30],[35],[35,19],0,0,0,0,0,0,0,[35],0,[12,6],[[34,12,26],6],[[35,12,26],6],[[]],[[]],[[]],[[]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[30,22],[37,22],[34,22],[30,22],[35,22],[36,22],[37,22],[20,22],0,0,[34,22],[30,22],[35,22],[36,22],[37,22],[20,22],0,0,[12,22],[12,22],[12,22],[12,22],[12,22],[12,22],[12,22],[12,22],[12,22],[12,22],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],52],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[],53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[16],[[]],[[]],[[]],[[]],[[],19],[[],19],[39,39],[[]],[3],[3],[3],[[39,32],33],[[39,32],33],[[]],[[],3],[[]],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[],38],[[],52],[[],52],[[],53],[[]],[[]],[[]],[[]],[[]],[[12,3,47,8],54],[[12,8],[[19,[47]]]],[[3,45],[[19,[54]]]],[[48,1,3],54],[[6,4,55],6],0,0,[16],[16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[13,13],[15,15],[[]],[[]],[3],[3],[3],[3],[3],[3],[[13,32],33],[[15,32],33],[[]],[[]],[[],3],[[],3],[[]],[[]],[[],19],[[],19],[[]],[[]],[[17,31],13],[[17,50],15],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],52],[[],52],[[],52],[[],52],[[],53],[[],53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],19],[[],19],0,[[],56],[3],[3],[3],[[56,32],33],[[]],[12,56],[[],3],[[]],[[],19],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],52],[[],52],[[],53],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],19],[[],19],[3],[3],[3],[18,[[19,[3]]]],[[57,32],33],[[57,32],33],[[]],[58,57],[[],3],[[]],[[],19],[[]],[[]],[[]],[59],[[]],[[]],[57,[[19,[60]]]],[[3,18,50],50],[[],38],[[],52],[[],52],[[],53],[[]],[[]],[[]],[[]],[[]],0,0,0,0],"p":[[8,"Array"],[3,"Box"],[15,"usize"],[15,"bool"],[6,"Result"],[3,"DataFrame"],[6,"SharedResult"],[3,"ComponentName"],[6,"PolarsResult"],[4,"JoinType"],[8,"Iterator"],[3,"DataStore"],[3,"LatestAtQuery"],[3,"EntityPath"],[3,"RangeQuery"],[3,"Private"],[3,"Timeline"],[3,"Vec"],[4,"Option"],[3,"ComponentBucket"],[3,"RowIndex"],[15,"u64"],[6,"HashSet"],[4,"RowIndexKind"],[3,"IndexRowNr"],[3,"DataStoreConfig"],[4,"Ordering"],[3,"IndexBucketIndices"],[3,"HashMap"],[3,"IndexTable"],[3,"TimeInt"],[3,"Formatter"],[6,"Result"],[3,"PersistentIndexTable"],[3,"IndexBucket"],[3,"PersistentComponentTable"],[3,"ComponentTable"],[3,"String"],[4,"GarbageCollectionTarget"],[15,"f64"],[3,"MsgId"],[3,"TimePoint"],[6,"WriteResult"],[3,"MsgBundle"],[6,"IntMap"],[8,"ExactSizeIterator"],[4,"DataType"],[15,"str"],[3,"BTreeMap"],[3,"TimeRange"],[8,"RangeBounds"],[4,"Result"],[3,"TypeId"],[3,"Series"],[3,"BTreeSet"],[3,"DataStoreStats"],[4,"WriteError"],[3,"Error"],[3,"Demand"],[8,"Error"],[8,"ArrayExt"],[13,"MismatchedInstances"]]},\
"re_build_build_info":{"doc":"This crate is to be used from <code>build.rs</code> build scripts.","t":[5,5,5,5,5,5,5],"n":["export_env_vars","git_branch","git_hash","git_path","run_command","rust_version","set_env"],"q":["re_build_build_info","","","","","",""],"d":["Call from the <code>build.rs</code> file of any crate you want to …","","","From https://git-scm.com/docs/git-rev-parse:","","Returns <code>(rustc, LLVM)</code> versions.",""],"i":[0,0,0,0,0,0,0],"f":[[[]],[[],[[2,[1]]]],[[],[[2,[1]]]],[3,[[2,[1]]]],[3,[[2,[1]]]],[[],2],[[3,3]]],"p":[[3,"String"],[6,"Result"],[15,"str"]]},\
"re_build_info":{"doc":"Information about the build of a Rust crate.","t":[3,3,12,0,14,12,0,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,12,12,11,11,11,12,12,11,11,12,12,12,12,11,11,11,11,11,12,3,17,17,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11],"n":["BuildInfo","CrateVersion","alpha","build_info","build_info","crate_name","crate_version","datetime","git_branch","git_hash","is_in_rerun_workspace","llvm_version","major","minor","patch","rustc_version","target_triple","version","BuildInfo","borrow","borrow_mut","clone","clone_into","crate_name","datetime","fmt","fmt","from","git_branch","git_hash","git_hash_or_tag","into","is_in_rerun_workspace","llvm_version","rustc_version","target_triple","to_owned","to_string","try_from","try_into","type_id","version","CrateVersion","IS_ALPHA_BIT","MAX_NUM","alpha","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from_bytes","into","is_compatible_with","major","minor","new","parse","patch","to_bytes","to_owned","to_string","try_from","try_into","type_id"],"q":["re_build_info","","","","","","","","","","","","","","","","","","re_build_info::build_info","","","","","","","","","","","","","","","","","","","","","","","","re_build_info::crate_version","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Information about the build of a Rust crate.","The version of a Rerun crate.","","","Create a <code>BuildInfo</code> at compile-time using environment …","<code>CARGO_PKG_NAME</code>","","ISO 8601 / RFC 3339 build time.","Current git branch, or empty string.","Git commit hash, or empty string.","True if we are building within the rerun repository …","The raw version string of the LLVM toolchain used, or an …","","","","The raw version string of the Rust compiler used, or an …","Target architecture and OS","Crate version, parsed from <code>CARGO_PKG_VERSION</code>, ignoring any …","Information about the build of a Rust crate.","","","","","<code>CARGO_PKG_NAME</code>","ISO 8601 / RFC 3339 build time.","","","Returns the argument unchanged.","Current git branch, or empty string.","Git commit hash, or empty string.","","Calls <code>U::from(self)</code>.","True if we are building within the rerun repository …","The raw version string of the LLVM toolchain used, or an …","The raw version string of the Rust compiler used, or an …","Target architecture and OS","","","","","","Crate version, parsed from <code>CARGO_PKG_VERSION</code>, ignoring any …","The version of a Rerun crate.","","We disallow version numbers larger than this in order to …","","","","","","","","","Returns the argument unchanged.","From a compact 32-bit representation crated with …","Calls <code>U::from(self)</code>.","","","","","Parse a semver version string, ignoring any trailing …","","A compact 32-bit representation. See also <code>Self::from_bytes</code>.","","","","",""],"i":[0,0,7,0,0,1,0,1,1,1,1,1,7,7,7,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],0,0,[[1,2],3],[[1,2],3],[[]],0,0,[1,4],[[]],0,0,0,0,[[]],[[],4],[[],5],[[],5],[[],6],0,0,0,0,0,[[]],[[]],[7,7],[[]],[[7,7],8],[[7,2],3],[[7,2],3],[[]],[[],7],[[]],[[7,7],8],0,0,[[9,9,9],7],[10,7],0,[7],[[]],[[],4],[[],5],[[],5],[[],6]],"p":[[3,"BuildInfo"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"CrateVersion"],[15,"bool"],[15,"u8"],[15,"str"]]},\
"re_build_web_viewer":{"doc":"Build the Rerun web-viewer .wasm and generate the .js …","t":[5,5],"n":["build","target_directory"],"q":["re_build_web_viewer",""],"d":["Build <code>re_viewer</code> as Wasm, generate .js bindings for it, and …",""],"i":[0,0],"f":[[1],[[],2]],"p":[[15,"bool"],[3,"Utf8PathBuf"]]},\
"re_data_store":{"doc":"This is how we store and index logging data.","t":[13,18,3,18,4,3,4,4,4,13,3,3,13,13,2,18,18,13,13,13,13,6,13,13,3,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,4,3,3,3,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Auto","BEGINNING","ComponentName","EVERYTHING","EditableAutoValue","EntityPath","EntityPathPart","Error","Index","Index","InstancePath","InstancePathHash","Integer","LatestAt","LogDb","MAX","MIN","MsgBundleError","Name","Pixel","Range","Result","Sequence","String","TimeInt","TimeQuery","Timeline","UserEdited","Uuid","WriteError","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","abs","add","add","add_assign","as_f32","as_f64","as_i64","as_ref","as_slice","as_str","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","editable_auto_value","entity_path","entity_path_hash","entity_properties","entity_tree","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_time_range","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_milliseconds","from_nanos","from_seconds","from_sequence","full_name","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash64","init","init","init","init","init","init","init","init","instance_key","instance_key","instance_path","into","into","into","into","into","into","into","into","is_child_of","is_descendant_of","is_root","is_timeless","iter","join","last","len","log_db","log_time","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","name","neg","new","new","new","new_sequence","new_temporal","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","provide","root","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","serialize","serialize","short_name","source","sub","sub","sub_assign","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Auto","EditableAutoValue","UserEdited","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","fmt","from","get","init","into","is_auto","lossless_try_into","lossy_into","or","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","ColorMap","ColorMap","ColorMapper","EntityProperties","EntityPropertyMap","ExtraQueryHistory","Grayscale","Inferno","Magma","Plasma","Turbo","Viridis","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","az","az","az","az","az","backproject_depth","backproject_pinhole_ent_path","backproject_radius_scale","backproject_scale","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","color_mapper","color_mapping","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get","init","init","init","init","init","interactive","into","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","nanos","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pinhole_image_plane_distance","props","query_latest_single","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sequences","serialize","serialize","serialize","serialize","serialize","set","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","visible","visible_history","vzip","vzip","vzip","vzip","vzip","with_child","with_child","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ComponentStats","EntityTree","TimeHistogram","TimeHistogramPerTimeline","TimesPerTimeline","add","add_data_msg","add_path_op","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","children","components","create_subtrees_recursively","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","get","get","has_timeline","has_timeline","init","init","init","init","insert","into","into","into","into","is_leaf","iter","iter","iter_mut","iter_mut","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","new","nonrecursive_clears","num_children_and_fields","num_timeless_messages","num_timeless_messages","num_timeless_messages","num_timeless_messages","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","path","prefix_times","purge","purge","purge","recursive_clears","root","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","subtree","timelines","timelines","times","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","visit_children_recursively","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","InstancePath","InstancePathHash","NONE","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","cmp","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","entity_path","entity_path_hash","entity_splat","entity_splat","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","get_hash","hash","hash","hash","init","init","instance","instance","instance_key","instance_key","into","into","is_none","is_some","is_splat","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","resolve","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","EntityDb","LogDb","add","add_begin_recording_msg","add_path_op","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","chronological_log_messages","chronological_message_ids","data_source","data_store","default","default","deref","deref","deref_mut","deref_mut","drop","drop","entity_db","entity_path_from_hash","entity_path_from_hash","from","from","get_log_msg","init","init","into","into","is_empty","len","log_messages","lossless_try_into","lossless_try_into","lossy_into","lossy_into","num_timeless_messages","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","purge","purge_fraction_of_ram","recording_id","recording_info","recording_info","register_entity_path","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","timeless_message_ids","timelines","times_per_timeline","times_per_timeline","tree","try_add_arrow_data_msg","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from"],"q":["re_data_storere_data_store::editable_auto_value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_data_store::entity_propertiesre_data_store::entity_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_data_store::instance_path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_data_store::log_db","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The value is determined automatically.","The beginning of time.","The name of an entity component, e.g. <code>pos</code> or <code>color</code>.","","A value that is either determined automatically by some …","<code>camera / &quot;left&quot; / points / #42</code>","The different parts that make up an <code>EntityPath</code>.","The errors that can occur when misusing the data store.","The key of a table.","Array/table/map member. Each member must be of the same …","The path to either a specific instance of an entity, or …","Hashes of the components of an <code>InstancePath</code>.","Any integer, e.g. a hash or an arbitrary identifier.","Get the latest version of the data available at this time.","","","","","Struct member. Each member can have a different type.","X,Y pixel coordinates, from top left.","Get all the data within this time interval, plus the latest","","For arrays, assumed to be dense (0, 1, 2, …).","Anything goes.","A 64-bit number describing either nanoseconds OR sequence …","A query in time.","A time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …","The user explicitly specified what they wanted","UUID/GUID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a formatted string of <code>time_range</code> on this <code>Timeline</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","For time timelines.","For time timelines.","For time timelines.","For sequence timelines.","Includes namespace, e.g. <code>rerun.color</code> or <code>ext.confidence</code>.","","","","","","","","","","Precomputed hash of the string.","","","","","","","Precomputed 64-bit hash.","","","","","","","","","If this is a concrete instance, what instance index are we?","If this is a concrete instance, what instance index are we?","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this a direct child of the other path.","Is this a strict descendant of the given path.","","","","","","Number of parts","","The log time timeline to which all API functions will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>None</code> if root.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Excludes the rerun namespace, so you’ll get <code>color</code> but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value is determined automatically.","A value that is either determined automatically by some …","The user explicitly specified what they wanted","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Gets the value, disregarding if it was user edited or …","","Calls <code>U::from(self)</code>.","","","","Returns other if self is auto, self otherwise.","","","","","","","","","","","","","","","","Use a well-known color map, pre-implemented as a wgsl …","","","Properties for a collection of entities.","When showing an entity in the history view, add this much …","","","","","","","","","","","","","","","","","Should the depth texture be backprojected into a point …","Entity path of the pinhole transform used for the …","Used to scale the radii of the points in the resulting …","Used to scale the resulting point cloud.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","What kind of color mapping should be applied (none, map, …","Enable color mapping?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Zero = off.","","","","","","","","","","","Distance of the projection plane (frustum far plane).","","Get the latest value for a given …","","","","","","","","","","","Zero = off.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiply/and these together.","Multiply/and these together.","","","","","","","","","","","","Tree of entity paths, plus components at the leaves.","Number of messages per time","Number of messages per time per timeline","Number of messages per time per timeline","","Returns a collection of pending clear operations","Add a path operation into the the entity tree.","","","","","","","","","","","","","","","","","","","","","","","","","","Data logged at this entity path.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Has no child entities.","","","","","","","","","","","","","","Book-keeping around whether we should clear fields when …","","","","Extra book-keeping used to seed any timelines that include …","Extra book-keeping used to seed any timelines that include …","","","","","","","","","Full path to the root of this tree.","When do we or a child have data?","Purge all times before the cutoff, or in the given set","","","Book-keeping around whether we should clear recursively …","","","","","","","","","","","","","When do we have data? Ignored timeless.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The path to either a specific instance of an entity, or …","Hashes of the components of an <code>InstancePath</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Indicate the whole entity (all instances of it) - i.e. a …","Indicate the whole entity (all instances of it) - i.e. a …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Indicate a specific instance of the entity, e.g. a …","Indicate a specific instance of the entity, e.g. a …","If this is a concrete instance, what instance index are we?","If this is a concrete instance, what instance index are we?","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Do we refer to the whole entity (all instances of it)?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stored entities with easy indexing of the paths.","A in-memory database built from a stream of <code>LogMsg</code>es.","","","","","","","","","","","","","","","","In the order they arrived","Messages in the order they arrived","Set by whomever created this <code>LogDb</code>.","Stores all components for all entities for all timelines.","","","","","","","","","Where we store the entities.","","In many places we just store the hashes, so we need a way …","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Free up some RAM by forgetting the older parts of all …","","","Comes in a special message, <code>LogMsg::BeginRecordingMsg</code>.","","","","","","Data that was logged with <code>TimePoint::timeless</code>. We need to …","","","Used for time control","A tree-view (split on path components) of the entities.","","","","","","","","","","","","","","","","",""],"i":[44,2,0,12,0,0,0,0,0,14,0,0,13,12,0,2,2,20,14,13,12,0,13,13,0,0,0,44,13,20,12,13,7,9,14,2,15,2,2,2,2,2,2,2,7,9,7,20,12,13,7,9,14,2,15,20,12,13,7,7,9,14,2,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,12,13,7,9,14,2,15,12,13,7,9,14,2,15,13,7,9,14,2,15,15,20,12,13,7,7,9,14,2,15,20,12,13,7,9,14,2,15,13,7,9,14,2,15,20,12,13,7,9,14,2,15,0,66,67,0,0,13,7,7,9,14,2,2,15,13,13,7,7,9,9,14,14,2,2,15,15,20,20,12,13,13,7,7,9,9,14,14,2,15,15,20,20,20,12,13,13,13,7,7,7,9,9,9,9,9,9,14,14,14,14,2,2,2,2,15,9,2,2,2,2,7,13,7,9,14,2,15,13,13,7,7,9,9,14,2,15,9,9,20,12,13,7,9,14,2,15,66,67,0,20,12,13,7,9,14,2,15,9,9,9,2,9,9,9,9,0,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,15,15,2,7,9,15,15,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,9,13,7,9,14,2,2,15,9,20,9,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,13,7,9,14,2,15,7,20,2,2,2,2,12,13,7,9,14,2,15,20,13,7,9,14,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,15,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,20,12,13,7,9,14,2,15,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,49,0,0,0,0,48,48,48,48,48,48,45,46,47,48,49,45,46,47,48,49,46,46,46,46,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,46,46,45,46,47,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,46,47,48,49,47,47,48,48,49,49,46,47,48,48,49,49,45,46,47,48,49,45,45,46,47,48,49,46,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,47,45,46,47,48,49,45,46,47,48,49,46,45,0,45,46,47,48,49,45,46,47,48,49,47,45,46,47,48,49,45,45,46,47,48,49,48,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,46,46,45,46,47,48,49,46,47,45,46,47,48,49,45,46,47,48,49,0,0,0,0,0,53,55,55,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,55,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,59,60,59,60,55,59,60,53,60,55,59,60,53,55,59,60,59,60,55,59,60,53,55,59,60,53,55,55,55,55,53,55,53,55,59,60,53,55,59,60,53,55,55,55,60,53,55,55,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,59,60,53,55,55,59,60,53,55,59,60,53,55,59,60,53,0,0,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,66,67,66,67,66,67,66,67,66,66,67,67,66,66,67,66,67,66,67,66,66,67,66,67,66,67,66,67,66,67,67,67,66,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,66,67,66,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,0,0,69,69,50,50,69,50,69,50,69,50,69,50,69,50,69,69,69,69,50,50,69,50,69,50,69,50,69,69,50,50,50,69,69,50,69,50,69,69,69,69,50,69,50,69,69,50,69,50,69,50,69,69,69,69,50,50,69,50,69,69,69,69,50,50,50,50,69,50,69,50,69,50,69,50,69,50,69,50,69,50,69],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[2,2],[[2,2]],[[2,3]],[[2,2]],[2,4],[2,5],[2,6],[7,8],[9],[7,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[[12,[11]]],[[12,[11]]]],[13,13],[7,7],[9,9],[14,14],[2,2],[15,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,13],16],[[7,7],16],[[9,9],16],[[14,14],16],[[2,2],16],[[15,15],16],[[],15],[17],[17],[17],[7,8],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[[],[[18,[13]]]],[[],[[18,[7]]]],[[],[[18,[9]]]],[[],[[18,[14]]]],[[],[[18,[2]]]],[[],[[18,[15]]]],[17],[17],[17],[17],[17],[17],[17],[17],0,0,0,0,0,[[13,13],19],[[7,7],19],[[7,8],19],[[9,9],19],[[14,14],19],[[2,2],19],[[2,3],19],[[15,15],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[20,21],22],[[20,21],22],[[[12,[23]],21],22],[[13,21],[[18,[24]]]],[[13,21],[[18,[24]]]],[[7,21],[[18,[24]]]],[[7,21],[[18,[24]]]],[[9,21],[[18,[24]]]],[[9,21],[[18,[24]]]],[[14,21],[[18,[24]]]],[[14,21],[[18,[24]]]],[[2,21],[[18,[24]]]],[[15,21],[[18,[24]]]],[[15,25],26],[27,20],[[]],[28,20],[[]],[26,13],[8,13],[[]],[[]],[26,7],[8,7],[[]],[8,9],[26,9],[[[30,[14,29]]],9],[31,9],[[],9],[13,14],[[]],[26,14],[8,14],[6,2],[32,2],[[]],[33,2],[[]],[[],9],[6,2],[6,2],[6,2],[6,2],[7,8],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[13,35],[13],[7],[7,34],[9,36],[9],[14],[2],[15],0,[9,34],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],19],[[9,9],19],[9,19],[2,19],[9,37],[[9,9],9],[9,[[10,[14]]]],[9,17],0,[[],15],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,38],0,[2],[8,7],[[[30,[14,29]]],9],[[[39,[38]],40],15],[[[39,[38]]],15],[[[39,[38]]],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,[[10,[9]]]],[[13,13],[[10,[16]]]],[[7,7],[[10,[16]]]],[[9,9],[[10,[16]]]],[[14,14],[[10,[16]]]],[[2,2],[[10,[16]]]],[[2,3],[[10,[16]]]],[[15,15],[[10,[16]]]],0,[41],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,18],[7,18],[9,18],[14,18],[2,18],[15,18],[7,8],[20,[[10,[42]]]],[[2,2]],[[2,3]],[[2,2]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],26],[[],26],[[],26],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[15,40],0,[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1],[[]],[[]],[[]],[[]],[[],10],[[],10],[44,44],[[]],[[],44],[17],[17],[[],[[18,[44]]]],[17],[[44,44],19],[[],19],[[],19],[[44,21],22],[[]],[44],[[],17],[[]],[44,19],[[],10],[[]],[[44,44],44],[[]],[[]],[[]],[[]],[44,18],[[]],[[],18],[[],18],[[],43],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[45,45],[46,46],[47,47],[48,48],[49,49],[[]],[[]],[[]],[[]],[[]],0,0,[[],45],[[],46],[[],47],[[],49],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[[],[[18,[45]]]],[[],[[18,[46]]]],[[],[[18,[47]]]],[[],[[18,[48]]]],[[],[[18,[49]]]],[17],[17],[17],[17],[17],[[46,46],19],[[47,47],19],[[48,48],19],[[49,49],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[46,21],22],[[47,21],22],[[48,21],22],[[48,21],22],[[49,21],22],[[49,21],22],[[]],[[]],[[]],[[]],[[]],[[45,9],46],[[],17],[[],17],[[],17],[[],17],[[],17],0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[50,9,51],[[10,[52]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[45,18],[46,18],[47,18],[48,18],[49,18],[[45,9,46]],[[]],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],43],[[],43],[[],43],[[],43],[[],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[46,46],46],[[47,47],47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[53,54]],[[55,54,56],30],[[55,57,54,58],[[30,[56]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,[[55,17,54],55],[[],59],[[],60],[[],53],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[17],[[]],[[]],[[]],[[]],[[59,15],[[10,[61]]]],[[60,15],[[10,[62]]]],[[59,15],19],[[60,15],19],[[],17],[[],17],[[],17],[[],17],[[60,15,2]],[[]],[[]],[[]],[[]],[55,19],[59,63],[60,63],[59,63],[60,63],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[9,[64,[57,54]]],55],0,[55,17],[55,17],[53,17],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[55,64,65]],[[60,64]],[[53,64]],0,[[],55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[55,9],[[10,[55]]]],[59,63],[60,63],0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],43],[[],43],[[],43],[[],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[66,66],[67,67],[[]],[[]],[[66,66],16],[[],67],[17],[17],[17],[17],[[],[[18,[66]]]],[17],[17],0,0,[9,66],[9,67],[[66,66],19],[[67,67],19],[[],19],[[],19],[[],19],[[],19],[[66,21],22],[[66,21],22],[[67,21],22],[[]],[[]],[[],34],[[],34],[66,67],[66],[67],[[],17],[[],17],[[9,68],66],[[9,68],67],0,0,[[]],[[]],[67,19],[67,19],[66,19],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[66,66],[[10,[16]]]],[[67,50],[[10,[66]]]],[[]],[[]],[[]],[[]],[66,18],[[]],[[]],[[],26],[[],18],[[],18],[[],18],[[],18],[[],43],[[],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[69,70],[[18,[20]]]],[[69,71]],[[50,57,54,58]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[69,37],0,0,0,[[],50],[[],69],[17],[17],[17],[17],[17],[17],0,[[50,36],[[10,[9]]]],0,[[]],[[]],[[69,57],[[10,[70]]]],[[],17],[[],17],[[]],[[]],[69,19],[69,17],0,[[],10],[[],10],[[]],[[]],[69,17],[[]],[[]],[[]],[[]],[[50,64,65]],[[69,4]],[69,72],[69,[[10,[73]]]],0,[[50,9]],[[]],[[]],[[]],[[]],0,[69,63],[69,60],0,0,[[50,74],[[18,[20]]]],[[],18],[[],18],[[],18],[[],18],[[],43],[[],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Private"],[3,"TimeInt"],[3,"TimeReal"],[15,"f32"],[15,"f64"],[15,"i64"],[3,"ComponentName"],[15,"str"],[3,"EntityPath"],[4,"Option"],[8,"Clone"],[4,"TimeQuery"],[4,"Index"],[4,"EntityPathPart"],[3,"Timeline"],[4,"Ordering"],[15,"usize"],[4,"Result"],[15,"bool"],[4,"Error"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Error"],[3,"TimeRange"],[3,"String"],[4,"MsgBundleError"],[4,"WriteError"],[3,"Global"],[3,"Vec"],[3,"EntityPathImpl"],[3,"Time"],[3,"Duration"],[15,"u64"],[3,"IndexHash"],[3,"EntityPathHash"],[8,"Iterator"],[3,"TimelineName"],[8,"Into"],[4,"TimeType"],[3,"Demand"],[8,"Error"],[3,"TypeId"],[4,"EditableAutoValue"],[3,"EntityPropertyMap"],[3,"EntityProperties"],[3,"ExtraQueryHistory"],[4,"ColorMap"],[4,"ColorMapper"],[3,"EntityDb"],[3,"LatestAtQuery"],[8,"DeserializableComponent"],[3,"ComponentStats"],[3,"TimePoint"],[3,"EntityTree"],[3,"ComponentPath"],[3,"MsgId"],[4,"PathOp"],[3,"TimeHistogramPerTimeline"],[3,"TimesPerTimeline"],[6,"TimeHistogram"],[3,"BTreeSet"],[8,"ExactSizeIterator"],[3,"BTreeMap"],[6,"HashSet"],[3,"InstancePath"],[3,"InstancePathHash"],[3,"InstanceKey"],[3,"LogDb"],[4,"LogMsg"],[3,"BeginRecordingMsg"],[3,"RecordingId"],[3,"RecordingInfo"],[3,"ArrowMsg"]]},\
"re_error":{"doc":"Helpers for error handling.","t":[5],"n":["format"],"q":["re_error"],"d":["Format an error, including its chain of sources."],"i":[0],"f":[[[[2,[1]]],3]],"p":[[8,"Error"],[8,"AsRef"],[3,"String"]]},\
"re_format":{"doc":"Miscellaneous tools to format and parse numbers, …","t":[0,5,5,5,5,5,5,5,5,5,3,3,3,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["arrow","format_bytes","format_f32","format_f64","format_large_number","format_number","parse_bytes","parse_bytes_base10","parse_bytes_base2","parse_duration","DisplayDataType","DisplayIntervalUnit","DisplayTimeUnit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","format_table","from","from","from","into","into","into","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["re_format","","","","","","","","","","re_format::arrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Formatting for tables of Arrow arrays","Pretty format a number of bytes by using SI notation …","Format a number with a decent number of decimals.","Format a number with a decent number of decimals.","Pretty format a large number by using SI notation (base …","Pretty format a number by using thousands separators for …","","","","","","","","","","","","","","","","","Format <code>columns</code> into a <code>Table</code> using <code>names</code> as headers.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,9,12,13,9,12,13,9,12,13,0,9,12,13,9,12,13,9,12,13,9,12,13,9,12,13,9,12,13],"f":[0,[1,2],[3,2],[1,2],[1,2],[4,2],[5,[[7,[6]]]],[5,[[7,[6]]]],[5,[[7,[6]]]],[5,[[8,[3,2]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[9,10],11],[[12,10],11],[[13,10],11],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],15],[[],15],[[],15]],"p":[[15,"f64"],[3,"String"],[15,"f32"],[15,"usize"],[15,"str"],[15,"i64"],[4,"Option"],[4,"Result"],[3,"DisplayTimeUnit"],[3,"Formatter"],[6,"Result"],[3,"DisplayIntervalUnit"],[3,"DisplayDataType"],[3,"Table"],[3,"TypeId"]]},\
"re_int_histogram":{"doc":"A histogram with <code>i64</code> keys and <code>u32</code> counts, supporting both …","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,12,12,12,12,11,11,12,11,11,11,11,0,11,11,11,11,11,11,5,17,3,13,3,13,3,3,6,17,17,17,17,4,3,17,3,13,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,5,11,11,11,11,11,12,0,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17],"n":["Int64Histogram","Iter","RangeI64","RangeU64","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","contains","contains_all_of","eq","eq","fmt","fmt","from","from","i64_key_from_u64_key","intersects","into","into","iter","max","max","min","min","new","new","root","single","single","to_owned","to_owned","tree","try_from","try_from","try_into","try_into","type_id","type_id","u64_key_from_i64_key","ADDR_MASK","BranchNode","BranchNode","DenseLeaf","DenseLeaf","Int64Histogram","Iter","Level","MAX_SPARSE_LEAF_LEN","NUM_CHILDREN_IN_NODE","NUM_NODE_STEPS","NUM_STEPS_IN_DENSE_LEAF","Node","NodeIterator","ROOT_LEVEL","SparseLeaf","SparseLeaf","TreeIterator","abs_addr","addrs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_level_and_size","children","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","counts","counts","cutoff_size","default","default","default","default","fmt","fmt","fmt","fmt","fmt","for_level","from","from","from","from","from","from","from","from","increment","increment","increment","increment","increment","index","into","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","is_empty","iter","large_and_fast","level","max_key","max_key","max_key","max_key","max_key","min_key","min_key","min_key","min_key","min_key","next","next","node","overflow","range","range","range_count","range_count","range_count","range_count","range_count","range_u64_from_range_bounds","remove","remove","remove","remove","remove","root","small_and_slow","stack","to_owned","to_owned","to_owned","to_owned","to_owned","total_count","total_count","total_count","total_count","total_count","total_count","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BOTTOM_LEVEL","LEVEL_STEP","NUM_CHILDREN_IN_DENSE","BOTTOM_LEVEL","LEVEL_STEP","NUM_CHILDREN_IN_DENSE"],"q":["re_int_histogram","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_int_histogram::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_int_histogram::tree::large_and_fast","","","re_int_histogram::tree::small_and_slow","",""],"d":["A histogram, mapping <code>i64</code> key to a <code>u64</code> count optimizing for …","An iterator over an <code>Int64Histogram</code>.","An inclusive range.","An inclusive range.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","inclusive","inclusive","inclusive","inclusive","","","","","","","","The histogram is implemented as a tree.","","","","","","","We use <code>u64</code> keys in the internal structures, because it is …","","","An inner node, addressed by the next few bits of the …","","Optimization for dense histograms (entries at …","A histogram, mapping <code>i64</code> key to a <code>u64</code> count optimizing for …","An iterator over an <code>Int64Histogram</code>.","How high up in the tree we are (where root is highest). …","When a <code>SparseLeaf</code> goes over this, it becomes a <code>BranchNode</code>.","","","","","","","","A list of <code>(key, count)</code> pairs.","","","Two vectors of equal lengths, making up (addr, count) …","","","","","","","","","","","","","","","","","","The index is the next few bits of the key","","","","","","","","","","","","The last bits of the address, mapped to their counts","You can stop recursing when you’ve reached this size","","","","","","","","","","The default node for a certain level.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Increment the count for the given key.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Is the total count zero?","","","","","","","","Highest key with a non-zero count.","","","","","Lowest key with a non-zero count.","","","","","","","","","Iterate over a certain range, returning ranges that are at …","Only returns things in this range","What is the count of all the buckets in the given range?","","","","","","Remove all data in the given range.","Returns how much the total count decreased by.","Returns how much the total count decreased by.","Returns how much the total count decreased by.","Returns how much the total count decreased by.","","","","","","","","","Total count of all the buckets.","","","","","Very important optimization","","","","","","","","","","","","","","","","","","","","","","","","","The level used for <code>DenseLeaf</code>.","How many bits we progress in each <code>BranchNode</code>","Number of children in <code>DenseLeaf</code>.","The level used for <code>DenseLeaf</code>.","How many bits we progress in each <code>BranchNode</code>","Number of children in <code>DenseLeaf</code>."],"i":[0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,0,1,1,2,17,1,2,1,2,1,2,10,1,2,1,2,0,1,2,1,2,1,2,0,0,0,11,0,11,0,0,0,0,0,0,0,0,0,0,0,11,0,20,13,17,18,20,10,11,12,13,14,17,18,20,10,11,12,13,14,0,12,10,11,12,13,14,10,11,12,13,14,13,14,18,10,12,13,14,10,11,12,13,14,11,17,18,20,10,11,12,13,14,10,11,12,13,14,20,17,18,20,10,11,12,13,14,17,18,10,11,12,13,14,17,0,20,10,11,12,13,14,10,11,12,13,14,17,18,20,13,10,18,10,11,12,13,14,0,10,11,12,13,14,10,0,18,10,11,12,13,14,10,11,12,13,14,12,17,18,20,10,11,12,13,14,17,18,20,10,11,12,13,14,17,18,20,10,11,12,13,14,0,0,0,0,0,0],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,3],4],[[2,5],4],[[1,1],4],[[1,1],4],[[2,2],4],[[1,6],7],[[2,6],7],[[]],[[]],[3,5],[[1,1],4],[[]],[[]],0,0,0,0,0,[[3,3],1],[[5,5],2],0,[3,1],[5,2],[[]],[[]],0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[5,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],0,[10,10],[11,11],[12,12],[13,13],[14,14],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],10],[[],12],[[],13],[[],14],[[10,6],7],[[11,6],7],[[12,6],7],[[13,6],7],[[14,6],7],[3,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,5,15]],[[11,3,3,15]],[[12,3,3,15]],[[13,3,3,15],11],[[14,3,15]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,4],[11,4],[12,4],[13,4],[14,4],0,0,0,[10,[[16,[5]]]],[[11,3,3],[[16,[3]]]],[[12,3,3],[[16,[3]]]],[13,[[16,[3]]]],[[14,3],[[16,[3]]]],[10,[[16,[5]]]],[[11,3,3],[[16,[3]]]],[[12,3,3],[[16,[3]]]],[13,[[16,[3]]]],[[14,3],[[16,[3]]]],[17,16],[18,16],0,[[13,3],12],[[10,[19,[5]],3],17],0,[[10,[19,[5]]],3],[[11,3,3,1],3],[[12,3,3,1],3],[[13,1],3],[[14,3,1],3],[[[19,[5]]],1],[[10,[19,[5]]],3],[[11,3,3,1],3],[[12,3,3,1],3],[[13,1],3],[[14,3,1],3],0,0,0,[[]],[[]],[[]],[[]],[[]],[10,3],[11,3],[12,3],[13,3],[14,3],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0],"p":[[3,"RangeU64"],[3,"RangeI64"],[15,"u64"],[15,"bool"],[15,"i64"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"Int64Histogram"],[4,"Node"],[3,"BranchNode"],[3,"SparseLeaf"],[3,"DenseLeaf"],[15,"u32"],[4,"Option"],[3,"Iter"],[3,"TreeIterator"],[8,"RangeBounds"],[3,"NodeIterator"]]},\
"re_log":{"doc":"Text logging (nothing to do with rerun logging) for use in …","t":[14,14,14,14,14,14,0,5,5,14,14,14,14,5,5],"n":["debug","debug_once","error","error_once","info","info_once","setup","setup_native_logging","shorten_file_path","trace","trace_once","warn","warn_once","set_default_rust_log_env","setup_native_logging"],"q":["re_log","","","","","","","","","","","","","re_log::setup",""],"d":["Constructs an event at the debug level.","Logs a message once at the debug level.","Constructs an event at the error level.","Logs a message once at the error level.","Constructs an event at the info level.","Logs a message once at the info level.","Function to setup logging in binaries and web apps.","","Shorten a path to a Rust source file.","Constructs an event at the trace level.","Logs a message once at the trace level.","Constructs an event at the warn level.","Logs a message once at the warn level.","Set <code>RUST_LOG</code> environment variable to <code>info</code>, unless set, and …",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[[]],[1,1],0,0,0,0,[[]],[[]]],"p":[[15,"str"]]},\
"re_log_types":{"doc":"The different types that make up the rerun log format.","t":[2,3,3,3,2,13,3,4,3,13,3,13,13,18,3,13,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,4,4,4,3,3,13,13,4,3,13,13,13,3,6,13,3,3,3,4,3,13,13,13,13,13,4,8,4,3,3,2,3,3,3,2,3,3,4,13,13,13,13,13,13,13,13,13,13,13,2,18,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,2,2,0,0,11,11,11,11,11,11,11,11,11,11,0,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,12,14,0,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,0,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,12,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,12,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,2,2,3,13,13,13,3,2,3,13,3,13,13,3,13,13,13,3,3,3,4,3,13,13,13,13,13,13,13,3,13,3,3,3,3,3,4,4,3,3,13,13,3,13,3,3,3,3,13,3,13,4,6,3,13,3,3,3,3,4,4,4,3,3,4,8,3,4,13,13,13,13,13,13,13,13,13,3,3,3,2,13,13,13,13,13,13,12,12,12,0,0,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,12,11,11,5,10,12,11,11,12,11,11,11,11,11,11,10,10,12,12,0,11,11,11,11,11,11,11,10,10,5,0,0,12,0,11,11,11,11,11,11,11,11,11,11,0,10,12,0,12,12,12,0,12,11,11,12,10,12,12,11,11,11,11,11,11,11,11,11,11,0,12,11,0,0,0,12,12,11,11,11,11,11,11,11,11,11,11,0,12,10,12,0,12,10,11,0,12,0,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,4,13,13,18,18,18,13,18,18,18,13,13,13,4,3,13,3,4,13,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,3,3,3,3,12,13,12,13,13,4,3,3,4,3,3,3,13,3,3,3,3,12,13,13,12,13,3,3,3,4,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,3,3,12,13,12,13,12,13,12,13,12,13,12,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,12,13,18,18,18,12,13,13,12,13,12,13,12,13,12,13,12,13,12,13,13,12,13,3,3,3,3,13,13,3,3,3,4,4,3,3,4,3,3,3,3,3,3,4,8,13,12,13,12,13,12,13,12,13,12,13,13,13,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,11,11,10,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,12,10,11,11,11,11,11,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,18,3,3,3,3,12,13,3,3,3,12,13,3,3,4,3,3,12,13,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,3,3,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,2,6,2,4,8,4,2,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,4,3,4,3,13,13,13,13,13,13,13,11,11,11,11,11,11,12,12,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,12,4,3,13,13,13,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,2,2,2,2,17,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,4,3,13,18,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,17,17,8,3,8,17,13,13,13,3,4,13,13,13,6,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,11,11,11,11,11,11,13,3,3,13,13,3,3,3,4,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,0,12,0,11,0,12,0,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,0,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,5,11,11,11,11,11,12,3,18,18,18,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,4,3,3,17,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AnnotationContext","ApplicationId","Arrow3D","Arrow3D","ArrowMsg","ArrowMsg","BBox2D","BatchIndex","BeginRecordingMsg","BeginRecordingMsg","Box3","ClearComponents","ClearRecursive","DTYPE","Duration","Encoded","EncodedMesh3D","EntityPathOpMsg","EntityPathOpMsg","F16","F16","F32","F32","F64","F64","FullIndex","Glb","Gltf","Goodbye","I16","I16","I32","I32","I64","I64","I8","I8","Index","IndexHash","Integer","LogMsg","Mesh3D","MeshFormat","MeshId","MsgId","Obj","Other","PathOp","Pinhole","Pinhole","Pixel","PythonSdk","PythonVersion","Quaternion","Raw","RawMesh3D","RecordingId","RecordingInfo","RecordingSource","Rigid3","Rigid3","RustSdk","Sequence","SequentialIndex","String","TensorDataType","TensorDataTypeTrait","TensorElement","Time","TimeInt","TimePoint","TimeRange","TimeRangeF","TimeReal","TimeType","Timeline","TimelineName","Transform","U16","U16","U32","U32","U64","U64","U8","U8","Unknown","Unknown","Uuid","ViewCoordinates","ZERO","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","albedo_factor","application_id","arrow_msg","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","component_types","context","coordinates","data","datagen","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","encoding","entity_path","entity_path","entity_path_vec","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","external","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_uuid","get_hash","get_hash","half_size","hash","hash","hash","id","image_from_cam","impl_into_enum","index","indices","info","into","into","into","into","into","into","into","into","into","is_official_example","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","major","max","max","max","mesh_id","mesh_id","min","min","min","minor","msg_bundle","msg_id","msg_id","name","normals","origin","origin","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","patch","path","path_op","positions","random","recording_id","recording_source","resolution","rotation","rotation","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","started","suffix","time","time_point","time_point","time_range","time_real","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","transform","translation","translation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vector","vector","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","llvm_version","rustc_version","ArrowMsg","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","chunk","clone","clone_into","deserialize","eq","fmt","from","into","lossless_try_into","lossy_into","msg_id","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","schema","serialize","time_point","to_owned","try_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","AnnotationContext","AnnotationInfo","Arrow3D","BadSlice","BadTensorShape","BadValue","Box3D","ClassDescription","ClassId","ClassId","ColorRGBA","Depth","Encoded","EncodedMesh3D","F16NotSupported","F32","F64","FIELDS","FastFixedSizeArrayIter","FastFixedSizeListArray","FieldError","FixedSizeArrayField","Glb","Gltf","I16","I32","I64","I8","Image","InstanceKey","JPEG","KeypointId","Label","LineStrip2D","LineStrip3D","Mat3x3","Mesh3D","MeshFormat","MeshId","MsgId","NotContiguousStdOrder","Obj","Pinhole","Pinhole","Point2D","Point3D","Quaternion","Radius","Raw","RawMesh3D","ReadError","Rect2D","Result","Rigid3","Rigid3","Scalar","ScalarPlotProps","Size3D","Tensor","TensorCastError","TensorData","TensorDataMeaning","TensorDimension","TensorId","TensorImageError","TensorTrait","TextEntry","Transform","TypeMismatch","U16","U32","U64","U8","Unknown","Unknown","UnsupportedImageColorType","UnsupportedJpegColorType","Vec2D","Vec3D","Vec4D","ViewCoordinates","XCYCW2H2","XCYCWH","XYWH","XYXY","YXHW","YXYX","__private_field","albedo_factor","array","arrow","arrow_convert_shims","arrow_deserialize","arrow_serialize","az","az","az","az","az","bbox","body","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","class_id","color","context","coordinates","data","data_type","deref","do_not_call_into_iter","dtype","end","fmt","fmt","format","from","from","from","from","from","from","get","id","image_from_cam","indices","instance_key","into","into","into","into","into","into_iter","into_iter","is_shaped_like_an_image","is_vector","iter_registered_field_types","keypoint_id","label","level","linestrip","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","mat","meaning","meaning","mesh3d","mesh_id","mesh_id","meter","msg_id","name","new_array","next","normals","num_dim","offset","origin","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","point","positions","provide","quaternion","radius","rect","resolution","rotation","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scalar","scattered","shape","shape","size","size","size_in_bytes","source","tensor","tensor_id","text_entry","to_string","transform","transform","translation","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","values","vec","vector","vzip","vzip","vzip","vzip","vzip","w","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x","x","x","y","y","y","y","y","z","z","z","z","source","Arrow3D","Arrow3DArray","Arrow3DArrayIterator","MutableArrow3DArray","__clone_box","arrow_deserialize","arrow_serialize","as_any","as_arc","as_box","as_mut_any","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_into","consume_next","data_type","data_type","data_type","default","deserialize","eq","field_origin","field_origin","field_vector","field_vector","fmt","fmt","from","from","from","from","has_validity","init_validity","into","into","into","into","into_iter","into_iter","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","name","new","new_array","next","origin","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_null","reserve","return_next","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","shrink_to_fit","to_owned","try_extend","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity_iter","vector","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BinaryBuffer","BufferBinaryArray","BufferBinaryArrayIter","__clone_box","array","arrow_deserialize","arrow_serialize","as_slice","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_into","data_type","do_not_call_into_iter","eq","fmt","from","from","from","from","index","index","into","into","into","into_iter","into_iter","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","new_array","next","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Box3D","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","data_type","deserialize","eq","fmt","from","from","into","lossless_try_into","lossy_into","name","new","new_array","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","x","y","z","ClassId","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","data_type","default","deserialize","eq","equivalent","fmt","from","get_hash","hash","into","lossless_try_into","lossy_into","name","new_array","overflowing_as","overflowing_cast_from","partial_cmp","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","ColorRGBA","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","data_type","deserialize","eq","equivalent","fmt","from","from","from_rgb","from_rgba","into","lossless_try_into","lossy_into","name","new_array","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","to_array","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","AnnotationContext","AnnotationContextArrow","AnnotationInfo","AnnotationInfoArray","AnnotationInfoArrayIterator","ClassDescription","ClassDescriptionArrow","ClassDescriptionArrowArray","ClassDescriptionArrowArrayIterator","ClassMapElemArrow","ClassMapElemArrowArray","ClassMapElemArrowArrayIterator","KeypointPairArrow","KeypointPairArrowArray","KeypointPairArrowArrayIterator","MutableAnnotationInfoArray","MutableClassDescriptionArrowArray","MutableClassMapElemArrowArray","MutableKeypointPairArrowArray","__clone_box","__clone_box","__clone_box","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","as_any","as_any","as_any","as_any","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_mut_any","as_mut_any","as_mut_any","as_mut_any","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","class_description","class_id","class_map","clone","clone","clone","clone_into","clone_into","clone_into","color","consume_next","consume_next","consume_next","consume_next","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","eq","eq","eq","equivalent","equivalent","equivalent","field_class_description","field_class_description","field_class_id","field_class_id","field_color","field_color","field_id","field_id","field_info","field_info","field_keypoint0","field_keypoint0","field_keypoint1","field_keypoint1","field_keypoint_connections","field_keypoint_connections","field_keypoint_map","field_keypoint_map","field_label","field_label","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","has_validity","has_validity","has_validity","has_validity","id","info","info","init_validity","init_validity","init_validity","init_validity","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","keypoint0","keypoint1","keypoint_connections","keypoint_connections","keypoint_map","keypoint_map","label","len","len","len","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","new","new","new","new","new_array","new_array","new_array","new_array","new_array","next","next","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_null","push_null","push_null","push_null","reserve","reserve","reserve","reserve","return_next","return_next","return_next","return_next","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","to_owned","to_owned","to_owned","try_extend","try_extend","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity","validity","validity","validity","validity","validity","validity_iter","validity_iter","validity_iter","validity_iter","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Axis3","Back","Down","Forward","Handedness","Left","Left","NEGATIVE_X","NEGATIVE_Y","NEGATIVE_Z","Negative","POSITIVE_X","POSITIVE_Y","POSITIVE_Z","Positive","Right","Right","Sign","SignedAxis3","Up","ViewCoordinates","ViewDir","X","Y","Z","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","arrow_deserialize","arrow_serialize","as_vec3","axis","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","describe","describe","describe_short","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","from","from","from","from","from","from","from_ascii_char","from_dim","from_right_handed","from_rub","from_str","from_str","from_up_and_handedness","handedness","into","into","into","into","into","into","long","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","new","new_array","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","right","sanity_check","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","serialize","serialize","short","sign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rub","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","up","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","InstanceKey","SPLAT","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","data_type","deserialize","eq","equivalent","fmt","fmt","from","get_hash","hash","into","is_specific","is_splat","lossless_try_into","lossy_into","name","new_array","overflowing_as","overflowing_cast_from","partial_cmp","saturating_as","saturating_cast_from","serialize","specific_index","to_owned","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","KeypointId","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","data_type","default","deserialize","eq","equivalent","fmt","from","get_hash","hash","into","lossless_try_into","lossy_into","name","new_array","overflowing_as","overflowing_cast_from","partial_cmp","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","Label","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","data_type","deserialize","eq","equivalent","fmt","from","from","into","lossless_try_into","lossy_into","name","new_array","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","LineStrip2D","LineStrip3D","__clone_box","__clone_box","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","data_type","data_type","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from","from","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","name","name","new_array","new_array","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","Mat3x3","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","data_type","deserialize","eq","fmt","from","from","from","index","into","lossless_try_into","lossy_into","new_array","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","Encoded","Encoded","EncodedMesh3D","EncodedMesh3DArrow","EncodedMesh3DArrowArray","EncodedMesh3DArrowArrayIterator","Glb","Glb","Gltf","Gltf","IndicesNotDivisibleBy3","Mesh3D","Mesh3DArray","Mesh3DArrayIterator","MeshFormat","MeshFormatArray","MeshFormatArrayIterator","MeshId","MismatchedPositionsNormals","MutableEncodedMesh3DArrowArray","MutableMesh3DArray","MutableMeshFormatArray","MutableRawMesh3DArray","Obj","Obj","PositionsNotDivisibleBy3","Raw","Raw","RawMesh3D","RawMesh3DArray","RawMesh3DArrayIterator","RawMeshError","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","albedo_factor","arr","arr","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","as_any","as_any","as_any","as_any","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_mut_any","as_mut_any","as_mut_any","as_mut_any","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","consume_next","consume_next","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","equivalent","equivalent","field_albedo_factor","field_albedo_factor","field_bytes","field_bytes","field_format","field_format","field_indices","field_indices","field_mesh_id","field_mesh_id","field_mesh_id","field_mesh_id","field_normals","field_normals","field_positions","field_positions","field_transform","field_transform","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_hash","get_hash","has_validity","has_validity","hash","hash","index_iter","index_iter","indices","init_validity","init_validity","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","mesh_id","mesh_id","mesh_id","mesh_id","name","new","new","new","new","new_array","new_array","new_array","new_array","new_array","new_array","next","next","next","next","normals","num_triangles","offsets","offsets","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","positions","provide","push_null","push_null","push_null","push_null","random","reserve","reserve","reserve","reserve","return_next","return_next","sanity_check","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","serialize","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transform","transform","try_extend","try_extend","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","types","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity","validity","validity","validity","validity_iter","validity_iter","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","MAX","MsgId","ZERO","__clone_box","arrow_deserialize","arrow_serialize","as_u128","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","data_type","deserialize","eq","equivalent","fmt","fmt","from","get_hash","hash","into","lossless_try_into","lossy_into","name","new_array","overflowing_as","overflowing_cast_from","partial_cmp","random","saturating_as","saturating_cast_from","serialize","short_string","to_owned","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","MutablePoint2DArray","MutablePoint3DArray","Point2D","Point2DArray","Point2DArrayIterator","Point3D","Point3DArray","Point3DArrayIterator","ZERO","ZERO","__clone_box","__clone_box","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","as_any","as_any","as_arc","as_arc","as_box","as_box","as_mut_any","as_mut_any","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","consume_next","consume_next","data_type","data_type","data_type","data_type","data_type","data_type","default","default","eq","eq","field_x","field_x","field_x","field_x","field_y","field_y","field_y","field_y","field_z","field_z","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","has_validity","has_validity","init_validity","init_validity","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","len","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","name","new","new","new","new","new_array","new_array","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_null","push_null","reserve","reserve","return_next","return_next","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","shrink_to_fit","shrink_to_fit","to_owned","to_owned","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity","validity","validity_iter","validity_iter","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","y","y","z","IDENTITY","Quaternion","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","data_type","default","deserialize","eq","fmt","from","from","into","lossless_try_into","lossy_into","name","new","new_array","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","w","wrapping_as","wrapping_cast_from","x","y","z","Radius","__clone_box","arrow_deserialize","arrow_serialize","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","data_type","fmt","from","into","lossless_try_into","lossy_into","name","new_array","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","MutableRect2DArray","Rect2D","Rect2DArray","Rect2DArrayIterator","XCYCW2H2","XCYCW2H2","XCYCWH","XCYCWH","XYWH","XYWH","XYXY","XYXY","YXHW","YXHW","YXYX","YXYX","__clone_box","arr","arrow_deserialize","arrow_serialize","as_any","as_arc","as_box","as_mut_any","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_into","data_type","data_type","data_type","default","eq","fmt","fmt","from","from","from","from","from_xywh","height","index_iter","into","into","into","into","into_iter","into_iter","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","name","new","new_array","next","offsets","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_null","reserve","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","shrink_to_fit","to_owned","top_left_corner","try_extend","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","types","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","vzip","vzip","vzip","vzip","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","MutableScalarPlotPropsArray","Scalar","ScalarPlotProps","ScalarPlotPropsArray","ScalarPlotPropsArrayIterator","__clone_box","__clone_box","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","as_any","as_arc","as_box","as_mut_any","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","consume_next","data_type","data_type","data_type","data_type","default","field_scattered","field_scattered","fmt","fmt","fmt","from","from","from","from","from","from","has_validity","init_validity","into","into","into","into","into","into_iter","into_iter","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","name","new","new_array","new_array","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_null","reserve","return_next","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scattered","shrink_to_fit","to_owned","to_owned","try_extend","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity_iter","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","MutableSize3DArray","Size3D","Size3DArray","Size3DArrayIterator","arrow_deserialize","arrow_serialize","as_any","as_arc","as_box","as_mut_any","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","consume_next","data_type","data_type","data_type","default","field_x","field_x","field_y","field_y","field_z","field_z","fmt","fmt","from","from","from","from","has_validity","init_validity","into","into","into","into","into_iter","into_iter","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","name","new","new_array","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_null","reserve","return_next","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","shrink_to_fit","try_extend","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity_iter","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","y","z","BadTensorShape","ClassId","ClassId","DEFAULT_NAME_DEPTH","DEFAULT_NAME_HEIGHT","DEFAULT_NAME_WIDTH","Depth","Depth","F16NotSupported","F32","F32","F64","F64","I16","I16","I32","I32","I64","I64","I8","I8","Image","JPEG","JPEG","MutableTensorArray","MutableTensorDataArray","MutableTensorDataMeaningArray","MutableTensorDimensionArray","NotContiguousStdOrder","ReadError","Tensor","TensorArray","TensorArrayIterator","TensorCastError","TensorData","TensorDataArray","TensorDataArrayIterator","TensorDataMeaning","TensorDataMeaningArray","TensorDataMeaningArrayIterator","TensorDimension","TensorDimensionArray","TensorDimensionArrayIterator","TensorId","TensorImageError","TensorTrait","TypeMismatch","U16","U16","U32","U32","U64","U64","U8","U8","Unknown","Unknown","UnsupportedImageColorType","UnsupportedJpegColorType","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","arr","arr","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","as_any","as_any","as_any","as_any","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_mut_any","as_mut_any","as_mut_any","as_mut_any","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","consume_next","consume_next","data","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","depth","deserialize","deserialize","deserialize","dtype","dtype","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","field_data","field_data","field_meaning","field_meaning","field_meter","field_meter","field_name","field_name","field_shape","field_shape","field_size","field_size","field_tensor_id","field_tensor_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_dynamic_image","from_image","get","get","get_hash","has_validity","has_validity","hash","height","id","id","index_iter","index_iter","init_validity","init_validity","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_shaped_like_an_image","is_shaped_like_an_image","is_vector","is_vector","len","len","len","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","meaning","meaning","meaning","meter","name","name","named","new","new","new","new","new","new_array","new_array","new_array","new_array","new_array","next","next","next","next","num_dim","num_dim","offsets","offsets","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","provide","provide","push_null","push_null","push_null","push_null","random","reserve","reserve","reserve","reserve","return_next","return_next","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","shape","shape","shape","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","size","size_in_bytes","size_in_bytes","source","source","tensor_from_jpeg_bytes","tensor_from_jpeg_file","tensor_id","tensor_type","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_extend","try_extend","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","types","unnamed","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity","validity","validity","validity","validity_iter","validity_iter","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","source","MutableTextEntryArray","TextEntry","TextEntryArray","TextEntryArrayIterator","__clone_box","arrow_deserialize","arrow_serialize","as_any","as_arc","as_box","as_mut_any","az","az","az","az","body","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_into","consume_next","data_type","data_type","data_type","default","eq","equivalent","field_body","field_body","field_level","field_level","fmt","fmt","from","from","from","from","from_body","has_validity","init_validity","into","into","into","into","into_iter","into_iter","len","level","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","name","new","new","new_array","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_null","reserve","return_next","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","shrink_to_fit","to_owned","try_extend","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity_iter","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","IDENTITY","MutablePinholeArray","MutableRigid3Array","MutableTransformArray","Pinhole","Pinhole","Pinhole","PinholeArray","PinholeArrayIterator","Rigid3","Rigid3","Rigid3","Rigid3Array","Rigid3ArrayIterator","Transform","TransformArray","TransformArrayIterator","Unknown","Unknown","__clone_box","__clone_box","__clone_box","arr","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","arrow_serialize","as_any","as_any","as_any","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_mut_any","as_mut_any","as_mut_any","aspect_ratio","az","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","child_from_parent","clone","clone","clone","clone_into","clone_into","clone_into","consume_next","consume_next","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","deserialize","deserialize","deserialize","eq","eq","eq","field_image_from_cam","field_image_from_cam","field_resolution","field_resolution","field_rotation","field_rotation","field_translation","field_translation","fmt","fmt","fmt","fmt","fmt","fmt","focal_length","focal_length_in_pixels","fov_y","from","from","from","from","from","from","from","from","from","from","from","from","has_validity","has_validity","image_from_cam","index_iter","init_validity","init_validity","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","len","len","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","new","new","new","new_array","new_array","new_array","new_child_from_parent","new_parent_from_child","next","next","next","offsets","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent_from_child","principal_point","push_null","push_null","push_null","reserve","reserve","reserve","resolution","resolution","return_next","return_next","rotation","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","shrink_to_fit","shrink_to_fit","shrink_to_fit","to_owned","to_owned","to_owned","translation","try_extend","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","validity","validity","validity","validity","validity","validity_iter","validity_iter","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","DISPLAY_PRECISION","Vec2D","Vec3D","Vec4D","__clone_box","__clone_box","__clone_box","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","arrow_serialize","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","data_type","data_type","data_type","default","default","default","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","index","index","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","name","name","new","new_array","new_array","new_array","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","w","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x","y","y","y","z","z","Arrow3D","BBox2D","Box3","DTYPE","F16","F16","F32","F32","F64","F64","I16","I16","I32","I32","I64","I64","I8","I8","Pinhole","Quaternion","Rigid3","TensorDataType","TensorDataTypeTrait","TensorElement","Transform","U16","U16","U32","U32","U64","U64","U8","U8","__clone_box","__clone_box","__clone_box","__clone_box","as_f64","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","half_size","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","max","min","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","rotation","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","size","to_owned","to_owned","to_owned","to_owned","to_string","to_string","translation","try_as_u16","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","build_frame_nr","build_log_time","build_some_colors","build_some_instances","build_some_instances_from","build_some_labels","build_some_point2d","build_some_rects","build_some_vec3d","DecodeError","Decoder","EncodeError","Encoder","MsgPack","MsgPack","NotAnRrd","Read","Write","Zstd","Zstd","az","az","borrow","borrow","borrow_mut","borrow_mut","buffer","buffer","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","encode","encoder","fmt","fmt","from","from","from","into","into","into_iter","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","next","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","provide","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","warn_on_version_mismatch","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","zdecoder","zstd_encoder","EncodeError","Encoder","MsgPack","Write","Zstd","append","az","az","borrow","borrow","borrow_mut","borrow_mut","buffer","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","encode","finish","fmt","fmt","from","from","from","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","provide","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","zstd_encoder","arrow2","arrow2_convert","glam","image","HASH_RANDOM_STATE","Hash128","Hash64","ZERO","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","double_hash","eq","eq","equivalent","equivalent","first64","fmt","fmt","from","from","get_hash","get_hash","hash","hash","hash","hash","hash","hash64","hash64","hash_with_seed","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","second64","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","BatchIndex","FullIndex","Index","IndexHash","Integer","NONE","Pixel","Sequence","SequentialIndex","String","Uuid","__clone_box","__clone_box","__clone_box","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","deserialize","deserialize","eq","eq","eq","equivalent","equivalent","equivalent","first64","fmt","fmt","fmt","fmt","from","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash64","into","into","into","is_empty","is_none","is_some","len","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","second64","serialize","serialize","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ArrowSerializationError","BadComponentValues","COL_COMPONENTS","COL_TIMELINES","Component","ComponentBundle","DeserializableComponent","ENTITY_PATH_KEY","MissingComponentsField","MissingEntityPath","MissingTimelinesField","MsgBundle","MsgBundleError","MultipleTimepoints","NoRowsInTimeline","PathParseError","Result","SerializableComponent","Unreachable","__clone_box","__clone_box","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","components","data_type","entity_path","extract_components","extract_timelines","field","find_component","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","msg_id","name","name","name","new","new","new_empty","new_from_boxed","num_components","num_instances","num_instances","num_rows","num_rows","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pack_components","provide","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","source","time_point","to_owned","to_owned","to_string","to_string","try_append_component","try_build_msg_bundle1","try_build_msg_bundle2","try_build_msg_bundle3","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","value","value_boxed","value_list","vzip","vzip","vzip","wrap_in_listarray","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BadEscape","ComponentName","ComponentPath","DoubleSlash","EmptyString","EntityPath","EntityPathHash","EntityPathImpl","EntityPathPart","Index","InvalidSequence","LeadingSlash","MissingSlash","Name","PathParseError","UnterminatedString","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","component_name","component_name","component_path","deserialize","entity_path","entity_path","entity_path_impl","eq","equivalent","fmt","fmt","from","from","from","from","get_hash","hash","hash","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","parse_entity_path","parse_path","partial_cmp","parts","path","saturating_as","saturating_cast_from","serialize","to_owned","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","details","ComponentName","__clone_box","as_ref","as_str","az","borrow","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","deref","deserialize","eq","eq","equivalent","fmt","fmt","from","from","from","full_name","get_hash","hash","hash","into","lossless_try_into","lossy_into","new","overflowing_as","overflowing_cast_from","partial_cmp","saturating_as","saturating_cast_from","serialize","short_name","to_owned","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","ComponentPath","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","component_name","component_name","deserialize","entity_path","entity_path","eq","equivalent","fmt","from","get_hash","hash","into","lossless_try_into","lossy_into","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","EntityPath","EntityPathHash","NONE","__clone_box","__clone_box","as_slice","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","cmp","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","get_hash","get_hash","hash","hash","hash","hash","hash64","hash64","into","into","is_child_of","is_descendant_of","is_none","is_root","is_some","iter","join","last","len","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","parent","partial_cmp","path","root","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","EntityPathImpl","__clone_box","as_slice","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","deserialize","eq","equivalent","fmt","fmt","from","from","get_hash","hash","into","is_root","iter","last","len","lossless_try_into","lossy_into","new","overflowing_as","overflowing_cast_from","parent","partial_cmp","parts","push","root","saturating_as","saturating_cast_from","serialize","to_owned","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","BadEscape","DoubleSlash","EmptyString","InvalidSequence","LeadingSlash","MissingSlash","PathParseError","UnterminatedString","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","eq","equivalent","fmt","fmt","from","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","parse_entity_path","parse_part","provide","saturating_as","saturating_cast_from","to_string","try_from","try_into","type_id","unescape_string","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","details","Duration","MAX","NANOS_PER_MILLI","NANOS_PER_SEC","SEC_PER_DAY","SEC_PER_HOUR","SEC_PER_MINUTE","Time","__clone_box","__clone_box","add","add_assign","as_nanos","as_secs_f32","as_secs_f64","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","deserialize","eq","eq","equivalent","equivalent","exact_format","fmt","fmt","format","from","from","from","from","from","from","from_millis","from_nanos","from_ns_since_epoch","from_seconds_since_epoch","from_secs","from_us_since_epoch","get_hash","get_hash","hash","hash","into","into","is_absolute_date","is_exactly_midnight","lerp","lossless_try_into","lossless_try_into","lossy_into","lossy_into","nanos_since_epoch","neg","now","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","serialize","sub","sub","to_datetime","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","Sequence","Time","TimeInt","TimePoint","TimeType","Timeline","TimelineName","_IMPL_NUM_FromPrimitive_FOR_TimeType","__clone_box","__clone_box","arrow","arrow_deserialize","arrow_serialize","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","cmp","cmp","data_type","default","deserialize","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","format","format_range","from","from","from","from_i64","from_iter","from_u64","get","get_hash","get_hash","hash","hash","hash","insert","into","into","into_iter","into_iter","is_empty","is_timeless","iter","lossless_try_into","lossless_try_into","lossy_into","lossy_into","name","new_array","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","remove","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","serialize","time_int","timeless","timeline","timelines","times","to_owned","to_owned","try_from","try_from","try_into","try_into","typ","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","TimePointArray","TimePointIterator","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","from","from","into","into","into_iter","into_iter","lossless_try_into","lossless_try_into","lossy_into","lossy_into","next","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","time_points","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","BEGINNING","MAX","MIN","TimeInt","__clone_box","abs","add","add","add_assign","as_f32","as_f64","as_i64","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","cmp","deserialize","eq","eq","equivalent","fmt","from","from","from","from","from_milliseconds","from_nanos","from_seconds","from_sequence","get_hash","hash","into","is_timeless","lossless_try_into","lossy_into","neg","overflowing_as","overflowing_cast_from","partial_cmp","partial_cmp","saturating_as","saturating_cast_from","serialize","sub","sub","sub_assign","sum","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from","Timeline","TimelineName","__clone_box","__clone_box","as_ref","as_str","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deserialize","deserialize","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","format_time_range","from","from","from","from","get_hash","get_hash","hash","hash","hash","into","into","log_time","lossless_try_into","lossless_try_into","lossy_into","lossy_into","name","name","new","new","new_sequence","new_temporal","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","typ","typ","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","EMPTY","TimeRange","TimeRangeF","__clone_box","__clone_box","abs_length","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","center","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","contains","contains","deserialize","deserialize","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","into","into","inverse_lerp","is_empty","length","lerp","lossless_try_into","lossless_try_into","lossy_into","lossy_into","max","max","min","min","new","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","point","point","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","union","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","TimeReal","__clone_box","abs","add","add","add_assign","as_f32","as_f64","az","borrow","borrow_mut","cast_from","ceil","checked_as","checked_cast_from","clone","clone_into","cmp","deserialize","eq","eq","equivalent","floor","fmt","from","from","from","from","from","from","from","get_hash","hash","into","lossless_try_into","lossy_into","mul","neg","overflowing_as","overflowing_cast_from","partial_cmp","partial_cmp","round","saturating_as","saturating_cast_from","serialize","sub","sub","sub_assign","sum","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from"],"q":["re_log_typesre_log_types::RecordingSource","","re_log_types::arrow_msg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_typesre_log_types::component_types::TensorCastError","re_log_types::component_types::arrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::arrow_convert_shims","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::bbox","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::class_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::contextre_log_types::component_types::coordinatesre_log_types::component_types::instance_key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::keypoint_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::label","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::linestrip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::mat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::mesh3dre_log_types::component_types::msg_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::pointre_log_types::component_types::quaternion","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::radius","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::rect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::size","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::tensorre_log_types::component_types::tensor::TensorCastError","re_log_types::component_types::text_entry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::component_types::transformre_log_types::component_types::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::datagen","","","","","","","","","re_log_types::encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::encoding::encoder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::external","","","","re_log_types::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::msg_bundle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::path::PathParseError","re_log_types::path::component_name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::path::component_path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::path::entity_path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::path::entity_path_impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::path::parse_path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::path::parse_path::PathParseError","re_log_types::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::time_point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::time_point::arrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::time_point::time_int","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::time_point::timeline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::time_range","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_log_types::time_real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The user-chosen name of the application doing the logging.","A 3D Arrow","A 3D Arrow","","Log an entity using an <code>ArrowMsg</code>.","","","","A new recording has begun.","Oriented 3D box","Clear all the components stored at an <code>EntityPath</code>","Clear all the components of an <code>[EntityPath]</code> and any …","","A signed duration represented as nanoseconds since unix …","","Compressed/encoded mesh format","An operation (like a ‘clear’) on an <code>EntityPath</code>.","Server-backed operation on an <code>EntityPath</code>.","16-bit floating point number.","16-bit floating point number.","32-bit floating point number.","32-bit floating point number.","64-bit floating point number.","64-bit floating point number.","Some batches want to provide explicit indices","Binary <code>glTF</code>.","<code>glTF</code>.","Sent when the client shuts down the connection.","Signed 16 bit integer.","Signed 16 bit integer.","Signed 32 bit integer.","Signed 32 bit integer.","Signed 64 bit integer.","Signed 64 bit integer.","Signed 8 bit integer.","Signed 8 bit integer.","The key of a table.","A 128 bit hash of <code>Index</code> with negligible risk of collision.","Any integer, e.g. a hash or an arbitrary identifier.","The most general log message sent from the SDK to the …","A Generic 3D Mesh.","The format of a binary mesh file, e.g. GLTF, GLB, OBJ","A unique id per <code>Mesh3D</code>.","A unique id per <code>crate::LogMsg</code>.","Wavefront .obj.","Perhaps from some manual data ingestion?","Operation to perform on an <code>EntityPath</code>, e.g. clearing all …","Camera perspective projection (a.k.a. intrinsics).","The parent is some local camera space, the child an image …","X,Y pixel coordinates, from top left.","The official Rerun Python Logging SDK","","Order: XYZW","","A raw “triangle soup” mesh.","A unique id per recording (a stream of <code>LogMsg</code>es).","","","A proper rigid 3D transform, i.e. a rotation and a …","For example: the parent is a 3D world space, the child a …","The official Rerun Rust Logging SDK","For arrays, assumed to be dense (0, 1, 2, …).","Many batches use implicit sequential-indexing","Anything goes.","The data types supported by a …","","The data that can be stored in a …","A date-time represented as nanoseconds since unix epoch","A 64-bit number describing either nanoseconds OR sequence …","","","Like <code>TimeRange</code>, but using <code>TimeReal</code> for improved precision.","Either nanoseconds or sequence numbers.","","A time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …","The name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …","A transform between two spaces.","Unsigned 16 bit integer.","Unsigned 16 bit integer.","Unsigned 32 bit integer.","Unsigned 32 bit integer.","Unsigned 64 bit integer.","Unsigned 64 bit integer.","Unsigned 8 bit integer.","Unsigned 8 bit integer.","We don’t know the transform, but it is …","","UUID/GUID","","The recording id:s given to recordings that don’t have …","","","","","","","","","","Albedo factor applied to the final color of the mesh.","The user-chosen name of the application doing the logging.","<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Potentially user-facing component types.","","","","Generate random data for tests and benchmarks.","","","","","","","","","","","Encoding/decoding <code>LogMsg</code>:es as <code>.rrd</code> files.","","Build a <code>EntityPath</code>:","Build a <code>Vec&lt;EntityPathPart&gt;</code>:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Column-major projection matrix.","","","Optionally, the flattened indices array for this mesh.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","True if the recording is one of the official Rerun …","","","","","","","","","","","","","","","","","","","e.g. 3","Lower right corner.","","","","","Upper left corner.","","","e.g. 11","Structs and functions used for framing and de-framing a …","","A unique id per <code>EntityPathOpMsg</code>.","Name of the timeline (e.g. “log_time”).","Optionally, the flattened normals array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","e.g. 0","Every logged entity in Rerun is logged to an <code>EntityPath</code>.","What operation.","The flattened positions array of this mesh.","","Should be unique for each recording.","","Pixel resolution (usually integers) of child image space. …","How is the child rotated?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When the recording started.","e.g. <code>a0</code> for alpha releases.","","","Time information (when it was logged, when it was …","","","","","","","","","","","","","","","","four columns of an affine transformation matrix","Translation to parent from child.","","","","","","","","","","","","","","","","","","","","Sequence or time?","","","","","","","","","","The default <code>ApplicationId</code> if the user hasn’t set one.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message containing an Arrow payload","","","","","","","","Arrow chunk","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","A unique id per <code>crate::LogMsg</code>.","","","","","Arrow schema","","","","Build a single Arrow log message tuple from this <code>MsgBundle</code>…","","","","","","","","","","","A 3D Arrow","","","","A 3D bounding box represented by it’s half-lengths","","A 16-bit ID representing a type of semantic class.","The data is an annotated <code>crate::component_types::ClassId</code> …","An RGBA color tuple.","Image data interpreted as depth map.","","Compressed/encoded mesh format","","","","","","","","<code>arrow2_convert</code> helper for fields of type <code>[T; SIZE]</code>","Binary <code>glTF</code>.","<code>glTF</code>.","","","","","","A number used to specify a specific instance in an entity.","","A 16-bit ID representing a type of semantic keypoint …","A String label component","A Line Strip of 2D points","A Line Strip of 3D points","A 3x3 column-major Matrix made up of 3 Vecs","A Generic 3D Mesh.","The format of a binary mesh file, e.g. GLTF, GLB, OBJ","A unique id per <code>Mesh3D</code>.","A unique id per <code>crate::LogMsg</code>.","","Wavefront .obj.","Camera perspective projection (a.k.a. intrinsics).","The parent is some local camera space, the child an image …","A point in 2D space.","A point in 3D space.","A Quaternion represented by 4 real numbers.","A Radius component","","A raw “triangle soup” mesh.","","A rectangle in 2D space.","","A proper rigid 3D transform, i.e. a rotation and a …","For example: the parent is a 3D world space, the child a …","A double-precision scalar.","Additional properties of a scalar when rendered as a plot.","A 3D size, e.g. the size of a 3D box.","A Multi-dimensional Tensor","","Flattened <code>Tensor</code> data payload","How to interpret the contents of a tensor.","Flattened <code>Tensor</code> data payload","A unique id per <code>Tensor</code>.","","","A text entry component, comprised of a text body and its …","A transform between two spaces.","","","","","","Default behavior: guess based on shape","We don’t know the transform, but it is …","","","A vector in 2D space.","A vector in 3D space.","A vector in 4D space.","","[x_center, y_center, width/2, height/2]","[x_center, y_center, width, height]","[x, y, w, h], with x,y = left,top.","[x0, y0, x1, y1], with x0,y0 = left,top and x1,y1 = …","[y, x, h, w], with x,y = left,top.","[y0, x0, y1, x1], with x0,y0 = left,top and x1,y1 = …","","Albedo factor applied to the final color of the mesh.","","","Assorted shims that should make their way back to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data payload","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Column-major projection matrix.","Optionally, the flattened indices array for this mesh.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Iterate over the registered field types","","","","","","","","","","","","","","","","","The per-element data meaning Used to indicated if the data …","","","","Reciprocal scale of meter unit for depth images","","Optional name of the dimension, e.g. “color” or “…","","","Optionally, the flattened normals array for this mesh.","","","","","","","","","","","","","","","The flattened positions array of this mesh.","","","","","Pixel resolution (usually integers) of child image space. …","How is the child rotated?","","","","","","","","","","","","","","Dimensionality and length","","Number of elements on this dimension. I.e. size-1 is the …","","","","Unique identifier for the tensor","","","","four columns of an affine transformation matrix","Translation to parent from child.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 3D Arrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shim to enable zero-copy arrow deserialization for …","Internal <code>ArrowArray</code> helper to iterate over a <code>BinaryArray</code> …","Iterator for for <code>BufferBinaryArray</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 3D bounding box represented by it’s half-lengths","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","A 16-bit ID representing a type of semantic class.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","An RGBA color tuple.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","The <code>AnnotationContext</code> provides additional information on …","","Information about an Annotation.","","","The description of a semantic Class.","Helper struct for converting <code>ClassDescription</code> to arrow","","","Helper struct for converting <code>AnnotationContext</code> to arrow","","","Helper struct for converting <code>ClassDescription</code> to arroweturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","<code>ClassId</code> or <code>KeypointId</code> to which this annotation info …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Semantic connections between two keypoints.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","One of <code>X</code>, <code>Y</code>, <code>Z</code>.","","","","Left or right handedness. Used to describe a coordinate …","","","","","","","","","","","","","Positive (<code>+</code>) or Negative (<code>-</code>).","One of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …","","How we interpret the coordinate system of an entity/space.","The six cardinal directions for 3D view-space and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns a matrix that translates RUB to this coordinate …","","","Choses a coordinate system based on just an up-axis.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an error if this does not span all three …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a matrix that translates this coordinate system to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A number used to specify a specific instance in an entity.","A special value indicating that this [<code>InstanceKey]</code> is …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Are we referring to a specific instance of the entity …","Are we referring to all instances of the entity (e.g. all …","","","","","","","","","","","Returns <code>None</code> if splat, otherwise the index.","","","","","","","","","","","A 16-bit ID representing a type of semantic keypoint …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","A String label component","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A Line Strip of 2D points","A Line Strip of 3D points","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 3x3 column-major Matrix made up of 3 Vecs","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Compressed/encoded mesh format","Helper struct for converting <code>EncodedMesh3D</code> to arrow","","","","Binary <code>glTF</code>.","","<code>glTF</code>.","","A Generic 3D Mesh.","","","The format of a binary mesh file, e.g. GLTF, GLB, OBJ","","","A unique id per <code>Mesh3D</code>.","","","","","","","Wavefront .obj.","","","","A raw “triangle soup” mesh.","","","","","","","","","Albedo factor applied to the final color of the mesheturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Optionally, the flattened indices array for this mesh.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optionally, the flattened normals array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The flattened positions array of this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","four columns of an affine transformation matrixll ones.","A unique id per <code>crate::LogMsg</code>.","All zeroes.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","A shortened string representation of the message id.","","","","","","","","","","","","","A point in 2D space.","","","A point in 3D space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Quaternion represented by 4 real numbers.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","A Radius component","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A rectangle in 2D space.","","","","[x_center, y_center, width/2, height/2]","","[x_center, y_center, width, height]","","[x, y, w, h], with x,y = left,top.","","[x0, y0, x1, y1], with x0,y0 = left,top and x1,y1 = …","","[y, x, h, w], with x,y = left,top.","","[y0, x0, y1, x1], with x0,y0 = left,top and x1,y1 = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A double-precision scalar.","Additional properties of a scalar when rendered as a plot.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 3D size, e.g. the size of a 3D box.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The data is an annotated <code>crate::component_types::ClassId</code> …","","","","","Image data interpreted as depth map.","","","","","","","","","","","","","","","","","","","","","","","A Multi-dimensional Tensor","","","","Flattened <code>Tensor</code> data payload","","","How to interpret the contents of a tensor.","","","Flattened <code>Tensor</code> data payload","","","A unique id per <code>Tensor</code>.","","","","","","","","","","","","","Default behavior: guess based on shape","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data payload","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Construct a tensor from <code>image::DynamicImage</code>.","Construct a tensor from something that can be turned into …","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The per-element data meaning Used to indicated if the data …","Reciprocal scale of meter unit for depth images","","Optional name of the dimension, e.g. “color” or “…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dimensionality and length","","","","","Number of elements on this dimension. I.e. size-1 is the …","","","","","Construct a tensor from the contents of a JPEG file.","Construct a tensor from the contents of a JPEG file on …","Unique identifier for the tensortext entry component, comprised of a text body and its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Camera perspective projection (a.k.a. intrinsics).","","The parent is some local camera space, the child an image …","","","A proper rigid 3D transform, i.e. a rotation and a …","","For example: the parent is a 3D world space, the child a …","","","A transform between two spaces.","","","","We don’t know the transform, but it is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Focal length.","X &amp; Y focal length in pixels.","Field of View on the Y axis, i.e. the angle between top …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Column-major projection matrix.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Principal point of the pinhole camera, i.e. the …","","","","","","","","Pixel resolution (usually integers) of child image space. …","","","How is the child rotated?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Translation to parent from child.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of decimals shown for all vector display methods.","A vector in 2D space.","A vector in 3D space.","A vector in 4D space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Oriented 3D box","","16-bit floating point number.","16-bit floating point number.","32-bit floating point number.","32-bit floating point number.","64-bit floating point number.","64-bit floating point number.","Signed 16 bit integer.","Signed 16 bit integer.","Signed 32 bit integer.","Signed 32 bit integer.","Signed 64 bit integer.","Signed 64 bit integer.","Signed 8 bit integer.","Signed 8 bit integer.","","Order: XYZW","","The data types supported by a …","","The data that can be stored in a …","","Unsigned 16 bit integer.","Unsigned 16 bit integer.","Unsigned 32 bit integer.","Unsigned 32 bit integer.","Unsigned 64 bit integer.","Unsigned 64 bit integer.","Unsigned 8 bit integer.","Unsigned 8 bit integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Lower right corner.","Upper left corner.","","","","","","","","","","","","","","","","","","","","","","Number of bytes used by the type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …","Build a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …","Create <code>len</code> dummy colors","Create <code>len</code> dummy <code>InstanceKey</code> keys. These keys will be …","","Create <code>len</code> dummy labels","Create <code>len</code> dummy <code>Point2D</code>","Create <code>len</code> dummy rectangles","Create <code>len</code> dummy <code>Vec3D</code>","On failure to encode or serialize a <code>LogMsg</code>.","","On failure to encode or serialize a <code>LogMsg</code>.","Encode a stream of <code>LogMsg</code> into an <code>.rrd</code> file.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","On failure to encode or serialize a <code>LogMsg</code>.","Encode a stream of <code>LogMsg</code> into an <code>.rrd</code> file.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","128-bit hash. Negligible risk for collision.","64-bit hash.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Hash the given value.","","","","","","","Hash the given value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Some batches want to provide explicit indices","The key of a table.","A 128 bit hash of <code>Index</code> with negligible risk of collision.","Any integer, e.g. a hash or an arbitrary identifier.","","X,Y pixel coordinates, from top left.","For arrays, assumed to be dense (0, 1, 2, …).","Many batches use implicit sequential-indexing","Anything goes.","UUID/GUID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A type that can used as a Component of an Entity.","A <code>ComponentBundle</code> holds an Arrow component column, and its …","A <code>Component</code> that fulfils all the conditions required to be …","","","","","A <code>MsgBundle</code> holds data necessary for composing a single …","The errors that can occur when trying to convert between …","","","","","A <code>Component</code> that fulfils all the conditions required to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the datatype of the bundled component, discarding …","","Extract a vector of <code>ComponentBundle</code> from the message. This …","Extract a <code>TimePoint</code> from the “timelines” column. This …","Create a <code>Field</code> for this <code>Component</code>.","Returns the index of <code>component</code> in the bundle, if it exists.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","A unique id per <code>crate::LogMsg</code>.","The name of the component.","","The name of the Component, used as column name in the …","","Create a new <code>MsgBundle</code> with a pre-built Vec of …","","Create a new <code>ComponentBundle</code> from a boxed <code>Array</code>. The <code>Array</code> …","Returns the number of component collections in this …","Returns the number of <em>instances</em> for a given <code>row</code> in the …","Returns the number of <em>instances</em> for a given <code>row</code> in the …","Returns the number of <em>rows</em> in this bundle, i.e. the length …","Returns the number of <em>rows</em> for each component collections …","","","","","","","Pack the passed iterator of <code>ComponentBundle</code> into a …","","","","","","","","","","","","","","Try to append a collection of <code>Component</code> onto the …","Helper to build a <code>MessageBundle</code> from 1 component","Helper to build a <code>MessageBundle</code> from 2 components","Helper to build a <code>MessageBundle</code> from 3 components","","","","","","Extract a <code>MsgBundle</code> from an <code>ArrowMsg</code>.","","","","","","","","","","","","","","The Component payload <code>Array</code>.","Get the <code>ComponentBundle</code> value as a boxed <code>Array</code>.","Get the <code>ComponentBundle</code> value","","","","Wrap <code>field_array</code> in a single-element <code>ListArray</code>","","","","","","","","The name of an entity component, e.g. <code>pos</code> or <code>color</code>.","A <code>EntityPath</code> plus a <code>ComponentName</code>.","","","<code>camera / &quot;left&quot; / points / #42</code>","A 128 bit hash of <code>EntityPath</code> with negligible risk of …","<code>camera / &quot;left&quot; / points / #42</code>","The different parts that make up an <code>EntityPath</code>.","Array/table/map member. Each member must be of the same …","","","","Struct member. Each member can have a different type.","","","","","","","","","","","","","","“color”","","","","<code>camera / &quot;left&quot; / points / #42</code>","","","","","","","","Returns the argument unchanged.","","","","precomputed hash","Calls <code>U::from(self)</code>.","","","","","Parses an entity path, e.g. …","","","","","","","","","","","","","","","","","","","The name of an entity component, e.g. <code>pos</code> or <code>color</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Includes namespace, e.g. <code>rerun.color</code> or <code>ext.confidence</code>.","","","Precomputed hash of the string.","Calls <code>U::from(self)</code>.","","","","","","","","","","Excludes the rerun namespace, so you’ll get <code>color</code> but …","","","","","","","","","","","A <code>EntityPath</code> plus a <code>ComponentName</code>.","","","","","","","","","","","“color”","","","<code>camera / &quot;left&quot; / points / #42</code>","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","<code>camera / &quot;left&quot; / points / #42</code>","A 128 bit hash of <code>EntityPath</code> with negligible risk of …","Sometimes used as the hash of <code>None</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","precomputed hash","","Precomputed 64-bit hash.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this a direct child of the other path.","Is this a strict descendant of the given path.","","","","","","","Number of parts","","","","","","","","","","Return <code>None</code> if root.","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>camera / &quot;left&quot; / points / #42</code>","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","Number of components","","","","","","Return <code>None</code> if root.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Parses an entity path, e.g. …","","","","","","","","","","","","","","","","A signed duration represented as nanoseconds since unix …","","","","","","","A date-time represented as nanoseconds since unix epoch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Human-readable formatting","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If true, this time is likely relative to unix epoch.","","","","","","","","","","","","","","","","","","","","","","","","Returns the absolute datetime if applicable.","","","","","","","","","","","","","","","","","","","","","","Used e.g. for frames in a film.","Normal wall time.","A 64-bit number describing either nanoseconds OR sequence …","A point in time on any number of <code>Timeline</code>s.","The type of a <code>TimeInt</code> or <code>Timeline</code>.","A time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …","The name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Name of the timeline (e.g. “log_time”).","","","","","","","","","","","","","","","","Logging to this time means the data will show upp in all …","","","","","","","","","","Sequence or time?","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The beginning of time.","","","A 64-bit number describing either nanoseconds OR sequence …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","For time timelines.","For time timelines.","For time timelines.","For sequence timelines.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …","The name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a formatted string of <code>time_range</code> on this <code>Timeline</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Precomputed hash of the string.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The log time timeline to which all API functions will …","","","","","","Name of the timeline (e.g. “log_time”).","","","","","","","","","","","","","","","","","","","","","","","","","Sequence or time?","","","","","","","","","","","","","Contains no time at all.","","Like <code>TimeRange</code>, but using <code>TimeReal</code> for improved precision.","","","The amount of time or sequences covered by this range.","","","","","","","","","","","","","","","","","","","Inclusive","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Where in the range is this value? Returns 0-1 if within …","","The amount of time or sequences covered by this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Either nanoseconds or sequence numbers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,8,0,0,0,8,0,5,5,247,0,102,0,0,8,32,35,32,35,32,35,217,101,101,8,32,35,32,35,32,35,32,35,0,0,216,0,0,0,0,0,101,12,0,0,184,216,12,0,0,102,0,0,0,0,0,184,12,216,217,216,0,0,0,0,0,0,0,0,0,0,0,0,0,32,35,32,35,32,35,32,35,184,12,216,0,6,6,7,8,9,10,11,12,13,5,99,10,0,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,103,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,0,0,0,0,0,6,6,7,8,9,10,11,12,13,5,0,5,0,0,6,7,9,10,11,12,13,5,6,7,9,10,11,12,13,5,0,6,6,7,7,8,9,10,11,11,12,12,13,5,103,6,7,7,7,8,8,8,8,9,10,11,12,13,5,6,6,6,7,199,0,6,7,8,183,0,0,99,9,6,7,8,9,10,11,12,13,5,10,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,11,198,240,246,99,103,198,240,246,11,0,9,13,241,99,44,44,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,11,0,13,99,6,10,10,183,182,199,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,10,11,0,0,13,0,0,6,7,8,9,10,11,12,13,5,6,7,11,12,103,182,199,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,241,6,7,8,9,10,11,12,13,5,7,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,44,44,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,5,248,248,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,33,154,33,0,0,0,39,0,39,102,0,154,145,145,0,0,0,0,0,101,101,145,145,145,145,155,0,145,0,0,0,0,0,0,0,0,0,154,101,0,184,0,0,0,0,102,0,155,0,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,154,145,145,145,145,39,184,155,155,0,0,0,0,131,131,131,131,131,131,31,99,40,0,0,249,249,249,40,37,31,33,0,178,249,40,37,31,33,249,40,37,31,33,103,249,40,37,31,33,249,40,37,31,33,249,40,37,31,33,0,0,0,0,147,249,31,0,250,40,33,33,103,249,40,37,31,33,33,250,250,183,99,0,249,40,37,31,33,40,37,250,250,0,0,0,178,0,249,40,37,31,33,249,40,37,31,33,0,250,147,0,99,103,147,0,146,249,40,99,250,40,44,249,40,37,31,33,249,40,37,31,33,0,99,33,0,0,0,183,182,249,40,37,31,33,249,40,37,31,33,0,136,250,147,0,146,250,33,0,147,0,33,0,103,182,249,40,37,31,33,249,40,37,31,33,249,40,37,31,33,249,40,37,31,33,249,40,37,31,33,40,0,44,249,40,37,31,33,128,249,40,37,31,33,249,40,37,31,33,62,119,120,128,141,62,119,120,128,141,62,120,128,141,251,0,0,0,0,44,44,44,45,45,45,45,45,51,50,44,45,51,50,44,45,51,50,44,45,51,50,44,45,51,50,44,45,51,50,44,44,44,50,45,44,45,45,44,44,45,50,45,50,45,44,45,51,50,44,50,45,45,51,50,44,51,50,45,45,51,50,44,45,51,50,44,44,45,44,50,44,45,51,50,44,45,51,50,44,45,45,50,45,51,50,44,45,51,50,44,44,45,44,45,45,51,50,44,45,51,50,44,45,45,51,50,44,45,51,50,44,45,51,50,44,45,45,50,44,45,51,50,44,45,51,50,44,45,51,50,44,0,0,0,58,61,58,58,58,61,60,58,61,60,58,61,60,58,61,60,58,61,60,58,61,60,58,58,58,58,0,58,58,61,60,58,58,58,61,61,60,58,61,60,61,60,58,61,60,58,58,61,61,60,58,61,60,58,61,60,58,61,60,58,58,61,60,58,61,60,58,61,60,58,61,60,58,61,60,58,61,60,58,61,60,58,61,60,58,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,76,71,67,68,69,71,70,67,68,69,71,70,72,73,74,75,72,73,74,75,72,73,74,75,72,73,74,75,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,70,70,71,67,76,71,67,76,71,67,77,78,79,80,67,72,68,73,69,74,71,70,75,72,73,74,75,67,72,76,73,74,71,75,67,76,71,67,76,71,67,76,71,75,80,75,80,72,77,72,77,74,79,73,78,73,78,74,79,74,79,72,77,67,72,76,73,74,71,75,67,72,81,77,76,76,68,73,82,78,69,69,74,83,79,71,71,70,75,84,80,77,78,79,80,67,76,69,72,73,74,75,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,81,77,82,78,83,79,84,80,68,68,76,69,76,69,67,72,73,74,75,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,71,72,73,74,75,67,68,69,71,70,77,78,79,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,72,73,74,75,72,73,74,75,77,78,79,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,76,71,72,73,74,75,67,76,71,72,73,74,75,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,72,73,74,75,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,72,73,74,75,72,73,74,75,77,78,79,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,67,72,81,77,76,68,73,82,78,69,74,83,79,71,70,75,84,80,0,87,87,87,0,87,90,86,86,86,89,86,86,86,89,87,90,0,0,87,0,0,88,88,88,87,85,88,89,86,90,85,85,86,86,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,85,85,90,85,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,88,89,86,86,90,85,87,85,88,89,86,90,87,88,90,85,85,86,85,85,87,85,88,89,86,90,87,87,85,88,89,86,90,87,85,88,89,86,90,85,86,85,87,85,88,89,86,90,87,85,88,89,86,90,85,85,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,86,87,85,88,89,86,90,85,88,86,87,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,85,87,85,88,89,86,90,87,85,88,89,86,90,87,85,88,89,86,90,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,0,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,96,97,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,107,102,0,0,0,0,106,101,106,101,111,0,0,0,0,0,0,0,111,0,0,0,0,106,101,111,107,102,0,0,0,0,108,99,103,101,102,99,116,117,108,99,103,100,101,102,108,99,103,100,101,102,104,105,106,107,104,105,106,107,104,105,106,107,104,105,106,107,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,103,100,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,99,103,101,102,108,99,103,101,102,108,109,110,108,104,99,103,100,105,106,101,107,102,104,105,106,107,104,105,106,107,108,99,103,101,102,108,99,103,101,102,108,101,104,109,105,110,105,110,104,109,104,109,105,110,104,109,104,109,105,110,108,111,111,104,99,103,105,106,101,101,107,102,103,100,108,111,104,112,109,99,103,100,100,105,113,110,106,114,116,101,107,115,117,102,108,101,109,110,108,101,116,117,99,104,105,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,112,109,113,110,114,116,115,117,104,105,106,107,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,102,99,103,100,102,104,105,106,107,108,99,103,100,101,102,109,110,116,117,99,99,106,107,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,99,111,104,105,106,107,108,104,105,106,107,109,110,99,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,99,103,101,102,104,105,106,107,108,99,103,101,102,111,101,103,100,104,105,106,107,108,111,104,112,109,99,103,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,104,105,106,107,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,106,107,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,104,105,106,107,104,105,109,110,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,108,111,104,112,109,99,103,100,105,113,110,106,114,116,101,107,115,117,102,23,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,0,0,0,0,119,120,119,120,119,120,119,120,121,122,121,122,121,122,121,122,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,120,119,120,123,124,119,121,120,122,121,122,121,122,119,120,121,123,122,124,121,123,122,124,122,124,119,121,120,122,119,119,119,121,126,123,120,120,120,122,127,124,123,124,121,122,119,121,126,123,120,122,127,124,126,123,127,124,121,122,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,120,119,121,120,122,119,120,123,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,121,122,121,122,123,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,121,122,119,120,121,122,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,121,122,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,121,122,121,122,123,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,121,126,123,120,122,127,124,119,120,119,120,120,128,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,0,0,0,132,131,132,131,132,131,132,131,132,131,132,131,131,134,131,131,132,132,132,132,132,133,134,131,132,133,134,131,132,133,134,131,132,133,134,131,132,133,134,131,132,133,134,131,131,131,132,131,132,132,131,132,131,132,133,134,131,131,131,134,132,133,134,131,133,134,132,132,133,134,131,132,133,134,131,131,132,131,134,132,132,133,134,131,132,133,134,131,132,132,132,133,134,131,132,133,134,131,132,131,131,132,132,133,134,131,132,133,134,131,132,132,133,134,131,132,132,133,134,131,132,133,134,131,132,132,133,134,131,131,132,133,134,131,132,133,134,131,0,0,0,0,0,135,136,135,136,135,136,137,137,137,137,135,136,137,140,138,135,136,137,140,138,135,136,137,140,138,135,136,137,140,138,135,136,137,140,138,135,136,137,140,138,135,136,135,136,138,135,136,137,137,137,137,138,135,136,137,135,135,136,137,140,138,138,137,135,136,137,140,138,140,138,137,135,136,137,140,138,135,136,137,140,138,135,136,137,135,136,138,135,136,137,140,138,135,136,137,140,138,137,137,138,135,136,137,140,138,135,136,137,140,138,136,137,135,136,137,135,136,137,140,138,135,136,137,140,138,137,135,136,137,140,138,135,136,137,140,138,135,136,137,140,138,137,137,138,135,136,137,140,138,135,136,137,140,138,135,136,137,140,138,0,0,0,0,141,141,142,142,142,142,141,142,144,143,141,142,144,143,141,142,144,143,141,142,144,143,141,142,144,143,141,142,144,143,143,141,142,142,142,142,143,142,143,142,143,141,142,141,142,144,143,143,142,141,142,144,143,144,143,142,141,142,144,143,141,142,144,143,141,142,141,143,141,142,144,143,141,142,144,143,142,142,143,141,142,144,143,141,142,144,143,142,142,141,142,144,143,141,142,144,143,142,141,142,144,143,141,142,144,143,141,142,144,143,142,142,143,141,142,144,143,141,142,144,143,141,142,144,143,141,141,141,154,150,39,146,146,146,150,39,154,148,145,148,145,148,145,148,145,148,145,148,145,155,148,145,0,0,0,0,154,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,148,145,148,145,148,145,148,145,150,39,155,155,36,145,146,39,147,165,166,36,145,146,39,147,36,145,146,39,147,148,149,150,151,148,149,150,151,148,149,150,151,148,149,150,151,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,145,146,39,147,36,145,146,39,147,36,152,153,147,36,148,145,149,146,150,39,147,151,148,149,150,151,148,149,150,151,146,36,146,39,250,147,36,145,146,39,147,154,36,146,39,151,153,151,153,151,153,149,152,151,153,149,152,151,153,36,148,145,149,146,146,150,39,147,151,154,154,155,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,154,155,155,155,147,147,250,147,36,152,153,36,146,250,147,165,166,149,151,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,161,165,162,152,163,166,164,153,250,147,250,147,148,149,150,151,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,250,147,147,147,147,146,146,148,149,150,147,151,36,145,146,39,147,165,152,166,153,250,147,148,150,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,154,155,148,149,150,151,36,148,149,150,151,152,153,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,146,39,250,147,147,148,149,150,151,146,250,147,154,155,147,147,147,0,36,145,146,39,147,146,154,155,148,149,150,151,36,148,161,165,145,149,162,152,146,150,163,166,39,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,148,149,150,151,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,148,150,146,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,148,149,150,151,149,151,152,153,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,146,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,36,148,161,165,145,149,162,152,146,150,163,166,39,147,151,164,153,154,155,251,0,0,0,0,178,178,178,179,179,179,179,178,179,181,180,178,178,179,181,180,178,179,181,180,178,179,181,180,178,179,181,180,178,179,181,180,178,178,180,178,179,179,179,178,178,179,180,179,180,178,179,178,179,181,180,178,180,179,178,179,181,180,181,180,179,178,178,179,181,180,178,179,181,180,178,178,179,178,180,178,179,181,180,178,179,181,180,179,179,180,178,179,181,180,178,179,181,180,179,178,179,178,179,181,180,178,179,181,180,179,178,179,181,180,178,179,181,180,178,179,181,180,179,179,180,178,179,181,180,178,179,181,180,178,179,181,180,182,0,0,0,0,187,184,0,0,0,187,184,0,0,0,0,0,187,184,182,183,184,195,182,183,184,182,183,184,185,186,187,185,186,187,185,186,187,185,186,187,183,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,182,182,183,184,182,183,184,189,190,185,182,186,183,187,184,185,186,187,185,182,186,187,182,183,184,182,183,184,186,190,186,190,185,189,185,189,185,182,186,183,187,184,183,183,183,185,192,189,182,186,193,190,183,187,194,195,184,189,190,183,195,185,186,185,192,189,182,186,193,190,183,187,194,195,184,192,189,193,190,194,195,185,186,187,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,184,185,186,187,182,183,184,182,182,189,190,195,187,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,182,183,185,186,187,185,186,187,183,183,189,190,182,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,182,183,184,185,186,187,182,183,184,182,185,186,187,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,185,186,187,185,192,189,182,186,193,190,183,187,194,195,184,187,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,185,186,187,185,186,189,190,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,185,192,189,182,186,193,190,183,187,194,195,184,0,0,0,0,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,191,196,196,197,197,191,191,191,196,196,196,197,191,196,191,196,197,191,196,197,191,196,197,191,196,196,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,191,196,197,197,191,196,197,191,196,197,191,196,197,191,196,197,196,197,0,0,0,247,32,35,32,35,32,35,32,35,32,35,32,35,32,35,0,0,0,0,0,0,0,32,35,32,35,32,35,32,35,198,199,32,35,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,32,198,199,32,32,35,35,198,199,32,35,199,198,199,32,35,198,199,32,35,198,199,32,35,198,198,198,199,32,35,198,199,32,35,199,198,199,32,35,198,199,32,35,198,199,32,35,32,198,199,32,35,32,35,199,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,198,199,32,35,0,0,0,0,0,0,0,0,0,0,0,0,0,203,204,204,204,203,203,204,208,204,208,204,208,204,210,208,208,204,208,204,208,204,0,0,204,204,208,204,204,208,204,208,208,204,208,204,208,208,208,204,208,204,204,208,204,208,204,204,204,208,204,208,204,208,204,208,204,208,204,208,204,0,208,204,208,204,208,210,0,0,203,203,203,210,210,203,210,203,210,203,210,210,203,210,203,210,203,0,210,203,203,210,203,203,210,203,210,203,210,203,210,210,203,210,203,203,210,203,210,203,203,203,210,203,210,203,210,203,210,203,210,203,210,203,210,203,210,203,210,0,0,0,0,0,0,0,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,0,212,213,212,213,213,212,213,212,213,212,213,0,212,212,213,213,212,213,0,212,213,212,213,212,213,212,213,212,213,212,213,212,213,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,0,217,0,0,216,218,216,216,217,216,216,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,216,217,216,217,216,217,218,216,217,218,218,216,216,217,218,216,216,216,217,218,216,217,218,216,216,217,218,218,218,216,217,218,217,218,218,217,216,217,218,216,217,218,216,217,218,216,217,218,216,217,216,217,218,216,217,218,218,216,217,216,217,218,216,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,216,217,218,26,26,0,0,0,0,0,0,26,26,26,0,0,26,26,26,0,0,26,219,27,26,219,27,26,219,27,26,219,27,26,219,27,26,219,27,26,219,27,219,27,219,27,27,219,27,0,0,252,27,26,26,219,27,27,26,26,26,26,219,27,26,219,27,26,219,27,26,219,27,27,252,219,219,219,27,219,219,27,219,27,219,27,26,219,27,26,219,27,0,26,26,219,27,26,219,27,26,27,219,27,26,27,27,0,0,0,26,219,219,219,219,27,27,26,219,27,26,219,27,26,219,27,26,219,27,219,219,219,26,219,27,0,26,219,27,26,219,27,224,0,0,224,224,0,0,0,0,228,224,224,224,228,0,224,228,228,228,228,228,228,228,228,228,228,0,229,0,228,0,229,0,228,228,228,228,228,228,228,228,228,228,4,228,228,228,228,228,0,0,228,232,4,228,228,228,228,228,228,228,228,228,228,228,228,228,253,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,0,0,230,230,4,4,230,4,230,4,230,4,230,4,230,4,230,4,230,4,230,4,4,4,230,4,230,4,230,4,4,230,4,4,4,4,4,4,4,230,4,230,4,4,4,230,4,230,4,4,4,230,4,230,4,4,4,4,230,4,230,4,4,230,4,230,4,4,4,4,4,230,4,230,4,4,230,4,4,230,4,230,4,230,4,230,4,230,4,230,4,230,4,230,4,0,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,224,224,224,224,224,224,0,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,0,0,224,224,224,224,224,224,224,0,224,224,224,224,224,253,0,234,234,234,234,234,234,0,201,234,201,201,234,234,234,201,234,201,234,201,234,201,234,201,234,201,234,201,234,201,234,201,234,201,234,201,234,201,234,234,201,234,201,201,201,201,234,234,234,234,234,201,201,234,201,201,234,201,234,201,234,201,201,201,201,234,201,234,201,234,201,201,234,201,234,201,234,201,234,201,234,201,234,201,201,201,201,234,234,201,201,201,234,201,234,201,234,201,234,201,234,201,234,201,234,201,234,239,239,0,0,0,0,0,0,25,239,0,25,25,25,239,25,239,25,239,25,239,25,239,25,239,25,239,25,239,25,239,25,25,25,239,25,239,25,239,25,239,239,239,25,25,239,239,25,239,25,25,239,25,239,239,25,25,239,25,25,25,25,25,25,239,25,239,241,25,25,239,25,239,25,239,25,25,239,25,239,25,239,0,25,0,25,25,25,239,25,239,25,239,241,25,239,25,239,25,239,25,239,25,239,25,239,0,0,244,243,244,243,244,243,244,243,244,243,244,243,244,243,244,243,244,243,244,243,244,243,244,244,243,244,243,244,243,244,243,244,244,243,244,243,244,243,244,243,244,243,244,243,244,243,244,243,200,200,200,0,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,0,0,245,241,245,245,245,241,245,245,241,245,241,245,241,245,241,245,241,245,241,245,241,245,241,245,241,245,245,241,245,245,241,245,241,245,245,241,241,245,245,245,241,245,241,245,245,241,245,241,241,245,241,245,241,241,241,245,241,241,241,245,241,245,241,245,241,245,241,245,241,245,241,245,241,245,245,241,245,241,241,241,245,241,245,241,245,241,245,241,245,241,245,241,240,0,0,240,246,240,240,246,240,246,240,246,240,246,240,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,246,240,246,246,246,246,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,246,240,240,246,240,246,240,246,240,246,240,246,0,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[3,4],5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[5,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,6],14],[[7,7],14],0,0,0,0,0,[[],6],[[],[[15,[6]]]],[[],[[15,[7]]]],[[],[[15,[8]]]],[[],[[15,[9]]]],[[],[[15,[10]]]],[[],[[15,[11]]]],[[],[[15,[12]]]],[[],[[15,[13]]]],[[],[[15,[5]]]],0,[5,4],0,0,[[6,6],3],[[7,7],3],[[9,9],3],[[10,10],3],[[11,11],3],[[12,12],3],[[13,13],3],[[5,5],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,[[6,16],17],[[6,16],17],[[7,16],17],[[7,16],17],[[8,16],17],[[9,16],17],[[10,16],17],[[11,16],17],[[11,16],17],[[12,16],17],[[12,16],17],[[13,16],17],[[5,16],17],0,[[]],[18,7],[[]],[19,7],[9,8],[13,8],[20,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,[[15,[6]]]],[21,6],[[],22],[[],22],0,0,[6],[7],[8,23],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,6],[[2,[14]]]],[[7,7],[[2,[14]]]],0,0,0,0,[[],6],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,15],[7,15],[8,15],[9,15],[10,15],[11,15],[12,15],[13,15],[5,15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1],[[]],[[]],[[]],[[]],[[],2],[[],2],0,[20,20],[[]],[[],[[15,[20]]]],[[20,20],3],[[20,16],17],[[]],[[]],[[],2],[[]],0,[[]],[[]],[[]],[[]],0,[20,15],[20,[[15,[25,26]]]],[[]],[27,[[28,[20]]]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[[],29],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,0,0,0,[[],30],[31],0,[[],32],0,[[33,16],17],[[33,16],17],0,[[]],[[]],[[]],[[]],[[]],[34,33],[[],[[2,[35]]]],[[],36],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[37],[[],3],[[],3],[[],38],0,0,0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],0,[[],39],0,0,0,0,0,0,0,[[]],[40,2],0,[[],41],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[42],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],0,0,0,[[],41],[33,[[2,[43]]]],0,0,0,[[],19],0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[[2,[44]]],[[2,[44]]]],[44,29],[45,46],[45,[[48,[47]]]],[45,[[49,[47]]]],[45,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[44,44],[[]],[50],[45,30],[[],30],0,[[],45],[[],[[15,[44]]]],[[44,44],3],0,0,0,0,[[45,16],17],[[44,16],17],[[]],[[]],[[]],[[]],0,[45],[[]],[[]],[[]],[[]],[51],[[]],[45,41],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[],52],[[],45],[[]],[50,2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45],[[45,41]],[50,[[2,[44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,15],[45],[[]],[[45,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[45,[2,[[54,[44]]]]],29],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45,[[2,[55]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1],0,[[[2,[[57,[56]]]]],[[2,[58]]]],[58,29],[58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[58,58],[[]],[[],30],0,[[58,58],3],[[58,16],17],[[]],[[]],[[]],[[[59,[56]]],58],[[58,41],56],0,[[]],[[]],[[]],[[]],[60],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[61,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[[],2],[62,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[62,62],[[]],[[],30],[[],[[15,[62]]]],[[62,62],3],[[62,16],17],[63,62],[[]],[[]],[[],2],[[]],[[],52],[[64,64,64],62],[[]],[[]],[[]],[[]],[[]],[62,15],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[1],[[],[[2,[65]]]],[65,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[65,65],[[]],[[65,65],14],[[],30],[[],65],[[],[[15,[65]]]],[[65,65],3],[[],3],[[65,16],17],[[]],[[],22],[65],[[]],[[],2],[[]],[[],52],[[]],[[]],[[]],[[65,65],[[2,[14]]]],[[]],[[]],[65,15],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,[1],[[],[[2,[66]]]],[66,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[66,66],[[]],[[],30],[[],[[15,[66]]]],[[66,66],3],[[],3],[[66,16],17],[[]],[[],66],[[56,56,56],66],[[56,56,56,56],66],[[]],[[],2],[[]],[[],52],[[]],[[]],[[]],[[]],[[]],[66,15],[66],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[[2,[67]]],[[2,[67]]]],[[[2,[68]]],[[2,[68]]]],[[[2,[69]]],[[2,[69]]]],[[],2],[[[2,[70]]],[[2,[70]]]],[67,29],[68,29],[69,29],[71,29],[70,29],[72,46],[73,46],[74,46],[75,46],[72,[[48,[47]]]],[73,[[48,[47]]]],[74,[[48,[47]]]],[75,[[48,[47]]]],[72,[[49,[47]]]],[73,[[49,[47]]]],[74,[[49,[47]]]],[75,[[49,[47]]]],[72,46],[73,46],[74,46],[75,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,0,[67,67],[76,76],[71,71],[[]],[[]],[[]],0,[77],[78],[79],[80],[[],30],[72,30],[[],30],[73,30],[[],30],[74,30],[[],30],[[],30],[75,30],0,0,0,0,[[],67],[[],72],[[],76],[[],73],[[],74],[[],71],[[],75],[[],[[15,[67]]]],[[],[[15,[76]]]],[[],[[15,[71]]]],[[67,67],3],[[76,76],3],[[71,71],3],[[],3],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[67,16],17],[[72,16],17],[[76,16],17],[[73,16],17],[[74,16],17],[[71,16],17],[[75,16],17],[[]],[[]],[[]],[[]],[[]],[69,76],[[]],[[]],[[]],[[]],[76,69],[[]],[[]],[[]],[[]],[[]],[[[59,[70]]],71],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[72],[73],[74],[75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81],[[]],[82],[[]],[83],[[]],[84],[[]],0,0,0,0,0,0,0,[72,41],[73,41],[74,41],[75,41],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[[],72],[[],73],[[],74],[[],75],[[]],[[]],[[]],[[]],[[]],[77,2],[78,2],[79,2],[80,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72],[73],[74],[75],[[72,41]],[[73,41]],[[74,41]],[[75,41]],[77,[[2,[67]]]],[78,[[2,[68]]]],[79,[[2,[69]]]],[80,[[2,[70]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67,15],[76,15],[71,15],[72],[73],[74],[75],[[]],[[]],[[]],[[72,53],29],[[73,53],29],[[74,53],29],[[75,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[72,[2,[[54,[67]]]]],29],[[73,[2,[[54,[68]]]]],29],[[74,[2,[[54,[69]]]]],29],[[75,[2,[[54,[70]]]]],29],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72,[[2,[55]]]],[73,[[2,[55]]]],[74,[[2,[55]]]],[75,[[2,[55]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[[],2],[85,29],[86],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[87,87],[85,85],[88,88],[89,89],[86,86],[90,90],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[85,19],[90,18],[85,19],[[],[[15,[87]]]],[[],[[15,[85]]]],[[],[[15,[88]]]],[[],[[15,[89]]]],[[],[[15,[86]]]],[[],[[15,[90]]]],[[87,87],3],[[85,85],3],[[88,88],3],[[89,89],3],[[86,86],3],[[90,90],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[87,16],17],[[85,16],17],[[88,16],17],[[88,16],17],[[89,16],17],[[86,16],17],[[86,16],17],[[90,16],17],[85,[[2,[86]]]],[[]],[[]],[[]],[[]],[[]],[[]],[56,[[15,[87,19]]]],[41,88],[3,90],[85,91],[18,[[15,[85]]]],[18,[[15,[86]]]],[[86,90],85],[85,[[2,[90]]]],[[]],[[]],[[]],[[]],[[]],[[]],[87,18],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[[89,88],86],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,[[2,[86]]]],[85,[[15,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[87,15],[85,15],[88,15],[89,15],[86,15],[90,15],[87,18],0,[[]],[[]],[[]],[[]],[[]],[[]],[85,91],[[],19],[[],19],[[],15],[56,[[92,[87]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,[[2,[86]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1],[[],[[2,[93]]]],[93,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[93,93],[[]],[[93,93],14],[[],30],[[],[[15,[93]]]],[[93,93],3],[[],3],[[93,16],17],[[93,16],17],[[]],[[],22],[93],[[]],[93,3],[93,3],[[],2],[[]],[[],52],[[]],[[]],[[]],[[93,93],[[2,[14]]]],[[]],[[]],[93,15],[93,[[2,[93]]]],[[]],[[],19],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,[1],[[],[[2,[94]]]],[94,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[94,94],[[]],[[94,94],14],[[],30],[[],94],[[],[[15,[94]]]],[[94,94],3],[[],3],[[94,16],17],[[]],[[],22],[94],[[]],[[],2],[[]],[[],52],[[]],[[]],[[]],[[94,94],[[2,[14]]]],[[]],[[]],[94,15],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,[1],[[],[[2,[95]]]],[95,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[95,95],[[]],[[],30],[[],[[15,[95]]]],[[95,95],3],[[],3],[[95,16],17],[[]],[19,95],[[]],[[],2],[[]],[[],52],[[]],[[]],[[]],[[]],[[]],[95,15],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,[1],[1],[[],2],[[],2],[96,29],[97,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[96,96],[97,97],[[]],[[]],[[],30],[[],30],[[],[[15,[96]]]],[[],[[15,[97]]]],[[96,96],3],[[97,97],3],[[96,16],17],[[97,16],17],[[]],[59,96],[[]],[59,97],[[]],[[]],[[],2],[[],2],[[]],[[]],[[],52],[[],52],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[96,15],[97,15],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[[],2],[98,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[98,98],[[]],[[],30],[[],[[15,[98]]]],[[98,98],3],[[98,16],17],[[],98],[[]],[91,98],[98],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[98,15],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],0,0,0,[[],2],[[[2,[99]]],[[2,[99]]]],[[],2],[[[2,[100]]],[[2,[100]]]],[[[2,[101]]],[[2,[101]]]],[[[2,[102]]],[[2,[102]]]],[[],29],[99,29],[103,29],[100,29],[101,29],[102,29],[104,46],[105,46],[106,46],[107,46],[104,[[48,[47]]]],[105,[[48,[47]]]],[106,[[48,[47]]]],[107,[[48,[47]]]],[104,[[49,[47]]]],[105,[[49,[47]]]],[106,[[49,[47]]]],[107,[[49,[47]]]],[104,46],[105,46],[106,46],[107,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[108,108],[99,99],[103,103],[101,101],[102,102],[[]],[[]],[[]],[[]],[[]],[[108,108],14],[109],[110],[[],30],[104,30],[[],30],[[],30],[[],30],[105,30],[106,30],[[],30],[107,30],[[],30],0,0,0,0,[[],104],[[],105],[[],106],[[],107],[[],[[15,[108]]]],[[],[[15,[99]]]],[[],[[15,[103]]]],[[],[[15,[101]]]],[[],[[15,[102]]]],[[108,108],3],[[99,99],3],[[103,103],3],[[101,101],3],[[102,102],3],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[108,16],17],[[111,16],17],[[111,16],17],[[104,16],17],[[99,16],17],[[103,16],17],[[105,16],17],[[106,16],17],[[101,16],17],[[101,16],17],[[107,16],17],[[102,16],17],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[103,100],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],0,0,[108],[101],0,0,0,[104],[105],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[112],[[]],[113],[[]],[114],[[]],[115],[[]],[104,41],[105,41],[106,41],[107,41],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[102,108],0,0,0,[[],52],[[],104],[[],105],[[],106],[[],107],[[]],[[]],[[]],[[]],[[]],[[]],[109,2],[110,2],[116,2],[117,2],0,[99,41],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[108,108],[[2,[14]]]],0,[42],[104],[105],[106],[107],[[],108],[[104,41]],[[105,41]],[[106,41]],[[107,41]],[109,[[2,[99]]]],[110,[[2,[100]]]],[99,[[15,[111]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,15],[99,15],[103,15],[101,15],[102,15],[104],[105],[106],[107],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],0,0,[[104,53],29],[[105,53],29],[[106,53],29],[[107,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[100,[[92,[103]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[104,[2,[[54,[99]]]]],29],[[105,[2,[[54,[100]]]]],29],[[106,[2,[[54,[101]]]]],29],[[107,[2,[[54,[102]]]]],29],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[104,[[2,[55]]]],[105,[[2,[55]]]],[106,[[2,[55]]]],[107,[[2,[55]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1],[[],[[2,[23]]]],[23,29],[23,118],[[]],[[]],[[]],[[]],[[],2],[[],2],[23,23],[[]],[[23,23],14],[[],30],[[],[[15,[23]]]],[[23,23],3],[[],3],[[23,16],17],[[23,16],17],[[]],[[],22],[23],[[]],[[],2],[[]],[[],52],[[]],[[]],[[]],[[23,23],[[2,[14]]]],[[],23],[[]],[[]],[23,15],[23,19],[[]],[[],19],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[1],[1],[[[2,[119]]],[[2,[119]]]],[[[2,[120]]],[[2,[120]]]],[119,29],[120,29],[121,46],[122,46],[121,[[48,[47]]]],[122,[[48,[47]]]],[121,[[49,[47]]]],[122,[[49,[47]]]],[121,46],[122,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[119,119],[120,120],[[]],[[]],[123],[124],[[],30],[121,30],[[],30],[122,30],0,0,[[],121],[[],122],[[119,119],3],[[120,120],3],0,0,0,0,0,0,0,0,0,0,[[119,16],17],[[121,16],17],[[120,16],17],[[122,16],17],[[],119],[125,119],[[]],[[]],[[]],[[]],[63,120],[[]],[[],120],[[]],[[]],[[]],0,0,[121],[122],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[126],[[]],[127],[[]],[121,41],[122,41],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[[],52],[[64,64],119],[[],121],[[64,64,64],120],[[],122],[[]],[[]],[123,2],[124,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121],[122],[[121,41]],[[122,41]],[123,[[2,[119]]]],[124,[[2,[120]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121],[122],[[]],[[]],[[121,53],29],[[122,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[121,[2,[[54,[119]]]]],29],[[122,[2,[[54,[120]]]]],29],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121,[[2,[55]]]],[122,[[2,[55]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[1],[[],2],[128,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[128,128],[[]],[[],30],[[],128],[[],[[15,[128]]]],[[128,128],3],[[128,16],17],[[]],[129,128],[[]],[[],2],[[]],[[],52],[[64,64,64,64],128],[[]],[[]],[[]],[[]],[[]],[128,15],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],0,[[]],[[]],0,0,0,0,[1],[[],[[2,[130]]]],[130,29],[[]],[[]],[[]],[[]],[[],2],[[],2],[130,130],[[]],[[],30],[[130,16],17],[[]],[[]],[[],2],[[]],[[],52],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],0,[[[2,[131]]],[[2,[131]]]],[131,29],[132,46],[132,[[48,[47]]]],[132,[[49,[47]]]],[132,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[131,131],[[]],[132,30],[[],30],0,[[],132],[[131,131],3],[[132,16],17],[[131,16],17],[[]],[[]],[[]],[[]],[[64,64,64,64],131],[131,64],0,[[]],[[]],[[]],[[]],[133],[[]],[132,41],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[],52],[[],132],[[]],[134,2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132],[[132,41]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132],[[]],[131],[[132,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[132,[2,[[54,[131]]]]],29],[[],24],[[],24],[[],24],[[],24],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[132,[[2,[55]]]],[[]],[[]],[[]],[[]],[131,64],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],[1],[[],[[2,[135]]]],[[[2,[136]]],[[2,[136]]]],[135,29],[136,29],[137,46],[137,[[48,[47]]]],[137,[[49,[47]]]],[137,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[135,135],[136,136],[[]],[[]],[138],[[],30],[[],30],[137,30],0,[[],137],0,0,[[135,16],17],[[136,16],17],[[137,16],17],[[]],[139,135],[[]],[[]],[[]],[[]],0,[137],[[]],[[]],[[]],[[]],[[]],[140],[[]],[137,41],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[],52],[[],52],[[],137],[[]],[[]],[138,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[137],[[137,41]],[138,[[2,[136]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[137],[[]],[[]],[[137,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[137,[2,[[54,[136]]]]],29],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[137,[[2,[55]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[2,[141]]],[[2,[141]]]],[141,29],[142,46],[142,[[48,[47]]]],[142,[[49,[47]]]],[142,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[143],[[],30],[142,30],0,[[],142],0,0,0,0,0,0,[[141,16],17],[[142,16],17],[[]],[[]],[[]],[[]],0,[142],[[]],[[]],[[]],[[]],[144],[[]],[142,41],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[],52],[[],142],[[]],[143,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[142],[[142,41]],[143,[[2,[141]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[142],[[142,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[142,[2,[[54,[141]]]]],29],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[142,[[2,[55]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],0,0,[[],2],[[[2,[145]]],[[2,[145]]]],[[[2,[146]]],[[2,[146]]]],[[[2,[39]]],[[2,[39]]]],[[[2,[147]]],[[2,[147]]]],[[],29],[145,29],[146,29],[39,29],[147,29],[148,46],[149,46],[150,46],[151,46],[148,[[48,[47]]]],[149,[[48,[47]]]],[150,[[48,[47]]]],[151,[[48,[47]]]],[148,[[49,[47]]]],[149,[[49,[47]]]],[150,[[49,[47]]]],[151,[[49,[47]]]],[148,46],[149,46],[150,46],[151,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[36,36],[145,145],[146,146],[39,39],[147,147],[[]],[[]],[[]],[[]],[[]],[[36,36],14],[152],[153],0,[[],30],[148,30],[[],30],[149,30],[[],30],[150,30],[[],30],[[],30],[151,30],0,0,0,0,[[],148],[[],149],[[],150],[[],151],[22,146],[[],[[15,[36]]]],[[],[[15,[146]]]],[[],[[15,[39]]]],[[],32],[147,32],[[36,36],3],[[145,145],3],[[146,146],3],[[39,39],3],[[147,147],3],[[154,154],3],[[],3],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[36,16],17],[[148,16],17],[[145,16],17],[[149,16],17],[[146,16],17],[[146,16],17],[[150,16],17],[[39,16],17],[[147,16],17],[[151,16],17],[[154,16],17],[[154,16],17],[[155,16],17],[[155,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[156,154],[[]],[157,155],[158,155],[[]],[159,[[15,[147,155]]]],[[[160,[159]]],[[15,[147,155]]]],[[],[[2,[35]]]],[147,[[2,[35]]]],[[],22],0,0,[36],[22,146],[[],36],[147,36],0,0,[149],[151],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[161],[[]],[162],[[]],[163],[[]],[164],[[]],[[],3],[147,3],[[],3],[147,3],[148,41],[149,41],[150,41],[151,41],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],39],[147,39],0,0,[[],52],0,[[22,19],146],[[],148],[[],149],[[],150],[[36,[59,[146]],145,39,[2,[64]]],147],[[],151],[[]],[[]],[[]],[[]],[[]],[165,2],[152,2],[166,2],[153,2],[[],41],[147,41],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,36],[[2,[14]]]],[42],[42],[148],[149],[150],[151],[[],36],[[148,41]],[[149,41]],[[150,41]],[[151,41]],[152,[[2,[146]]]],[153,[[2,[147]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,15],[146,15],[39,15],[[]],[147],0,[148],[149],[150],[151],0,[[],41],[147,41],[154,[[2,[43]]]],[155,[[2,[43]]]],[[[59,[56]]],[[15,[147,155]]]],[[[168,[167]]],[[15,[147,155]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[148,53],29],[[149,53],29],[[150,53],29],[[151,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[171,[169,170]]],[[15,[147]]]],[[[173,[172,170]]],[[15,[147]]]],[[[173,[174,170]]],[[15,[147]]]],[[[171,[174,170]]],[[15,[147]]]],[[[173,[169,170]]],[[15,[147]]]],[[[173,[56,170]]],[[15,[147]]]],[[[173,[175,170]]],[[15,[147]]]],[[[171,[175,170]]],[[15,[147]]]],[[[171,[176,170]]],[[15,[147]]]],[[],15],[[[173,[176,170]]],[[15,[147]]]],[[[171,[177,170]]],[[15,[147]]]],[[[173,[177,170]]],[[15,[147]]]],[[[173,[139,170]]],[[15,[147]]]],[[[173,[64,170]]],[[15,[147]]]],[[[171,[22,170]]],[[15,[147]]]],[[[171,[56,170]]],[[15,[147]]]],[[[171,[64,170]]],[[15,[147]]]],[[[171,[139,170]]],[[15,[147]]]],[[[173,[22,170]]],[[15,[147]]]],[[[171,[172,170]]],[[15,[147]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[148,[2,[[54,[145]]]]],29],[[149,[2,[[54,[146]]]]],29],[[150,[2,[[54,[39]]]]],29],[[151,[2,[[54,[147]]]]],29],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,[22,146],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[148,[[2,[55]]]],[149,[[2,[55]]]],[150,[[2,[55]]]],[151,[[2,[55]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,146],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],[[[2,[178]]],[[2,[178]]]],[178,29],[179,46],[179,[[48,[47]]]],[179,[[49,[47]]]],[179,46],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[178,178],[[]],[180],[[],30],[179,30],0,[[],179],[[178,178],3],[[],3],0,0,0,0,[[178,16],17],[[179,16],17],[[]],[[]],[[]],[[]],[[[160,[19]]],178],0,[179],[[]],[[]],[[]],[[]],[181],[[]],[179,41],0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[],52],[[[160,[19]],[2,[19]]],178],[[],179],[[]],[180,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[179],[[179,41]],[180,[[2,[178]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[179],[[]],[[179,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[179,[2,[[54,[178]]]]],29],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[179,[[2,[55]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],0,[[[2,[182]]],[[2,[182]]]],[[[2,[183]]],[[2,[183]]]],[[[2,[184]]],[[2,[184]]]],[182,29],[183,29],[184,29],[185,46],[186,46],[187,46],[185,[[48,[47]]]],[186,[[48,[47]]]],[187,[[48,[47]]]],[185,[[49,[47]]]],[186,[[49,[47]]]],[187,[[49,[47]]]],[185,46],[186,46],[187,46],[183,[[2,[64]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[182,188],[182,182],[183,183],[184,184],[[]],[[]],[[]],[189],[190],[185,30],[[],30],[186,30],[[],30],[187,30],[[],30],0,0,0,[[],185],[[],182],[[],186],[[],187],[[],[[15,[182]]]],[[],[[15,[183]]]],[[],[[15,[184]]]],[[182,182],3],[[183,183],3],[[184,184],3],0,0,0,0,0,0,0,0,[[185,16],17],[[182,16],17],[[186,16],17],[[183,16],17],[[187,16],17],[[184,16],17],[183,[[2,[64]]]],[183,191],[183,[[2,[64]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[185],[186],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[192],[[]],[193],[[]],[194],[[]],[185,41],[186,41],[187,41],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[[],185],[[],186],[[],187],[[]],[[]],[[]],[188,182],[188,182],[189,2],[190,2],[195,2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[182,188],[183,125],[185],[186],[187],[[185,41]],[[186,41]],[[187,41]],[183,[[2,[125]]]],0,[189,[[2,[182]]]],[190,[[2,[183]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[182,15],[183,15],[184,15],[185],[186],[187],[[]],[[]],[[]],0,[[185,53],29],[[186,53],29],[[187,53],29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[185,[2,[[54,[182]]]]],29],[[186,[2,[[54,[183]]]]],29],[[187,[2,[[54,[184]]]]],29],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[185,[[2,[55]]]],[186,[[2,[55]]]],[187,[[2,[55]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[1],[1],[1],[[],[[2,[191]]]],[[],[[2,[196]]]],[[],[[2,[197]]]],[191,29],[196,29],[197,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[191,191],[196,196],[197,197],[[]],[[]],[[]],[[],30],[[],30],[[],30],[[],191],[[],196],[[],197],[[],[[15,[191]]]],[[],[[15,[196]]]],[[],[[15,[197]]]],[[191,191],3],[[196,196],3],[[197,197],3],[[191,16],17],[[191,16],17],[[196,16],17],[[196,16],17],[[197,16],17],[[197,16],17],[[],191],[[]],[125,191],[[],196],[[]],[63,196],[[]],[191],[196],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[],52],[[],52],[[64,64,64],196],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[191,15],[196,15],[197,15],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[197,64],[[]],[[]],[[]],[[]],[[]],[[]],[191,64],[196,64],[197,64],[191,64],[196,64],[197,64],[196,64],[197,64],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[35,139],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[198,198],[199,199],[32,32],[35,35],[[]],[[]],[[]],[[]],[[],[[15,[198]]]],[[],[[15,[199]]]],[[],[[15,[32]]]],[[],[[15,[35]]]],[[198,198],3],[[199,199],3],[[32,32],3],[[35,35],3],[[],3],[[198,16],17],[[199,16],17],[[32,16],17],[[32,16],17],[[35,16],17],[[35,16],17],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[198,15],[199,15],[32,15],[35,15],[32,22],[[]],[[]],[[]],[[]],[[],19],[[],19],0,[35,[[2,[176]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[200],[201],[41,[[59,[66]]]],[41,[[59,[93]]]],[53,[[59,[93]]]],[41,[[59,[19]]]],[41,[[59,[119]]]],[41,[[59,[131]]]],[41,[[59,[196]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[38,202],[[15,[203]]]],0,[[204,16],17],[[204,16],17],[[]],[[]],[205,204],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[206,[[15,[[208,[[207,[206]]]],204]]]],[[[208,[209]]],2],[[]],[[]],[[]],[[]],[42],[[]],[[]],[[]],[[]],[204,[[2,[43]]]],[[],19],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[[210,[202]],8],[[15,[203]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[38,202],[[15,[203]]]],[[[210,[202]]],[[15,[203]]]],[[203,16],17],[[203,16],17],[[]],[211,203],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[202,[[15,[[210,[202]],203]]]],[[]],[[]],[[]],[[]],[42],[[]],[[]],[[]],[[]],[203,[[2,[43]]]],[[],19],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[212,212],[213,213],[[]],[[]],[[[0,[214,215]]]],[[212,212],3],[[213,213],3],[[],3],[[],3],[213,22],[[212,16],17],[[213,16],17],[[]],[[]],[[],22],[[],22],[214,22],[212],[[[0,[214,215]]],212],[[[0,[214,215]]],213],[213],[212,22],[213,22],[[214,118],22],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[213,22],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[216,216],[217,217],[218,218],[[]],[[]],[[]],[[216,216],14],[[217,217],14],[[],[[15,[216]]]],[[],[[15,[217]]]],[[216,216],3],[[217,217],3],[[218,218],3],[[],3],[[],3],[[],3],[218,22],[[216,16],17],[[216,16],17],[[217,16],17],[[218,16],17],[[]],[19,216],[18,216],[[]],[[]],[[],22],[[],22],[[],22],[216],[216,218],[217],[218],[216,218],[218,22],[[]],[[]],[[]],[217,3],[218,3],[218,3],[217,41],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[216,216],[[2,[14]]]],[[217,217],[[2,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[218,22],[216,15],[217,15],[[]],[[]],[[]],[[],19],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[219,219],[27,27],[[]],[[]],0,[219,30],0,[[220,221],[[28,[[59,[219]]]]]],[[220,221],[[28,[25]]]],[[],222],[[27,52],[[2,[41]]]],[[26,16],17],[[26,16],17],[[219,16],17],[[27,16],17],[[27,16],17],[223,26],[[]],[224,26],[225,26],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],0,[[],52],[219,52],0,[[52,[226,[169]]],219],[[23,4,25,[59,[219]]],27],[[52,30],219],[[52,47],219],[27,41],[[219,41],[[2,[41]]]],[[27,41],[[2,[41]]]],[219,41],[27,41],[[]],[[]],[[]],[[]],[[]],[[]],[38],[42],[[]],[[]],[[]],[[]],[[]],[[]],[26,[[2,[43]]]],0,[[]],[[]],[[],19],[[],19],[27,28],[23,[[28,[27]]]],[23,[[28,[27]]]],[23,[[28,[27]]]],[[],15],[[],[[28,[219]]]],[[],15],[59,[[28,[219]]]],[[[59,[227]]],[[28,[219]]]],[20,[[28,[27]]]],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],0,[219,[[49,[47]]]],[219,226],[[]],[[]],[[]],[[[49,[47]]],[[226,[169]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],[[],2],[[],2],[228,228],[[]],[[228,228],14],0,0,0,[[],[[15,[228]]]],0,0,0,[[228,228],3],[[],3],[[228,16],17],[[228,16],17],[216,228],[19,228],[[]],[18,228],[[],22],[228],0,[[]],[[],2],[[]],[[]],[[]],[18,[[15,[[59,[228]],224]]]],0,[[228,228],[[2,[14]]]],0,0,[[]],[[]],[228,15],[[]],[[],19],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,[1],[52,18],[52,18],[[]],[[]],[52,18],[[]],[[]],[[],2],[[],2],[52,52],[[]],[[52,52],14],[52,18],[[],[[15,[52]]]],[[52,18],3],[[52,52],3],[[],3],[[52,16],17],[[52,16],17],[[]],[19,52],[18,52],[52,18],[[],22],[52],[52,22],[[]],[[],2],[[]],[18,52],[[]],[[]],[[52,52],[[2,[14]]]],[[]],[[]],[52,15],[52,18],[[]],[[],19],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,[1],[[]],[[]],[[]],[[]],[[],2],[[],2],[229,229],[[]],[229,52],0,[[],[[15,[229]]]],[229,4],0,[[229,229],3],[[],3],[[229,16],17],[[]],[[],22],[229],[[]],[[],2],[[]],[[4,52],229],[[]],[[]],[[]],[[]],[229,15],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,0,[1],[1],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[230,230],[4,4],[[]],[[]],[[4,4],14],[231,[[15,[4]]]],[[230,230],3],[[4,4],3],[[],3],[[],3],[[230,16],17],[[4,16],17],[[4,16],17],[[]],[232,4],[[[59,[228]]],4],[[],4],[18,4],[19,4],[[]],[53,4],[[],22],[[],22],[230],[4,230],[4],0,[230,22],[4,22],[[]],[[]],[[4,4],3],[[4,4],3],[230,3],[4,3],[230,3],[4,38],[[4,4],4],[4,[[2,[228]]]],[4,41],[[],2],[[],2],[[]],[[]],[[[59,[228]]],4],[[]],[[]],[[]],[[]],[4,[[2,[4]]]],[[4,4],[[2,[14]]]],0,[[],4],[[]],[[]],[[]],[[]],[[4,233],15],[[]],[[]],[[],19],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[232],[[]],[[]],[[]],[[]],[[],2],[[],2],[232,232],[[]],[[232,232],14],[[],[[15,[232]]]],[[232,232],3],[[],3],[[232,16],17],[[232,16],17],[[]],[[],232],[[],22],[232],[[]],[232,3],[232,38],[232,[[2,[228]]]],[232,41],[[],2],[[]],[[[59,[228]]],232],[[]],[[]],[232,[[2,[232]]]],[[232,232],[[2,[14]]]],0,[[232,228]],[[],232],[[]],[[]],[232,15],[[]],[[],19],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[224,224],3],[[],3],[[224,16],17],[[224,16],17],[[]],[[]],[[],2],[[]],[[]],[[]],[18,[[15,[[59,[228]],224]]]],[18,[[15,[228,224]]]],[42],[[]],[[]],[[],19],[[],15],[[],15],[[],24],[18,[[15,[19,18]]]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[1],[1],[[201,234]],[[201,234]],[234,174],[234,64],[234,139],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[201,201],[234,234],[[]],[[]],[[201,201],14],[[234,234],14],[[],[[15,[201]]]],[[],[[15,[234]]]],[[201,201],3],[[234,234],3],[[],3],[[],3],[[234,16],17],[[201,16],17],[[234,16],17],[201,19],[[]],[200,201],[235,201],[235,234],[[]],[200,234],[174,234],[174,234],[174,201],[139,201],[64,234],[174,201],[[],22],[[],22],[201],[234],[[]],[[]],[201,3],[201,3],[[[236,[201]],64],201],[[],2],[[],2],[[]],[[]],[201,174],[234,234],[[],201],[[]],[[]],[[]],[[]],[[201,201],[[2,[14]]]],[[234,234],[[2,[14]]]],[[]],[[]],[[]],[[]],[201,15],[234,15],[[201,234]],[[201,201],234],[201,[[2,[237]]]],[[]],[[]],[[],19],[237,[[15,[201]]]],[238,[[15,[201]]]],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[1],[1],0,[[],2],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[25,25],[239,239],[[]],[[]],[[25,25],14],[[239,239],14],[[],30],[[],25],[[],[[15,[25]]]],[[],[[15,[239]]]],[[25,25],3],[[239,239],3],[[],3],[[],3],[[25,16],17],[[239,16],17],[[239,200],19],[[239,240],19],[[]],[[],25],[[]],[174,[[2,[239]]]],[53,25],[22,[[2,[239]]]],[[25,241],[[2,[200]]]],[[],22],[[],22],[25],[239,22],[239],[[25,241,200],[[2,[200]]]],[[]],[[]],[25],[25],[25,3],[25,3],[25,242],[[],2],[[],2],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[25,25],[[2,[14]]]],[[239,239],[[2,[14]]]],[[25,241],[[2,[200]]]],[[]],[[]],[[]],[[]],[25,15],[239,15],0,[[],25],0,[25,242],[25,242],[[]],[[]],[[],15],[[],15],[[],15],[[],15],0,[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[243],[[],2],[[],2],[[]],[[]],[244,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[1],[200,200],[[200,235]],[[200,200]],[[200,200]],[200,64],[200,139],[200,174],[[]],[[]],[[]],[[]],[[],2],[[],2],[200,200],[[]],[[200,200],14],[[],[[15,[200]]]],[[200,200],3],[[200,235],3],[[],3],[[200,16],17],[[]],[234,200],[201,200],[174,200],[174,200],[174,200],[174,200],[174,200],[[],22],[200],[[]],[200,3],[[],2],[[]],[200],[[]],[[]],[[200,235],[[2,[14]]]],[[200,200],[[2,[14]]]],[[]],[[]],[200,15],[[200,235]],[[200,200]],[[200,200]],[38,200],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]],0,0,[1],[1],[245,18],[245,18],[[]],[[]],[[]],[245,18],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[245,245],[241,241],[[]],[[]],[[245,245],14],[[241,241],14],[[],245],[[],241],[245,18],[[],[[15,[245]]]],[[],[[15,[241]]]],[[245,245],3],[[245,18],3],[[241,241],3],[[],3],[[],3],[[245,16],17],[[245,16],17],[[241,16],17],[[241,240],19],[18,245],[[]],[19,245],[[]],[[],22],[[],22],[245,22],[245],[241],[[]],[[]],[[],241],[[],2],[[],2],[[]],[[]],[241,245],0,[18,245],[[[160,[245]],239],241],[[[160,[245]]],241],[[[160,[245]]],241],[[]],[[]],[[]],[[]],[[245,245],[[2,[14]]]],[[241,241],[[2,[14]]]],[[]],[[]],[[]],[[]],[245,15],[241,15],[[]],[[]],[[],19],[[],15],[[],15],[[],15],[[],15],[241,239],0,[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[1],[1],[240,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[240,200],[[],2],[[],2],[[],2],[[],2],[240,240],[246,246],[[]],[[]],[[240,200],3],[[246,235],3],[[],[[15,[240]]]],[[],[[15,[246]]]],[[240,240],3],[[246,246],3],[[],3],[[],3],[[240,16],17],[[246,16],17],[[]],[240,246],[[]],[[]],[[]],[[246,235],139],[246,3],[246,235],[[246,139],235],[[],2],[[],2],[[]],[[]],0,0,0,0,[[200,200],240],[[[160,[235]],[160,[235]]],246],[[]],[[]],[[]],[[]],[[[160,[200]]],240],[[[160,[235]]],246],[[]],[[]],[[]],[[]],[240,15],[246,15],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],24],[[],24],[[240,240],240],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[235,235],[[235,200]],[[235,235]],[[235,235]],[235,64],[235,139],[[]],[[]],[[]],[[]],[235,200],[[],2],[[],2],[235,235],[[]],[[235,235],14],[[],[[15,[235]]]],[[235,200],3],[[235,235],3],[[],3],[235,200],[[235,16],17],[200,235],[139,235],[64,235],[174,235],[201,235],[234,235],[[]],[[],22],[235],[[]],[[],2],[[]],[[235,139]],[235],[[]],[[]],[[235,235],[[2,[14]]]],[[235,200],[[2,[14]]]],[235,200],[[]],[[]],[235,15],[[235,200]],[[235,235]],[[235,235]],[38,235],[[]],[[],15],[[],15],[[],24],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Private"],[4,"Option"],[15,"bool"],[3,"EntityPath"],[4,"PathOp"],[3,"RecordingId"],[3,"ApplicationId"],[4,"LogMsg"],[3,"BeginRecordingMsg"],[3,"RecordingInfo"],[3,"PythonVersion"],[4,"RecordingSource"],[3,"EntityPathOpMsg"],[4,"Ordering"],[4,"Result"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"],[3,"ArrowMsg"],[3,"Uuid"],[15,"u64"],[3,"MsgId"],[3,"TypeId"],[3,"TimePoint"],[4,"MsgBundleError"],[3,"MsgBundle"],[6,"Result"],[6,"Result"],[4,"DataType"],[3,"FIELDS"],[4,"TensorDataType"],[4,"FieldError"],[3,"TryFromSliceError"],[4,"TensorElement"],[3,"TensorId"],[3,"FastFixedSizeListArray"],[8,"Iterator"],[4,"TensorDataMeaning"],[3,"FastFixedSizeArrayIter"],[15,"usize"],[3,"Demand"],[8,"Error"],[3,"Arrow3D"],[3,"MutableArrow3DArray"],[8,"Any"],[8,"Array"],[3,"Arc"],[3,"Box"],[3,"Arrow3DArrayIterator"],[3,"Arrow3DArray"],[3,"ComponentName"],[8,"IntoIterator"],[8,"Borrow"],[3,"MutableBitmap"],[15,"u8"],[3,"Buffer"],[3,"BinaryBuffer"],[3,"Vec"],[3,"BufferBinaryArray"],[3,"BufferBinaryArrayIter"],[3,"Box3D"],[3,"Vec3"],[15,"f32"],[3,"ClassId"],[3,"ColorRGBA"],[3,"AnnotationInfo"],[3,"KeypointPairArrow"],[3,"ClassDescriptionArrow"],[3,"ClassMapElemArrow"],[3,"AnnotationContext"],[3,"MutableAnnotationInfoArray"],[3,"MutableKeypointPairArrowArray"],[3,"MutableClassDescriptionArrowArray"],[3,"MutableClassMapElemArrowArray"],[3,"ClassDescription"],[3,"AnnotationInfoArrayIterator"],[3,"KeypointPairArrowArrayIterator"],[3,"ClassDescriptionArrowArrayIterator"],[3,"ClassMapElemArrowArrayIterator"],[3,"AnnotationInfoArray"],[3,"KeypointPairArrowArray"],[3,"ClassDescriptionArrowArray"],[3,"ClassMapElemArrowArray"],[3,"ViewCoordinates"],[3,"SignedAxis3"],[4,"ViewDir"],[4,"Axis3"],[4,"Sign"],[4,"Handedness"],[3,"Mat3"],[6,"Result"],[3,"InstanceKey"],[3,"KeypointId"],[3,"Label"],[3,"LineStrip2D"],[3,"LineStrip3D"],[3,"Mat3x3"],[3,"RawMesh3D"],[3,"EncodedMesh3DArrow"],[4,"MeshFormat"],[4,"Mesh3D"],[3,"EncodedMesh3D"],[3,"MutableRawMesh3DArray"],[3,"MutableEncodedMesh3DArrowArray"],[3,"MutableMeshFormatArray"],[3,"MutableMesh3DArray"],[3,"MeshId"],[3,"RawMesh3DArrayIterator"],[3,"EncodedMesh3DArrowArrayIterator"],[4,"RawMeshError"],[3,"RawMesh3DArray"],[3,"EncodedMesh3DArrowArray"],[3,"MeshFormatArray"],[3,"Mesh3DArray"],[3,"MeshFormatArrayIterator"],[3,"Mesh3DArrayIterator"],[15,"u128"],[3,"Point2D"],[3,"Point3D"],[3,"MutablePoint2DArray"],[3,"MutablePoint3DArray"],[3,"Point2DArrayIterator"],[3,"Point3DArrayIterator"],[3,"Vec2"],[3,"Point2DArray"],[3,"Point3DArray"],[3,"Quaternion"],[3,"Quat"],[3,"Radius"],[4,"Rect2D"],[3,"MutableRect2DArray"],[3,"Rect2DArray"],[3,"Rect2DArrayIterator"],[3,"Scalar"],[3,"ScalarPlotProps"],[3,"MutableScalarPlotPropsArray"],[3,"ScalarPlotPropsArrayIterator"],[15,"f64"],[3,"ScalarPlotPropsArray"],[3,"Size3D"],[3,"MutableSize3DArray"],[3,"Size3DArrayIterator"],[3,"Size3DArray"],[4,"TensorData"],[3,"TensorDimension"],[3,"Tensor"],[3,"MutableTensorDataArray"],[3,"MutableTensorDimensionArray"],[3,"MutableTensorDataMeaningArray"],[3,"MutableTensorArray"],[3,"TensorDimensionArrayIterator"],[3,"TensorArrayIterator"],[4,"TensorCastError"],[4,"TensorImageError"],[3,"ShapeError"],[4,"ImageError"],[3,"Error"],[4,"DynamicImage"],[8,"Into"],[3,"TensorDataArray"],[3,"TensorDimensionArray"],[3,"TensorDataMeaningArray"],[3,"TensorArray"],[3,"TensorDataArrayIterator"],[3,"TensorDataMeaningArrayIterator"],[3,"Path"],[8,"AsRef"],[15,"i32"],[8,"Dimension"],[6,"ArrayView"],[15,"i8"],[6,"Array"],[15,"i64"],[15,"i16"],[15,"u16"],[15,"u32"],[3,"TextEntry"],[3,"MutableTextEntryArray"],[3,"TextEntryArrayIterator"],[3,"TextEntryArray"],[3,"Rigid3"],[3,"Pinhole"],[4,"Transform"],[3,"MutableRigid3Array"],[3,"MutablePinholeArray"],[3,"MutableTransformArray"],[3,"IsoTransform"],[3,"Rigid3ArrayIterator"],[3,"PinholeArrayIterator"],[3,"Vec2D"],[3,"Rigid3Array"],[3,"PinholeArray"],[3,"TransformArray"],[3,"TransformArrayIterator"],[3,"Vec3D"],[3,"Vec4D"],[3,"BBox2D"],[3,"Box3"],[3,"TimeInt"],[3,"Time"],[8,"Write"],[4,"EncodeError"],[4,"DecodeError"],[4,"Error"],[8,"Read"],[3,"BufReader"],[3,"Decoder"],[8,"BufRead"],[3,"Encoder"],[4,"Error"],[3,"Hash64"],[3,"Hash128"],[8,"Hash"],[8,"Copy"],[4,"Index"],[4,"BatchIndex"],[3,"IndexHash"],[3,"ComponentBundle"],[3,"Schema"],[3,"Chunk"],[3,"Field"],[4,"Infallible"],[4,"PathParseError"],[4,"Error"],[3,"ListArray"],[8,"SerializableComponent"],[4,"EntityPathPart"],[3,"ComponentPath"],[3,"EntityPathHash"],[8,"Deserializer"],[3,"EntityPathImpl"],[8,"Serializer"],[3,"Duration"],[3,"TimeReal"],[3,"RangeInclusive"],[3,"OffsetDateTime"],[3,"SystemTime"],[4,"TimeType"],[3,"TimeRange"],[3,"Timeline"],[8,"ExactSizeIterator"],[3,"TimePointArray"],[3,"TimePointIterator"],[3,"TimelineName"],[3,"TimeRangeF"],[8,"TensorDataTypeTrait"],[13,"RustSdk"],[3,"FixedSizeArrayField"],[8,"TensorTrait"],[13,"BadTensorShape"],[8,"Component"],[13,"BadEscape"]]},\
"re_memory":{"doc":"Run-time memory tracking and profiling.","t":[2,3,3,3,3,3,18,11,11,0,11,0,0,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,0,11,12,12,12,11,11,11,11,11,11,11,11,11,0,3,3,7,7,3,17,17,7,17,17,3,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,5,11,11,11,11,5,12,11,11,5,5,12,12,11,5,12,12,12,11,12,12,12,5,11,11,11,11,11,11,11,11,5,11,11,11,11,12,12,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,5,11,11,11,5,11,11,11,11,11,5,5,11,11,11,3,11,11,11,12,12,12,11,11,11,11,12,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,11,11,11,5,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,5],"n":["AccountingAllocator","BacktraceHash","CountAndSize","MemoryHistory","MemoryLimit","MemoryUse","ZERO","__clone_box","__clone_box","accounting_allocator","add","allocation_tracker","backtrace_native","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","counted","counted","counted_gpu","counted_store","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","get_hash","get_hash","hash","hash","into","into","limit","memory_history","memory_limit","memory_use","new","resident","resident","size","sub","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","util","AccountingAllocator","AtomicCountAndSize","BIG_ALLOCATION_TRACKER","GLOBAL_STATS","GlobalStats","IS_THREAD_IN_ALLOCATION_TRACKER","MAX_CALLSTACKS","MEDIUM_ALLOCATION_TRACKER","MEDIUM_SIZE","SMALL_SIZE","TrackingStatistics","add","alloc","alloc_zeroed","allocator","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","dealloc","default","from","from","from","from","fully_tracked","fully_tracked","global_allocs","into","into","into","into","is_tracking_callstacks","live","load","new","note_alloc","note_dealloc","overhead","overhead","realloc","set_tracking_callstacks","size","stochastically_tracked","stochastically_tracked","sub","top_callstacks","track_callstacks","track_size_threshold","tracking_stats","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","turn_on_tracking_if_env_var","type_id","type_id","type_id","type_id","untracked","untracked","zero","AllocationTracker","CallstackStatistics","PtrHash","ReadableBacktrace","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callstack_stats","clone","clone","clone","clone_into","clone_into","clone_into","eq","equivalent","extant","fmt","fmt","from","from","from","from","get_hash","hash","into","into","into","into","live_allocs","new","new","on_alloc","on_dealloc","readable","readable_backtrace","readable_backtraces","should_sample","stochastic_rate","stochastic_rate","to_owned","to_owned","to_owned","to_string","top_callstacks","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_stochastic_rate","Backtrace","backtrace_to_string","borrow","borrow_mut","format","format_backtrace_with_fmt","from","get_hash","hash","into","new_unresolved","shorten_source_file_path","trim_backtrace","try_from","try_into","type_id","MemoryHistory","borrow","borrow_mut","capture","counted","counted_gpu","counted_store","default","from","into","is_empty","resident","try_from","try_into","type_id","MemoryLimit","__clone_box","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","into","is_exceeded_by","limit","parse","to_owned","try_from","try_into","type_id","MemoryUse","__clone_box","borrow","borrow_mut","bytes_resident","capture","clone","clone_into","counted","eq","equivalent","fmt","from","into","resident","sub","to_owned","try_from","try_into","type_id","sec_since_start"],"q":["re_memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_memory::accounting_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_memory::allocation_tracker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_memory::backtrace_native","","","","","","","","","","","","","","","","re_memory::memory_history","","","","","","","","","","","","","","","re_memory::memory_limit","","","","","","","","","","","","","","","","","","","re_memory::memory_use","","","","","","","","","","","","","","","","","","","","re_memory::util"],"d":["","","Number of allocation and their total size.","Tracks memory use over time.","","","","","","Track allocations and memory use.","Add an allocation.","","","","","","","","","","","Number of allocations.","Bytes used by the application according to our own memory …","Bytes used by the application according to our own memory …","VRAM bytes used by the application according to its own …","Bytes used by the datastore according to its own …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Limit in bytes.","","","","","Bytes allocated by the application according to operating …","Bytes allocated by the application according to operating …","Number of bytes.","Remove an allocation.","","","","","","","","","","Install this as the global allocator to get memory usage …","","Statistics about extant allocations larger than <code>MEDIUM_SIZE</code>…","","","Used to prevent re-entrancy when tracking allocations.","","Statistics about some extant allocations larger than  …","Allocations smaller than are stochastically sampled.","Only track allocations of at least this size.","","Add an allocation.","","","","","","","","","","","","Number of allocations.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","All live allocations tracked by the large <code>AllocationTracker</code>…","All live largish allocations, fully tracked.","Total number of live allocations, and the number of live …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Are we doing (slightly expensive) tracking of the …","All extant allocations.","","","","","The live allocations done by <code>AllocationTracker</code> used for …","All live allocations used for internal book-keeping.","","Should we do (slightly expensive) tracking of the …","Number of bytes.","All live allocations sampled by the stochastic medium …","All live allocations sampled of medium size, …","Remove an allocation.","The most popular callstacks.","Do detailed statistics of allocations? This is expensive, …","Allocations smaller than these are left untracked.","Gather statistics from the live tracking, if enabled.","","","","","","","","","Turn on callstack tracking (slightly expensive) if a given …","","","","","The live allocations not tracked by any <code>AllocationTracker</code>.","All live allocations that we are NOT tracking (because …","","Track the callstacks of allocations.","Per-callstack statistics.","A hash of a pointer address.","Formatted <code>Backtrace</code>.","","","","","","","","","","","","How much memory is allocated by each callstack?","","","","","","","","","Live allocations at this callstack.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Current live allocations.","","","","","Human-readable backtrace.","For when we print this statistic.","De-duplicated readable backtraces.","","Sample every N allocations. Must be power-of-two.","If this was stochastically sampled - at what rate?","","","","","Return the <code>n</code> callstacks that currently is using the most …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Anonymize a path to a Rust source file from a callstack.","","","","","Tracks memory use over time.","","","Add data to history","Bytes used by the application according to our own memory …","VRAM bytes used by the application according to its own …","Bytes used by the datastore according to its own …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Bytes allocated by the application according to operating …","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns how large fraction of memory we should free to go …","Limit in bytes.","","","","","","","","","","According to the OS. This is what matters.","","","","Bytes used by the application according to our own memory …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Bytes allocated by the application according to operating …","","","","","","Returns monotonically increasing time in seconds."],"i":[0,0,0,0,0,0,2,2,4,0,2,0,0,2,4,2,4,2,4,2,4,2,30,33,30,30,2,2,4,2,4,2,4,2,4,2,4,2,4,2,4,32,0,0,0,4,30,33,2,2,2,4,2,4,2,4,2,4,0,0,0,0,0,0,0,0,0,0,0,0,12,14,14,14,12,36,19,14,12,36,19,14,12,14,14,12,36,19,14,36,19,0,12,36,19,14,0,36,12,14,0,0,36,19,14,0,12,36,19,12,19,36,19,0,12,36,19,14,12,36,19,14,0,12,36,19,14,36,19,12,0,0,0,0,21,22,23,24,21,22,23,24,21,22,23,24,21,22,23,21,22,23,21,21,23,21,22,24,21,22,23,21,21,24,21,22,23,24,21,22,24,24,22,23,24,24,24,23,21,22,23,22,24,24,21,22,23,24,21,22,23,24,21,22,23,24,0,0,9,9,9,0,9,9,9,9,9,0,0,9,9,9,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0],"f":[0,0,0,0,0,0,0,[1],[1],0,[[2,3]],0,0,[[]],[[]],[[]],[[]],[2,2],[4,4],[[]],[[]],0,0,0,0,0,[[],2],[[2,2],5],[[4,4],5],[[],5],[[],5],[[2,6],7],[[4,6],7],[[]],[[]],[[],8],[[],8],[2],[4],[[]],[[]],0,0,0,0,[9,4],0,0,0,[[2,3]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,[[12,3]],[[[14,[13]],15],16],[[[14,[13]],15],16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[14,[13]],16,15]],[[],[[14,[17]]]],[[]],[[]],[[]],[[]],0,0,[[],[[18,[2]]]],[[]],[[]],[[]],[[]],[[],5],0,[12,2],[[],14],[[16,3]],[[16,3]],0,0,[[[14,[13]],16,15,3],16],[5],0,0,0,[[12,3]],0,0,0,[[],[[18,[19]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[20],[[],11],[[],11],[[],11],[[],11],0,0,[[],12],0,0,0,0,[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[21,21],[22,22],[23,23],[[]],[[]],[[]],[[21,21],5],[[],5],0,[[21,6],7],[[22,6],7],[[]],[[]],[[]],[[]],[[],8],[21],[[]],[[]],[[]],[[]],0,[16,21],[9,22],[[24,21,3]],[[24,21,3]],0,0,0,[[24,21],5],0,0,[[]],[[]],[[]],[[],25],[[24,3],[[26,[23]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[3,24],0,[27,25],[[]],[[]],[9,[[28,[20]]]],[[27,6],7],[[]],[[],8],[9],[[]],[[],9],[29,25],[20,20],[[],10],[[],10],[[],11],0,[[]],[[]],[[30,[18,[31]],[18,[31]]]],0,0,0,[[],30],[[]],[[]],[30,5],0,[[],10],[[],10],[[],11],0,[1],[[]],[[]],[32,32],[[]],[[],32],[[32,32],5],[[],5],[[32,6],7],[[]],[[]],[[32,33],[[18,[34]]]],0,[20,[[10,[32,25]]]],[[]],[[],10],[[],10],[[],11],0,[1],[[]],[[]],[[],[[18,[31]]]],[[],33],[33,33],[[]],0,[[33,33],5],[[],5],[[33,6],7],[[]],[[]],0,[[33,33]],[[]],[[],10],[[],10],[[],11],[[],35]],"p":[[3,"Private"],[3,"CountAndSize"],[15,"usize"],[3,"BacktraceHash"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[3,"Backtrace"],[4,"Result"],[3,"TypeId"],[3,"AtomicCountAndSize"],[8,"GlobalAlloc"],[3,"AccountingAllocator"],[3,"Layout"],[15,"u8"],[8,"Default"],[4,"Option"],[3,"TrackingStatistics"],[15,"str"],[3,"PtrHash"],[3,"ReadableBacktrace"],[3,"CallstackStatistics"],[3,"AllocationTracker"],[3,"String"],[3,"Vec"],[3,"Backtrace"],[3,"Arc"],[3,"Path"],[3,"MemoryHistory"],[15,"i64"],[3,"MemoryLimit"],[3,"MemoryUse"],[15,"f32"],[15,"f64"],[3,"GlobalStats"]]},\
"re_query":{"doc":"Provide query-centric access to the <code>re_arrow_store</code>.","t":[13,13,13,3,3,13,13,4,6,13,11,11,11,11,11,11,12,0,11,11,11,0,11,11,11,11,11,5,11,12,11,11,11,12,11,11,12,12,11,0,5,5,0,5,11,11,11,11,11,11,11,11,11,0,12,0,11,11,11,12,12,5,5,5,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,14],"n":["ArrowError","BadAccess","ComponentNotFound","ComponentWithInstances","EntityView","PolarsError","PrimaryNotFound","QueryError","Result","TypeMismatch","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","components","dataframe_util","deref","deref_mut","drop","entity_view","fmt","fmt","from","from","from","get_component_with_instances","init","instance_keys","into","lossless_try_into","lossy_into","name","overflowing_as","overflowing_cast_from","phantom","primary","provide","query","query_entity_with_primary","query_primary_with_history","range","range_entity_with_primary","saturating_as","saturating_cast_from","source","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","util","values","visit","vzip","wrapping_as","wrapping_cast_from","actual","requested","df_builder1","df_builder2","df_builder3","fix_polars_nulls","iter_column","ComponentJoinedIterator","ComponentWithInstances","EntityView","__clone_box","__clone_box","as_df","as_df1","as_df2","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","component_instance_key_iter","component_value_iter","components","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","from_native","from_native","from_native2","has_component","init","init","init","instance_keys","into","into","into","into_iter","is_empty","iter_component","iter_instance_keys","iter_instance_keys","iter_primary","iter_primary_flattened","iter_values","len","lookup","lookup_arrow","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","name","name","next","next_component_instance_key","num_instances","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","phantom","primary","primary_instance_key_iter","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","splatted_component_value","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","values","visit1","visit2","visit3","visit4","visit5","visit6","visit7","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","__populate_example_store","get_component_with_instances","query_entity_with_primary","range_entity_with_primary","query_primary_with_history","create_visitor"],"q":["re_query","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_query::QueryError","","re_query::dataframe_util","","","","","re_query::entity_view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_query::query","","","re_query::range","re_query::util","re_query::visit"],"d":["","","","A type-erased array of <code>Component</code> values and the …","A view of an entity at a particular point in time returned …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Retrieves a <code>ComponentWithInstances</code> from the <code>DataStore</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Retrieve an <code>EntityView</code> from the <code>DataStore</code>","Either dispatch to <code>query_entity_with_primary</code> or …","","Iterates over the rows of any number of components and …","","","","","","","","","","","","Visit the primary and joined components of an <code>EntityView</code>","","","","","","","","","Make it so that our arrays can be deserialized again by …","Iterator for a single column in a dataframe as the …","Iterator over a single component joined onto a primary …","A type-erased array of <code>Component</code> values and the …","A view of an entity at a particular point in time returned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Produce a <code>ComponentWithInstances</code> from native component …","Helper function to produce an <code>EntityView</code> from rust-native …","Helper function to produce an <code>EntityView</code> from rust-native …","Check if the entity has a component and its not empty","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iterate over the values of a <code>Component</code>.","Iterate over the instance keys","Iterate over the instance keys","Iterate over the primary component values.","Iterate over the flattened list of primary component …","Iterate over the values and convert them to a native …","Number of values. 1 for splats.","Look up the value that corresponds to a given <code>InstanceKey</code> …","Look up the value that corresponds to a given <code>InstanceKey</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visit the primary component of an <code>EntityView</code>. See …","Visit the primary component of an <code>EntityView</code>. See …","Visit the primary component of an <code>EntityView</code>. See …","Visit the primary component of an <code>EntityView</code>. See …","Visit the primary component of an <code>EntityView</code>. See …","Visit the primary component of an <code>EntityView</code>. See …","Visit the primary component of an <code>EntityView</code>. See …","","","","","","","","","","Helper used to create an example store we can use for …","Retrieves a <code>ComponentWithInstances</code> from the <code>DataStore</code>.","Retrieve an <code>EntityView</code> from the <code>DataStore</code>","Iterates over the rows of any number of components and …","Either dispatch to <code>query_entity_with_primary</code> or …",""],"i":[3,3,3,0,0,3,3,0,0,3,3,3,3,3,3,3,16,0,3,3,3,0,3,3,3,3,3,0,3,12,3,3,3,12,3,3,16,16,3,0,0,0,0,0,3,3,3,3,3,3,3,3,3,0,12,0,3,3,3,39,39,0,0,0,0,0,0,0,0,12,16,12,16,16,37,12,16,37,12,16,37,12,16,37,12,16,37,12,16,37,12,16,12,16,12,16,37,37,16,37,12,16,37,12,16,37,12,16,12,16,16,37,12,16,12,16,16,16,37,12,16,12,37,12,16,37,12,16,12,16,16,16,12,12,12,12,37,12,16,37,12,16,12,12,37,37,16,37,12,16,37,12,16,16,16,37,37,12,16,37,12,16,37,12,16,16,37,12,16,37,12,16,37,12,16,37,12,16,37,12,16,12,16,16,16,16,16,16,16,37,12,16,37,12,16,37,12,16,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],1],0,0,[2],[2],[2],0,[[3,4],5],[[3,4],5],[6,3],[7,3],[[]],[[8,9,10,11],[[13,[12]]]],[[],2],0,[[]],[[],1],[[]],0,[[]],[[]],0,0,[14],0,[[8,9,10],[[13,[[16,[15]]]]]],[[8,17,18,19,10],[[13,[20]]]],0,[[8,21,10],20],[[]],[[]],[3,[[1,[22]]]],[[],23],[[],24],[[],24],[[],25],[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,[26,[[13,[27]]]],[[26,26],[[13,[27]]]],[[26,26,26],[[13,[27]]]],[28,[[29,[28]]]],[27,20],0,0,0,[30],[30],[12,[[13,[27]]]],[16,[[13,[27]]]],[16,[[13,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[12,12],[[[16,[[0,[31,15]]]]],[[16,[[0,[31,15]]]]]],[[]],[[]],0,0,0,[2],[2],[2],[2],[2],[2],[2],[2],[2],[[12,4],5],[[[16,[[0,[32,15]]]],4],5],[[[16,[15]],4],5],[[]],[[]],[[]],[[[1,[26]],26],[[13,[12]]]],[[],[[13,[[16,[[0,[33,34]]]]]]]],[[],[[13,[[16,[[0,[33,34]]]]]]]],[[[16,[[0,[33,34]]]]],35],[[],2],[[],2],[[],2],0,[[]],[[]],[[]],[[]],[12,35],[[[16,[[0,[33,34]]]]],[[13,[20]]]],[12,[[13,[20]]]],[[[16,[[0,[33,34]]]]],[[13,[20]]]],[[[16,[[0,[33,34]]]]],[[13,[20]]]],[[[16,[[0,[33,34]]]]],20],[12,[[13,[20]]]],[12,2],[[12,36],[[13,[34]]]],[[12,36],[[1,[[29,[28]]]]]],[[],1],[[],1],[[],1],[[]],[[]],[[]],[12,11],0,[37,[[1,[1]]]],0,[16,2],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[16,[[0,[33,34]]]],38],13],[[[16,[[0,[33,34]]]],38],13],[[[16,[[0,[33,34]]]],38],13],[[[16,[[0,[33,34]]]],38],13],[[[16,[[0,[33,34]]]],38],13],[[[16,[[0,[33,34]]]],38],13],[[[16,[[0,[33,34]]]],38],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[8,9,10,11],[[13,[12]]]],[[8,9,10],[[13,[[16,[15]]]]]],[[8,21,10],20],[[8,17,18,19,10],[[13,[20]]]],0],"p":[[4,"Option"],[15,"usize"],[4,"QueryError"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"PolarsError"],[3,"DataStore"],[3,"LatestAtQuery"],[3,"EntityPath"],[3,"ComponentName"],[3,"ComponentWithInstances"],[6,"Result"],[3,"Demand"],[8,"Component"],[3,"EntityView"],[3,"Timeline"],[3,"TimeInt"],[3,"ExtraQueryHistory"],[8,"Iterator"],[3,"RangeQuery"],[8,"Error"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Vec"],[3,"DataFrame"],[8,"Array"],[3,"Box"],[3,"Private"],[8,"Clone"],[8,"Debug"],[8,"SerializableComponent"],[8,"DeserializableComponent"],[15,"bool"],[3,"InstanceKey"],[3,"ComponentJoinedIterator"],[8,"FnMut"],[13,"TypeMismatch"]]},\
"re_renderer":{"doc":"Rerun’s renderer.","t":[2,18,18,18,18,18,6,3,4,13,13,13,13,13,18,18,18,18,18,3,6,3,3,8,18,18,18,18,13,3,18,18,18,18,18,18,3,3,3,3,18,18,6,3,3,3,3,18,18,18,18,18,3,18,11,11,11,11,12,11,11,11,0,11,11,12,12,11,11,11,11,12,10,11,11,11,11,12,0,5,5,5,5,5,5,0,0,12,0,11,11,0,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,0,12,10,0,0,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,11,11,0,12,5,11,11,0,14,11,11,11,11,12,11,11,11,11,11,11,11,11,12,0,11,0,12,11,11,11,5,12,12,12,12,12,12,12,12,12,12,0,12,11,11,10,0,12,12,0,12,11,11,12,0,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,0,12,0,0,2,2,0,2,2,0,3,3,3,18,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,18,2,2,3,12,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,13,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,11,11,11,11,3,18,3,18,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,6,8,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,14,11,11,11,11,11,12,14,11,11,11,11,11,11,5,11,11,3,3,3,18,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,0,7,3,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,8,7,3,3,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,3,3,11,12,12,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,12,5,0,0,5,5,5,5,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,3,3,3,3,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11,5,3,3,3,3,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,13,13,3,4,3,3,8,4,13,3,3,3,3,3,3,13,13,3,3,13,13,13,13,3,13,3,3,3,3,4,3,3,8,16,16,3,4,4,3,13,11,12,12,12,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,12,12,12,12,0,10,12,12,0,12,12,12,11,11,11,10,11,11,11,11,11,11,12,12,12,12,11,11,0,12,11,12,12,12,11,12,12,12,0,12,0,12,11,12,12,12,12,0,12,12,11,0,12,12,12,12,12,12,0,12,12,5,12,11,0,12,12,12,11,12,11,11,11,11,12,12,12,3,3,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,4,3,3,3,13,13,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,18,18,18,18,13,17,3,3,4,3,3,3,3,18,18,18,17,13,11,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,3,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,12,11,11,11,11,12,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,12,18,18,18,18,3,3,3,3,3,18,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,3,3,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,17,18,18,13,3,3,3,3,4,3,3,11,11,11,12,12,11,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,3,3,3,4,4,3,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,12,12,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,12,12,11,12,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,13,13,6,3,13,13,13,3,13,4,4,4,13,13,13,3,3,12,12,12,12,12,12,12,12,0,12,0,12,0,12,12,12,12,12,12,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,4,4,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,18,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,18,6,18,18,18,18,18,13,13,4,13,4,3,6,3,13,3,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,0,12,0,12,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,12,12,12,12,12,12,12,12,0,12,0,12,0,0,12,0,12,0,11,0,12,12,11,12,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,13,3,3,3,13,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,8,12,11,10,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,12,11,10,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,4,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,6,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11],"n":["AutoSizeConfig","BLACK","BLACK","BLUE","BLUE","BROWN","Buffer","Color32","ColorMap","ColorMapInferno","ColorMapMagma","ColorMapPlasma","ColorMapTurbo","ColorMapViridis","DARK_BLUE","DARK_GRAY","DARK_GREEN","DARK_RED","DEBUG_COLOR","DebugLabel","DepthOffset","FileResolver","FileServer","FileSystem","GOLD","GRAY","GREEN","GREEN","Grayscale","ImportClause","KHAKI","LIGHT_BLUE","LIGHT_GRAY","LIGHT_GREEN","LIGHT_RED","LIGHT_YELLOW","LineStripBuilder","LineStripSeriesBuilder","PointCloudBatchBuilder","PointCloudBuilder","RED","RED","RecommendedFileResolver","RenderContext","Rgba","SearchPath","Size","TEMPORARY_COLOR","TRANSPARENT","TRANSPARENT","WHITE","WHITE","WgpuResourcePoolStatistics","YELLOW","__clone_box","__clone_box","a","a","active_frame","add","additive","additive","allocator","b","b","batches","batches","borrow","borrow","borrow_mut","borrow_mut","builder","canonicalize","clone","clone","clone_into","clone_into","color_buffer","colormap","colormap_inferno_srgb","colormap_magma_srgb","colormap_plasma_srgb","colormap_srgb","colormap_turbo_srgb","colormap_viridis_srgb","config","context","cpu_write_gpu_read_belt","debug_label","default","default","depth_offset","deref","deref","deref_mut","deref_mut","deserialize","deserialize","device","dirs","downcast","downcast","drop","drop","eq","eq","equivalent","err_tracker","error_tracker","events_rx","exists","file_resolver","file_server","file_system","file_watch_count","fmt","fmt","from","from","from","from","from","from","from","from","from_additive_luminance","from_black_alpha","from_black_alpha","from_gray","from_gray","from_luminance_alpha","from_rgb","from_rgb","from_rgb_additive","from_rgba_premultiplied","from_rgba_premultiplied","from_rgba_unmultiplied","from_rgba_unmultiplied","from_srgba_premultiplied","from_srgba_unmultiplied","from_white_alpha","from_white_alpha","fs","g","g","gamma_multiply","get_filesystem","get_hash","get_hash","global_bindings","gpu_resources","grayscale_srgb","hash","hash","importer","include_file","index","index","index_mut","index_mut","inflight_queue_submissions","init","init","intensity","into","into","is_opaque","is_valid_bit_pattern","is_valid_bit_pattern","label","line_strip_builder","linear_multiply","mesh","mesh_manager","mul","mul","multiply","new_recommended_file_resolver","num_bind_group_layouts","num_bind_groups","num_buffers","num_pipeline_layouts","num_render_pipelines","num_samplers","num_shader_modules","num_textures","outline_mask_ids","path","point_cloud_builder","queue","r","r","read_to_string","renderer","renderers","resolver","resource_managers","search_path","serialize","serialize","shared_renderer_data","size","strip_range","strip_user_data","strips","texture_manager_2d","to_array","to_array","to_normalized_gamma_f32","to_opaque","to_opaque","to_owned","to_owned","to_rgba_unmultiplied","to_srgba_unmultiplied","to_srgba_unmultiplied","to_tuple","to_tuple","total_buffer_size_in_bytes","total_texture_size_in_bytes","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","user_data","vertex_range","vertices","vertices","view_builder","watcher","wgpu_buffer_types","wgpu_resources","CpuWriteGpuReadBelt","CpuWriteGpuReadBuffer","cpu_write_gpu_read_belt","create_and_fill_uniform_buffer","create_and_fill_uniform_buffer_batch","uniform_buffer_fill","Chunk","CpuWriteGpuReadBelt","CpuWriteGpuReadBuffer","MIN_ALIGNMENT","_type","active_chunks","after_queue_submit","allocate","allocate_aligned","as_slice","before_queue_submit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","byte_offset_in_chunk_buffer","chunk_buffer","chunk_size","closed_chunks","copy_to_buffer","copy_to_texture","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","extend","extend_from_slice","fmt","free_chunks","from","from","from","init","init","init","into","into","into","new","num_written","push","receive_chunks","receiver","remaining_capacity","required_padding","sender","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unused_offset","unwritten_element_range","upcast","upcast","upcast","write_view","CHECK","CpuWriteGpuReadBelt","CpuWriteGpuReadBuffer","UniformBufferAlignmentCheck","_marker","borrow","borrow_mut","create_and_fill_uniform_buffer","create_and_fill_uniform_buffer_batch","deref","deref_mut","downcast","drop","from","init","into","try_from","try_into","type_id","upcast","ColorMap","ColorMapInferno","ColorMapMagma","ColorMapPlasma","ColorMapTurbo","ColorMapViridis","Grayscale","__clone_box","borrow","borrow_mut","clone","clone_into","cmp","colormap_inferno_srgb","colormap_magma_srgb","colormap_plasma_srgb","colormap_srgb","colormap_turbo_srgb","colormap_viridis_srgb","deref","deref_mut","downcast","drop","eq","equivalent","fmt","from","grayscale_srgb","init","into","partial_cmp","to_owned","try_from","try_into","type_id","upcast","Basic","HardwareTier","Native","RenderContextConfig","__clone_box","borrow","borrow","borrow_mut","borrow_mut","check_downlevel_capabilities","clone","clone_into","default","deref","deref","deref_mut","deref_mut","device_descriptor","downcast","downcast","drop","drop","features","fmt","from","from","hardware_tier","init","init","into","into","limits","output_format_color","required_downlevel_capabilities","support_alpha_to_coverage","support_sampling_msaa_texture","supported_backends","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","ActiveFrameContext","CPU_WRITE_GPU_READ_BELT_DEFAULT_CHUNK_SIZE","FrameGlobalCommandEncoder","MAX_NUM_INFLIGHT_QUEUE_SUBMISSIONS","RenderContext","Renderers","SharedRendererData","active_frame","before_submit","begin_frame","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","config","cpu_write_gpu_read_belt","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","device","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","encoder","err_tracker","frame_index","from","from","from","from","from","get","get","get_or_create","global_bindings","gpu_resources","inflight_queue_submissions","init","init","init","init","init","into","into","into","into","into","mesh_manager","new","new","per_frame_data_helper","poll_device","queue","renderers","renderers","resolver","shared_renderer_data","texture_manager_2d","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","DebugLabel","__clone_box","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","downcast","drop","eq","equivalent","fmt","from","from","from","from","get","get_hash","hash","init","into","label","push_str","to_owned","try_from","try_into","type_id","upcast","DepthOffset","DedupableError","ErrorTracker","WrappedContextError","borrow","borrow","borrow_mut","borrow_mut","clear","clear_countdown","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","eq","equivalent","errors","fmt","from","from","get_hash","handle_error","hash","hash","impl_trait","init","init","into","into","tick","tick_nr","try_downcast","try_from","try_from","try_into","try_into","type_id","type_id","type_of_var","upcast","upcast","FileResolver","ImportClause","InterpolatedFile","PREFIX","RecommendedFileResolver","SearchPath","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contents","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dirs","downcast","downcast","downcast","downcast","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_env","from_str","from_str","fs","imports","init","init","init","init","insert","into","into","into","into","iter","new","new_recommended","path","populate","push","resolve_clause_path","search_path","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","with_search_path","FileServer","file_server_impl","FILE_SERVER","FileServer","borrow","borrow_mut","collect","deref","deref_mut","downcast","drop","events_rx","file_watch_count","from","get","get_mut","init","into","new","try_from","try_into","type_id","unwatch","upcast","watch","watcher","FileSystem","MEM_FILE_SYSTEM","MemFileSystem","OsFileSystem","borrow","borrow","borrow_mut","borrow_mut","canonicalize","canonicalize","canonicalize","create_dir_all","create_dir_all","create_dir_all","create_file","create_file","create_file","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","exists","exists","exists","files","from","from","get","get_filesystem","init","init","into","into","new_uninit","read_to_string","read_to_string","read_to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","FrameUniformBuffer","GlobalBindings","__clone_box","auto_size_lines","auto_size_points","borrow","borrow","borrow_mut","borrow_mut","camera_forward","camera_position","clone","clone_into","create_bind_group","depth_offset_factor","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","from","from","init","init","into","into","is_valid_bit_pattern","layout","nearest_neighbor_sampler","new","pixel_world_size_from_camera_distance","pixels_from_point","projection_from_view","projection_from_world","tan_half_fov","to_owned","trilinear_sampler","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","view_from_world","calculate_bounding_box","gltf","obj","to_uniform_scale","gather_instances_recursive","import_mesh","load_gltf_from_buffer","map_format","load_obj_from_buffer","LineBatchBuilder","LineStripBuilder","LineStripSeriesBuilder","add_axis_aligned_rectangle_outline_2d","add_box_outline","add_rectangle_outline","add_rectangle_outline_2d","add_segment","add_segment_2d","add_segments","add_segments_2d","add_strip","add_strip_2d","add_vertices","batch","batch_mut","batches","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","color","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","drop","drop","flags","from","from","from","init","init","init","into","into","into","is_empty","iter_strips_with_vertices","iter_vertices_by_batch","outline_mask_ids","outline_mask_ids","outline_mask_ids","radius","strip_range","strip_user_data","strips","to_draw_data","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","user_data","vertex_range","vertices","world_from_obj","GpuMaterial","GpuMesh","Material","Mesh","__clone_box","__clone_box","__clone_box","__clone_box","albedo","albedo_multiplier","bind_group","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","drop","drop","drop","drop","from","from","from","from","gpu_data","index_buffer","index_buffer_range","index_range","index_range","indices","init","init","init","init","into","into","into","into","label","label","materials","materials","mesh_vertices","new","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","vertex_buffer_combined","vertex_buffer_data_range","vertex_buffer_positions_range","vertex_data","vertex_positions","MaterialUniformBuffer","__clone_box","albedo_multiplier","borrow","borrow_mut","clone","clone_into","deref","deref_mut","downcast","drop","end_padding","from","init","into","is_valid_bit_pattern","to_owned","try_from","try_into","type_id","upcast","MeshVertexData","__clone_box","borrow","borrow_mut","clone","clone_into","deref","deref_mut","downcast","drop","fmt","from","init","into","is_valid_bit_pattern","next_free_shader_location","normal","texcoord","to_owned","try_from","try_into","type_id","upcast","vertex_buffer_layouts","PointBuilder","PointCloudBatchBuilder","PointCloudBuilder","PointsBuilder","add_point","add_point_2d","add_points","add_points_2d","additional_outline_mask_ids","additional_outline_mask_ids","batch","batch_mut","batches","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","color","color","color_buffer","colors","colors","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","extend_defaults","flags","from","from","from","from","init","init","init","init","into","into","into","into","iter_vertices_and_userdata_by_batch","iter_vertices_by_batch","max_points","new","outline_mask_id","outline_mask_id","outline_mask_ids","push_additional_outline_mask_ids_for_range","radii","radius","start_vertex_index","to_draw_data","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","user_data","user_data","user_data","user_data","user_data","vertex","vertex_index","vertices","vertices","world_from_obj","Background","Compositing","DepthCloud","DepthCloudDepthData","DepthCloudDrawData","DepthCloudRenderer","DrawData","DrawPhase","F32","GenericSkyboxDrawData","LineBatchInfo","LineDrawData","LineStripFlags","LineStripInfo","LineVertex","Linear","Linear","MeshDrawData","MeshInstance","Nearest","Nearest","NumberOfColorsNotEqualNumberOfVertices","Opaque","OutlineConfig","OutlineMask","OutlineMaskPreference","PointCloudBatchFlags","PointCloudBatchInfo","PointCloudDrawData","PointCloudDrawDataError","PointCloudVertex","RectangleDrawData","Renderer","Renderer","RendererDrawData","TestTriangleDrawData","TextureFilterMag","TextureFilterMin","TexturedRect","U16","__clone_box","additional_outline_mask_ids_vertex_ranges","additional_outline_mask_ids_vertex_ranges","additive_tint","batches","batches","batches","bind_group_all_lines","bind_group_all_points","bind_group_layout","bitand","bitor","bits","bits","bitxor","borrow","borrow_mut","clone","clone_into","color","color_layer_a","color_layer_b","colormap","compositor","create_renderer","depth_camera_extrinsics","depth_camera_intrinsics","depth_cloud","depth_data","depth_dimensions","depth_offset","deref","deref_mut","downcast","draw","drop","enum_from_u32","enum_into_u32","eq","eq","equivalent","extent_u","extent_v","flags","flags","fmt","from","generic_skybox","gpu_mesh","init","instance_buffer","instances","instances","into","label","label","line_vertex_count","lines","mesh","mesh_renderer","multiplicative_tint","not","outline_mask","outline_mask_id","outline_mask_ids","outline_radius_pixel","outlines","overall_outline_mask_ids","overall_outline_mask_ids","participated_phases","point_cloud","point_count","position","position","radius","radius","radius_scale","rectangles","render_pipeline_color","render_pipeline_outline_mask","screen_triangle_vertex_shader","strip_index","sub","test_triangle","texture","texture_filter_magnification","texture_filter_minification","to_owned","top_left_corner_position","try_from","try_into","type_id","upcast","world_from_mesh","world_from_obj","world_from_obj","Compositor","CompositorDrawData","__clone_box","bind_group","bind_group_layout","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_renderer","deref","deref","deref_mut","deref_mut","downcast","downcast","draw","drop","drop","from","from","init","init","into","into","new","participated_phases","render_pipeline","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","DepthCloud","DepthCloudDepthData","DepthCloudDrawData","DepthCloudDrawInstance","DepthCloudRenderer","F32","U16","__clone_box","__clone_box","__clone_box","bind_group","bind_group_layout","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","colormap","create_and_upload_texture","create_renderer","default","default","depth_camera_extrinsics","depth_camera_intrinsics","depth_data","depth_dimensions","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","draw","drop","drop","drop","drop","drop","fmt","from","from","from","from","from","gpu_data","init","init","init","init","init","instances","into","into","into","into","into","new","num_points","outline_mask_id","participated_phases","radius_scale","render_outline_mask","render_pipeline_color","render_pipeline_outline_mask","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","DepthCloudInfoUBO","__clone_box","borrow","borrow_mut","clone","clone_into","colormap","depth_camera_extrinsics","depth_camera_intrinsics","deref","deref_mut","downcast","drop","end_padding","from","init","into","is_valid_bit_pattern","outline_mask_id","radius_scale","to_owned","try_from","try_into","type_id","upcast","GenericSkybox","GenericSkyboxDrawData","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_renderer","deref","deref","deref_mut","deref_mut","downcast","downcast","draw","drop","drop","from","from","init","init","into","into","new","participated_phases","render_pipeline","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","CAP_END_ROUND","CAP_END_TRIANGLE","CAP_START_ROUND","CAP_START_TRIANGLE","InvalidStripIndex","LINE_STRIP_TEXTURE_SIZE","LineBatchInfo","LineDrawData","LineDrawDataError","LineRenderer","LineStripBatch","LineStripFlags","LineStripInfo","MAX_NUM_STRIPS","MAX_NUM_VERTICES","NO_COLOR_GRADIENT","POSITION_TEXTURE_SIZE","PoolError","__clone_box","__clone_box","__clone_box","__clone_box","active_phases","additional_outline_mask_ids_vertex_ranges","all","batches","bind_group","bind_group_all_lines","bind_group_layout_all_lines","bind_group_layout_batch","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","color","complement","contains","create_linestrip_batch","create_renderer","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","difference","downcast","downcast","downcast","downcast","downcast","downcast","downcast","draw","drop","drop","drop","drop","drop","drop","drop","empty","eq","eq","equivalent","equivalent","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_hash","get_triangle_cap_tip_length","gpu_data","hash","init","init","init","init","init","init","init","insert","intersection","intersects","into","into","into","into","into","into","into","is_all","is_empty","is_valid_bit_pattern","label","line_vertex_count","new","not","overall_outline_mask_ids","partial_cmp","participated_phases","provide","radius","remove","render_pipeline_color","render_pipeline_outline_mask","set","source","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vertex_range","world_from_obj","BatchUniformBuffer","LineStripInfo","LineVertex","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","end_padding","flags","from","from","from","init","init","init","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","outline_mask_ids","position","radius","stippling","strip_index","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","world_from_obj","MeshBatch","MeshDrawData","MeshInstance","MeshRenderer","__clone_box","__clone_box","additive_tint","batches","bind_group_layout","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","count_with_outlines","create_renderer","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","draw","drop","drop","drop","drop","from","from","from","from","gpu_data","gpu_mesh","init","init","init","init","instance_buffer","into","into","into","into","mesh","mesh","new","outline_mask_ids","participated_phases","render_pipeline_outline_mask","render_pipeline_shaded","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","world_from_mesh","InstanceData","__clone_box","additive_tint","borrow","borrow_mut","clone","clone_into","deref","deref_mut","downcast","drop","from","init","into","is_valid_bit_pattern","outline_mask_ids","to_owned","try_from","try_into","type_id","upcast","vertex_buffer_layout","world_from_mesh_normal_row_0","world_from_mesh_normal_row_1","world_from_mesh_normal_row_2","world_from_mesh_row_0","world_from_mesh_row_1","world_from_mesh_row_2","MASK_DEPTH_FORMAT","MASK_DEPTH_STATE","MASK_FORMAT","NONE","OutlineCompositingDrawData","OutlineCompositor","OutlineConfig","OutlineMaskPreference","OutlineMaskProcessor","VORONOI_FORMAT","__clone_box","__clone_box","__clone_box","bind_group","bind_group_draw_outlines","bind_group_jumpflooding_init","bind_group_jumpflooding_steps","bind_group_layout","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","color_layer_a","color_layer_b","compute_outlines","create_bind_group","create_bind_group_jumpflooding_init","create_bind_groups_for_jumpflooding_steps","create_renderer","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","draw","drop","drop","drop","drop","drop","eq","equivalent","fmt","fmt","from","from","from","from","from","gpu_data","init","init","init","init","init","into","into","into","into","into","is_none","is_some","label","mask_default_msaa_state","mask_depth","mask_sample_count","mask_texture","new","outline_radius_pixel","participated_phases","render_pipeline","render_pipeline_jumpflooding_init","render_pipeline_jumpflooding_step","some","start_mask_render_pass","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","voronoi_textures","with_fallback_to","JumpfloodingStepUniformBuffer","OutlineConfigUniformBuffer","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","color_layer_a","color_layer_b","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","end_padding","end_padding","from","from","init","init","into","into","is_valid_bit_pattern","is_valid_bit_pattern","outline_radius_pixel","step_width","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","DATA_TEXTURE_SIZE","ENABLE_SHADING","MAX_NUM_POINTS","NumberOfColorsNotEqualNumberOfVertices","PointCloudBatch","PointCloudBatchFlags","PointCloudBatchInfo","PointCloudDrawData","PointCloudDrawDataError","PointCloudRenderer","PointCloudVertex","__clone_box","__clone_box","__clone_box","active_phases","additional_outline_mask_ids_vertex_ranges","all","batches","bind_group","bind_group_all_points","bind_group_layout_all_points","bind_group_layout_batch","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","complement","contains","create_point_cloud_batch","create_renderer","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","difference","downcast","downcast","downcast","downcast","downcast","downcast","downcast","draw","drop","drop","drop","drop","drop","drop","drop","empty","eq","eq","equivalent","equivalent","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_hash","gpu_data","hash","init","init","init","init","init","init","init","insert","intersection","intersects","into","into","into","into","into","into","into","is_all","is_empty","is_valid_bit_pattern","label","new","not","overall_outline_mask_ids","partial_cmp","participated_phases","point_count","position","provide","radius","remove","render_pipeline_color","render_pipeline_outline_mask","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vertex_range","world_from_obj","BatchUniformBuffer","PositionData","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","end_padding","flags","from","from","init","init","into","into","is_valid_bit_pattern","is_valid_bit_pattern","outline_mask_ids","pos","radius","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","world_from_obj","Linear","Linear","Nearest","Nearest","RectangleDrawData","RectangleInstance","RectangleRenderer","TextureFilterMag","TextureFilterMin","TexturedRect","__clone_box","__clone_box","bind_group","bind_group_layout","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_renderer","default","depth_offset","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","draw","draw_outline_mask","drop","drop","drop","drop","drop","drop","extent_u","extent_v","fmt","fmt","from","from","from","from","from","from","gpu_data","init","init","init","init","init","init","instances","into","into","into","into","into","into","multiplicative_tint","new","outline_mask","participated_phases","render_pipeline_color","render_pipeline_outline_mask","texture","texture_filter_magnification","texture_filter_minification","to_owned","to_owned","top_left_corner_position","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","UniformBuffer","__clone_box","borrow","borrow_mut","clone","clone_into","depth_offset","deref","deref_mut","downcast","drop","end_padding","extent_u","extent_v","from","init","into","is_valid_bit_pattern","multiplicative_tint","outline_mask","to_owned","top_left_corner_position","try_from","try_into","type_id","upcast","TestTriangle","TestTriangleDrawData","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_renderer","deref","deref","deref_mut","deref_mut","downcast","downcast","draw","drop","drop","from","from","init","init","into","into","new","render_pipeline","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","ExpiredResource","Frame","GpuMeshHandle","GpuTexture2DHandle","Invalid","LongLived","LongLived","MeshManager","NullHandle","ResourceHandle","ResourceLifeTime","ResourceManagerError","ResourceNotFound","ResourcePoolError","SingleFrame","Texture2DCreationDesc","TextureManager2D","accessed_textures","data","device","format","height","label","manager","mesh_bind_group_layout","mesh_manager","queue","resource_manager","texture_cache","texture_manager","white_texture","width","key","valid_frame_index","current_frame_index","valid_frame_index","GpuMeshHandle","MeshHandleInner","MeshManager","__clone_box","begin_frame","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","create","data","default","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","eq","equivalent","fmt","from","from","from","get","get_hash","hash","init","init","into","into","manager","mesh_bind_group_layout","new","partial_cmp","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","ExpiredResource","Frame","Invalid","LongLived","LongLived","NullHandle","ResourceHandle","ResourceLifeTime","ResourceManager","ResourceManagerError","ResourceNotFound","ResourcePoolError","SingleFrame","__clone_box","__clone_box","begin_frame","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_frame_resource_lifetime","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","frame_index","from","from","from","from","get","init","init","init","init","into","into","into","into","long_lived_resources","provide","single_frame_resources","store_resource","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","key","valid_frame_index","current_frame_index","valid_frame_index","GpuTexture2DHandle","Texture2DCreationDesc","TextureManager2D","__clone_box","accessed_textures","begin_frame","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","convert_rgb8_to_rgba8","create","create_and_upload_texture","data","deref","deref","deref","deref_mut","deref_mut","deref_mut","device","downcast","downcast","downcast","drop","drop","drop","format","from","from","from","get","get_or_create","height","init","init","init","into","into","into","invalid","label","new","queue","texture_cache","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","white_texture","white_texture_handle","width","AUTO","AUTO_LARGE","Size","SizeHalf","__clone_box","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","eq","fmt","from","from","from","init","init","into","into","is_auto","is_valid_bit_pattern","is_valid_bit_pattern","mul","mul_assign","new_points","new_scene","points","scene","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","AutoSizeConfig","DEFAULT_DEPTH_CLEAR","DrawFn","MAIN_TARGET_COLOR_FORMAT","MAIN_TARGET_DEFAULT_DEPTH_STATE","MAIN_TARGET_DEFAULT_MSAA_STATE","MAIN_TARGET_DEPTH_FORMAT","MAIN_TARGET_SAMPLE_COUNT","NearPlaneCenter","Orthographic","OrthographicCameraMode","Perspective","Projection","QueuedDraw","SharedViewBuilder","TargetConfiguration","TopLeftCornerAndExtendZ","ViewBuilder","ViewTargetSetup","__clone_box","__clone_box","__clone_box","__clone_box","auto_size_config","bind_group_0","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","composite","default","default","default","depth_buffer","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","downcast","draw","draw_data","draw_func","draw_phase","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","init","init","init","init","init","init","init","into","into","into","into","into","into","into","line_radius","main_target_msaa","main_target_resolved","name","name","outline_config","outline_mask_processor","participated_phases","pixels_from_point","point_radius","projection_from_view","queue_draw","queued_draws","renderer_name","resolution_in_pixel","resolution_in_pixel","serialize","setup","setup_view","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","view_from_world","camera_mode","far_plane_distance","near_plane_distance","vertical_fov","vertical_world_size","F32RowPadded","Mat3","Mat4","Mat4x3","PaddingRow","U32RowPadded","UVec2","UVec2RowPadded","Vec2","Vec2RowPadded","Vec3RowPadded","Vec3Unpadded","Vec4","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c0","c0","c0","c1","c1","c1","c2","c2","c2","c3","c3","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","p","padding","padding0","padding0","padding0","padding0","padding1","padding1","padding1","padding1","padding2","padding2","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","v","v","w","x","x","x","x","x","x","x","y","y","y","y","y","y","y","z","z","z","BindGroupDesc","BindGroupEntry","BindGroupLayoutDesc","BufferDesc","GpuBindGroup","GpuBindGroupHandle","GpuBindGroupLayoutHandle","GpuBindGroupLayoutPool","GpuBindGroupPool","GpuBuffer","GpuBufferHandle","GpuBufferPool","GpuPipelineLayoutHandle","GpuPipelineLayoutPool","GpuRenderPipelineHandle","GpuRenderPipelinePool","GpuSamplerHandle","GpuSamplerPool","GpuShaderModuleHandle","GpuShaderModulePool","GpuTexture","GpuTextureHandle","GpuTextureInternal","GpuTexturePool","PipelineLayoutDesc","PoolError","RenderPipelineDesc","SamplerDesc","ShaderModuleDesc","TextureDesc","VertexBufferLayout","WgpuResourcePoolStatistics","WgpuResourcePools","bind_group_layout_pool","bind_group_layouts","bind_group_pool","bind_groups","borrow","borrow","borrow_mut","borrow_mut","buffer_pool","buffers","default","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","dynamic_resource_pool","from","from","init","init","into","into","num_bind_group_layouts","num_bind_groups","num_buffers","num_pipeline_layouts","num_render_pipelines","num_samplers","num_shader_modules","num_textures","pipeline_layout_pool","pipeline_layouts","render_pipeline_pool","render_pipelines","resource","sampler_pool","samplers","shader_module_pool","shader_modules","static_resource_pool","statistics","texture_pool","textures","total_buffer_size_in_bytes","total_bytes","total_texture_size_in_bytes","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","BindGroupLayoutDesc","GpuBindGroupLayoutHandle","GpuBindGroupLayoutPool","__clone_box","__clone_box","begin_frame","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","data","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","drop","drop","drop","entries","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","get_hash","get_hash","get_or_create","get_resource","hash","hash","init","init","init","into","into","into","label","num_resources","partial_cmp","pool","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","BindGroupDesc","BindGroupEntry","Buffer","DefaultTextureView","GpuBindGroup","GpuBindGroupHandle","GpuBindGroupPool","Sampler","__clone_box","__clone_box","__clone_box","__clone_box","_owned_buffers","_owned_textures","alloc","allow_reuse","begin_frame","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","data","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","entries","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","init","init","init","init","init","into","into","into","into","into","label","layout","num_resources","partial_cmp","pool","resource","resource_size_in_bytes","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","handle","offset","size","BufferDesc","GpuBuffer","GpuBufferHandle","GpuBufferPool","__clone_box","__clone_box","alloc","allow_reuse","begin_frame","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","data","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","get_from_handle","get_hash","get_hash","hash","hash","init","init","init","into","into","into","label","mapped_at_creation","num_resources","partial_cmp","pool","resource_size_in_bytes","serialize","size","to_owned","to_owned","total_gpu_size_in_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","usage","DynamicResource","DynamicResourcePool","DynamicResourcePoolProtectedState","DynamicResourcesDesc","all_resources","alloc","allow_reuse","begin_frame","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","creation_desc","current_frame_index","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","drop","from","from","from","get_from_handle","handle","init","init","init","inner","into","into","into","last_frame_deallocated","num_resources","resource_size_in_bytes","state","total_resource_size_in_bytes","total_resource_size_in_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","GpuPipelineLayout","GpuPipelineLayoutHandle","GpuPipelineLayoutPool","PipelineLayoutDesc","__clone_box","__clone_box","begin_frame","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","data","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","entries","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","get_hash","get_hash","get_or_create","get_resource","hash","hash","init","init","init","init","into","into","into","into","label","layout","num_resources","partial_cmp","pool","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","GpuRenderPipelineHandle","GpuRenderPipelinePool","RenderPipelineDesc","VertexBufferLayout","__clone_box","__clone_box","__clone_box","array_stride","attributes","attributes_from_formats","begin_frame","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","create_render_pipeline","data","default","default","depth_stencil","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fragment_entrypoint","fragment_handle","from","from","from","from","from","get_hash","get_hash","get_hash","get_or_create","get_resource","hash","hash","hash","init","init","init","init","into","into","into","into","label","multisample","num_resources","partial_cmp","pipeline_layout","pool","primitive","render_targets","serialize","step_mode","to_owned","to_owned","to_owned","to_wgpu_desc","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","vertex_buffers","vertex_entrypoint","vertex_handle","NullHandle","PoolError","ResourceNotAvailable","ResourceStatistics","UnknownDescriptor","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","equivalent","fmt","fmt","frame_created","from","from","init","init","into","into","last_frame_used","provide","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","GpuSamplerHandle","GpuSamplerPool","SamplerDesc","__clone_box","__clone_box","address_mode_u","address_mode_v","address_mode_w","anisotropy_clamp","begin_frame","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","data","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","get_hash","get_hash","get_or_create","get_resource","hash","hash","init","init","init","into","into","into","label","lod_max_clamp","lod_min_clamp","mag_filter","min_filter","mipmap_filter","num_resources","partial_cmp","pool","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","GpuShaderModuleHandle","GpuShaderModulePool","ShaderModuleDesc","__clone_box","__clone_box","begin_frame","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","create_shader_module","data","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","get","get_hash","get_hash","get_or_create","get_statistics","hash","hash","init","init","init","into","into","into","label","num_resources","partial_cmp","pool","serialize","source","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","StaticResourcePool","StoredResource","borrow","borrow","borrow_mut","borrow_mut","current_frame_index","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","from","from","get_or_create","get_resource","get_statistics","init","init","into","into","lookup","num_resources","recreate_resources","resource","resources","statistics","to_pool_error","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","GpuTexture","GpuTextureHandle","GpuTextureInternal","GpuTexturePool","TextureDesc","__clone_box","__clone_box","alloc","allow_reuse","begin_frame","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","data","default","default","default_view","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","dimension","downcast","downcast","downcast","downcast","drop","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","format","from","from","from","from","from","get_from_handle","get_hash","get_hash","hash","hash","init","init","init","init","into","into","into","into","label","mip_level_count","num_resources","partial_cmp","pool","resource_size_in_bytes","sample_count","serialize","size","texture","to_owned","to_owned","total_gpu_size_in_bytes","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","usage","with_label","with_label_push"],"q":["re_rendererre_renderer::allocator","","","","","","re_renderer::allocator::cpu_write_gpu_read_belt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::allocator::uniform_buffer_fill","","","","","","","","","","","","","","","","","","","","re_renderer::colormap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::debug_label","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::depth_offset","re_renderer::error_tracker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::file_resolver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::file_server","","re_renderer::file_server::file_server_impl","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::file_system","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::global_bindings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::importer","","","","re_renderer::importer::gltf","","","","re_renderer::importer::obj","re_renderer::line_strip_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::mesh","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::mesh::gpu_data","","","","","","","","","","","","","","","","","","","","","re_renderer::mesh::mesh_vertices","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::point_cloud_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::compositor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::depth_cloud","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::depth_cloud::gpu_data","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::generic_skybox","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::linesre_renderer::renderer::lines::gpu_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::mesh_renderer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::mesh_renderer::gpu_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::outlines","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::outlines::gpu_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::point_cloudre_renderer::renderer::point_cloud::gpu_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::rectangles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::rectangles::gpu_data","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::renderer::test_triangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::resource_managers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::resource_managers::ResourceHandle","","re_renderer::resource_managers::ResourceManagerError","","re_renderer::resource_managers::mesh_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::resource_managers::resource_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::resource_managers::resource_manager::ResourceHandle","","re_renderer::resource_managers::resource_manager::ResourceManagerError","","re_renderer::resource_managers::texture_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::size","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::view_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::view_builder::Projection","","","","","re_renderer::wgpu_buffer_typesre_renderer::wgpu_resources","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::bind_group_layout_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::bind_group_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::bind_group_pool::BindGroupEntry","","","re_renderer::wgpu_resources::buffer_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::dynamic_resource_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::pipeline_layout_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::render_pipeline_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::resource","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::sampler_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::shader_module_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::static_resource_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_renderer::wgpu_resources::texture_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","This format is used for space-efficient color …","","","","","","","","","","","","Label for resources. Optimized out in release builds.","Depth offset used to resolve z-fighting between 2d …","The <code>FileResolver</code> handles both resolving import clauses and …","A file server capable of watching filesystem events in the …","A very limited filesystem, just enough for our internal …","","","","","","A pre-parsed import clause, as in <code>#import &lt;something&gt;</code>.","","","","","","","","Builder for a vector of line strips, making it easy to …","","Builder for point clouds, making it easy to create …","","","The recommended <code>FileResolver</code> type for the current …","Any resource involving wgpu rendering which can be re-used …","0-1 linear space <code>RGBA</code> color with premultiplied alpha.","Specifies where to look for imports when both absolute and …","A size of something in either world-units, screen-units, …","An ugly color that is planned to be replaced before making …","","","","","","","","","","","","","Returns an additive version of self","Return an additive version of this color (alpha = 0)","High level GPU memory allocators.","","","","","","","","","","","","","","","","","Returns sRGB polynomial approximation from Inferno color …","Returns sRGB polynomial approximation from Magma color …","Returns sRGB polynomial approximation from Plasma color …","","Returns sRGB polynomial approximation from Turbo color …","Returns sRGB polynomial approximation from Viridis color …","","","","","","","","","","","","","","","All directories currently in the search path, in …","","","","","","","","","Special error handling datastructures for debug builds …","","","This module implements one half of our cross-platform …","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Transparent black","","","","","","","From <code>sRGBA</code> with premultiplied alpha.","","From <code>sRGBA</code> WITHOUT premultiplied alpha.","","","","","Transparent white","A handle to the filesystem being used. Generally a …","","","Multiply with 0.5 to make color half as opaque, …","Returns the recommended filesystem handle for the current …","","","","","Returns an sRGB gray value, assuming <code>t</code> is normalized.","","","","A macro to read the contents of a file on disk, and …","","","","","List of unfinished queue submission via this context.","","","How perceptually intense (bright) is the color?","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Multiply with 0.5 to make color half as opaque in linear …","","","","","Multiply with e.g. 0.5 to make us half transparent","Returns the recommended <code>FileResolver</code> for the current …","","","","","","","","","","The path being imported, as-is: neither canonicalized nor …","","","","","","","","","Resource managers are concerned with mapping (typically) …","The search path that we will go through when an import …","","","","","","","","","Premultiplied RGBA","Premultiplied RGBA","Converts to floating point values in the range 0-1 without …","Returns an opaque version of self","Returns an opaque version of self","","","unmultiply the alpha","","unmultiply the alpha","Premultiplied RGBA","Premultiplied RGBA","","","","","","","","","","","","","","","","","Explicitly padded and/or aligned types following wgsl …","Wgpu resource pools are concerned with handling low level …","","","","","","","Internal chunk of the staging belt.","Efficiently performs many buffer writes by sharing and …","A sub-allocated staging buffer that can be written to.","All allocations of this allocator will be aligned to at …","Marker for the type whose alignment and size requirements …","Chunks which are CPU write at the moment.","Recall all of the closed buffers back to be reused.","Allocates a cpu writable buffer for <code>num_elements</code> instances …","Caller needs to make sure that there is enough space plus …","Memory as slice of T.","Prepare currently mapped buffers for use in a submission.","","","","","","","","","","Minimum size for new buffers.","Chunks which are GPU read at the moment.","Copies the entire buffer to another buffer and drops it.","Copies the entire buffer to a texture and drops it.","","","","","","","","","","","","","Pushes several elements into the buffer.","Pushes a slice of elements into the buffer.","","Chunks that are back from the GPU and ready to be mapped …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a cpu-write &amp; gpu-read staging belt.","The number of elements pushed into the buffer so far.","Pushes a single element into the buffer and advances the …","Move all chunks that the GPU is done with (and are now …","Free chunks are received here to be put on <code>self.free_chunks</code>…","","","When closed chunks are mapped again, the map callback …","","","","","","","","","","Starting at this offset the buffer is unused.","Range in T elements in write_view that haven’t been …","","","","Write view into the relevant buffer portion.","wgpu requires uniform buffers to be aligned to up to 256 …","","","","","","","See <code>create_and_fill_uniform_buffer</code>.","Utility for fast &amp; efficient creation of uniform buffers …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns sRGB polynomial approximation from Inferno color …","Returns sRGB polynomial approximation from Magma color …","Returns sRGB polynomial approximation from Plasma color …","","Returns sRGB polynomial approximation from Turbo color …","Returns sRGB polynomial approximation from Viridis color …","","","","","","","","Returns the argument unchanged.","Returns an sRGB gray value, assuming <code>t</code> is normalized.","","Calls <code>U::from(self)</code>.","","","","","","","For WebGL and native OpenGL. Maintains strict WebGL …","Hardware tiers <code>re_renderer</code> distinguishes.","Run natively with Vulkan/Metal but don’t demand anything …","Startup configuration for a <code>crate::RenderContext</code>","","","","","","Checks if passed downlevel capabilities support the given …","","","","","","","","Device descriptor compatible with the given hardware tier.","","","","","Required features for the given hardware tier.","","Returns the argument unchanged.","Returns the argument unchanged.","The targeted hardware tier.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Wgpu limits required by the given hardware tier.","The color format used by the eframe output buffer.","Downlevel features required by the given tier.","Temporary workaround until this GL state leaking fix is …","Whether the current hardware tier supports sampling from …","Backends that are officially supported by <code>re_renderer</code>.","","","","","","","","","","","Chunk size for our cpu-&gt;gpu buffer manager.","","Limit maximum number of in flight submissions to this …","Any resource involving wgpu rendering which can be re-used …","Struct owning <em>all</em> <code>Renderer</code>. <code>Renderer</code> are created lazily …","Immutable data that is shared between all <code>Renderer</code>","","Call this at the end of a frame but before submitting …","Call this at the beginning of a new frame.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Command encoder for all commands that should go in before …","","Index of this frame. Is incremented for every render frame.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets the global encoder for a frame. Only valid within a …","","Global bindings, always bound to 0 bind group slot zero. …","","List of unfinished queue submission via this context.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Utility type map that will be cleared every frame.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Label for resources. Optimized out in release builds.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","Depth offset used to resolve z-fighting between 2d …","An error with some extra deduplication logic baked in.","Coalesces wgpu errors until the tracker is <code>clear()</code>ed.","A <code>wgpu_core::ContextError</code> with hashing and equality …","","","","","Resets the tracker.","This countdown reaching 0 indicates that the pipeline has …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Logs a wgpu error, making sure to deduplicate them as …","","","E.g. to implement <code>DedupableError</code> for u32 + u64:","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Increment tick count used in logged errors, and clear the …","","Tries downcasting a given value into the specified …","","","","","","","","","","The <code>FileResolver</code> handles both resolving import clauses and …","A pre-parsed import clause, as in <code>#import &lt;something&gt;</code>.","","","The recommended <code>FileResolver</code> type for the current …","Specifies where to look for imports when both absolute and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All directories currently in the search path, in …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","A handle to the filesystem being used. Generally a …","","","","","","Insert a path into search path.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator over the directories in the search …","","Returns the recommended <code>FileResolver</code> for the current …","The path being imported, as-is: neither canonicalized nor …","","Push a path to search path.","","The search path that we will go through when an import …","","","","","","","","","","","","","","","","","","","","","","","","","The global <code>FileServer</code>.","A file server capable of watching filesystem events in the …","","","Coalesces all filesystem events since the last call to …","","","","","","","Returns the argument unchanged.","Returns a reference to the global <code>FileServer</code>.","Returns a mutable reference to the global <code>FileServer</code>.","","Calls <code>U::from(self)</code>.","","","","","Stops watching for file events at the given <code>path</code>.","","Starts watching for file events at the given <code>path</code>.","","A very limited filesystem, just enough for our internal …","The global <code>MemFileSystem</code>.","A <code>FileSystem</code> implementation backed by an hash map.","A <code>FileSystem</code> implementation that simply delegates to …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the global <code>MemFileSystem</code>.","Returns the recommended filesystem handle for the current …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Mirrors the GPU contents of a frame-global uniform buffer.","","","","","","","","","Camera direction in world space. Same as …","Camera position in world space.","","","Creates a bind group that follows the global bind group …","Factor used to compute depth offsets, see <code>depth_offset.wgsl</code>…","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","For perspective: Multiply this with a camera distance to …","How many pixels there are per point. I.e. the ui scaling …","","","(tan(fov_y / 2) * aspect_ratio, tan(fov_y /2)), i.e. half …","","","","","","","","","","","","","","","","","","Loads both gltf and glb into the mesh &amp; texture manager.","","Load a Wavefront .obj file into the mesh &amp; texture manager.","","","Builder for a vector of line strips, making it easy to …","Add 2D rectangle outlines with axis along X and Y.","Add box outlines from a unit cube transformed by <code>transform</code>.","Add rectangle outlines.","Add 2D rectangle outlines.","Adds a single 3D line segment connecting two points.","Adds a single 2D line segment connecting two points. Uses …","Adds a series of unconnected 3D line segments.","Adds a series of unconnected 2D line segments.","Adds a 3D series of line connected points.","Adds a 2D series of line connected points.","","Start of a new batch.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Iterates over all line strips batches together with their …","","Sets an outline mask for every element in the batch.","Sets an individual outline mask ids. Note that this has a …","","","","","","Finalizes the builder and returns a line draw data with …","","","","","","","","","","","","","Adds user data for every strip this builder adds.","","","Sets the <code>world_from_obj</code> matrix for the <em>entire</em> batch.","","","","","","","","","Base color texture, also known as albedo. (not optional, …","Factor applied to the decoded albedo color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Index range within the owning <code>Mesh</code> that should be rendered …","Index range within the owning <code>Mesh</code> that should be rendered …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Every mesh has at least one material.","Defines how mesh vertices are built.","","","","","","","","","","","","","","","","","","","","","","Buffer for all vertex data, subdivided in several sections …","","","","","Keep in sync with <code>MaterialUniformBuffer</code> in …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Mesh vertex as used in gpu residing vertex buffers.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Next vertex attribute index that can be used for another …","","","","","","","","Vertex buffer layouts describing how vertex data should be …","","","Builder for point clouds, making it easy to create …","","","Adds a single 2D point. Uses an autogenerated depth value.","Add several 3D points","Adds several 2D points. Uses an autogenerated depth value, …","","","Start of a new batch.","","","","","","","","","","","This mustn’t call this more than once.","","","Assigns colors to all points.","","","","","","","","","","","","","","","","","","","","Each time we <code>add_points</code>, or upon builder drop, make sure …","Set flags for this batch.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Pushes additional outline mask ids for this point","","Sets an outline mask for every element in the batch.","Pushes additional outline mask ids for a specific range of …","Assigns radii to all points.","","","Finalizes the builder and returns a point cloud draw data …","","","","","","","","","","","","","","","","","","Assigns user data for all points in this builder.","","","","","","","","Sets the <code>world_from_obj</code> matrix for the <em>entire</em> batch.","Background, rendering where depth wasn’t written.","Drawn when compositing with the main target.","","The raw data from a depth texture.","","","GPU sided data used by a <code>Renderer</code> to draw things to the …","Determines a (very rough) order of rendering and describes …","","","Data that is valid for a batch of line strips.","A line drawing operation. Encompasses several lines, each …","Property flags for a line strip","Style information for a line strip.","","","","","","","","","Opaque objects, performing reads/writes to the depth …","","Render mask for things that should get outlines.","What outline (if any) should be drawn.","Property flags for a point batch","Data that is valid for a batch of point cloud points.","A point cloud drawing operation. Expected to be recrated …","","Description of a point cloud.","","A Renderer encapsulate the knowledge of how to render a …","","","","Texture filter setting for magnification (a texel covers …","Texture filter setting for minification (several texels …","","","","Defines an outline mask for an individual vertex ranges …","Defines an outline mask for an individual vertex ranges.","Per-instance (as opposed to per-material/mesh!) tint color …","","","","","","","","","","","","","","","","srgb color. Alpha unused right now","Premultiplied RGBA color for the first outline layer.","Premultiplied RGBA color for the second outline layer.","Configures color mapping mode.","","","The extrinsics of the camera used for the projection.","The intrinsics of the camera used for the projection.","Renderer that makes it easy to draw point clouds straight …","The actual data from the depth texture.","The dimensions of the depth texture in pixels.","","","","","Called once per phase given by …","","","","","","","Vector that spans up the rectangle from its top left …","Vector that spans up the rectangle from its top left …","Additional properties of this point cloud batch.","Additional properties for the linestrip.","","Returns the argument unchanged.","","Gpu mesh this instance refers to.","","","","","Calls <code>U::from(self)</code>.","","","Number of vertices covered by this batch.","Line renderer for efficient rendering of many line(strips)","Optional cpu representation of the mesh, not needed for …","Mesh renderer.","Tint that is multiplied to the rect, supports …","","Optional outline mask.","Option outline mask id preference.","Optional outline mask setting for this instance.","Outline radius for both layers in pixels. Fractional …","Outlines as postprocessing effect.","Optional outline mask setting for the entire batch.","Optional outline mask setting for the entire batch.","Combination of flags indicating in which phases …","Point renderer for efficient rendering of point clouds.","Number of points covered by this batch.","Connected points. Must be at least 2.","","Radius of the point in world space","Radius of the line strip in world space","The scale to apply to the radii of the backprojected …","Renderer that makes it easy to draw textured 2d rectangles …","","","Gets or creates a vertex shader module for drawing a …","","","","Texture that fills the rectangle","","","","Top left corner position in world space.","","","","","Where this instance is placed in world space and how its …","Transformation applies to line positions","Transformation applies to point positions","","","","<code>GpuBindGroup</code> pointing at the current image source and a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","The raw data from a depth texture.","","","","","","","","","","","","","","","","","","","","","","","","","","","Configures color mapping mode.","","","","","The extrinsics of the camera used for the projection.","The intrinsics of the camera used for the projection.","The actual data from the depth texture.","The dimensions of the depth texture in pixels.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Option outline mask id preference.","","The scale to apply to the radii of the backprojected …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Renders a generated skybox from a color gradient","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Adds a round cap at the end of a line strip (excludes …","Puts a equilateral triangle at the end of the line strip …","Adds a round cap at the start of a line strip (excludes …","Puts a equilateral triangle at the start of the line strip …","","","Data that is valid for a batch of line strips.","A line drawing operation. Encompasses several lines, each …","","","Internal, ready to draw representation of <code>LineBatchInfo</code>","Property flags for a line strip","Style information for a line strip.","Total maximum number of line strips per <code>LineDrawData</code>.","Total maximum number of line vertices per <code>LineDrawData</code>.","Disable color gradient which is on by default","","","","","","","","Defines an outline mask for an individual vertex ranges …","Returns the set containing all flags.","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","srgb color. Alpha unused right now","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","Returns an empty set of flags.","","","","","","Additional properties for the linestrip.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Number of vertices covered by this batch.","Transforms and uploads line strip data to be consumed by …","Returns the complement of this set of flags.","Optional outline mask setting for the entire batch.","","","","Radius of the line strip in world space","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","Transformation applies to line positions","Uniform buffer that changes for every batch of line strips.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Per-instance (as opposed to per-material/mesh!) tint color …","","","","","","","","","","","","","","","","Number of meshes out of <code>count</code> which have outlines. We put …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gpu mesh this instance refers to.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Optional cpu representation of the mesh, not needed for …","","Transforms and uploads mesh instance data to be consumed …","Optional outline mask setting for this instance.","","","","","","","","","","","","","","","","","","","","","","Where this instance is placed in world space and how its …","Element in the gpu residing instance buffer.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Format of the outline mask target.","","","","","What outline (if any) should be drawn.","","Holds two pairs of pixel coordinates (one for each layer).","","","","","","","","","","","","","","","","","","","","","","","","","Premultiplied RGBA color for the first outline layer.","Premultiplied RGBA color for the second outline layer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Default MSAA state for the outline mask target.","","Number of MSAA samples used for the outline mask target.","","","Outline radius for both layers in pixels. Fractional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Uses current outline and falls back to <code>other</code> if current is …","Keep in sync with <code>jumpflooding_step.wgsl</code>","Keep in sync with <code>outlines_from_voronoi.wgsl</code>","","","","","","","","","","","","","","","","","","","","","All this padding hurts. <code>step_width</code> be a PushConstant but …","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Textures are 2D since 1D textures are very limited in size …","If true, we shade all points in the batch like spheres.","Maximum number of vertices per <code>PointCloudDrawData</code>.","","Internal, ready to draw representation of …","Property flags for a point batch","Data that is valid for a batch of point cloud points.","A point cloud drawing operation. Expected to be recrated …","","","Description of a point cloud.","","","","","Defines an outline mask for an individual vertex ranges.","Returns the set containing all flags.","","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","Returns an empty set of flags.","","","","","","Additional properties of this point cloud batch.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Transforms and uploads point cloud data to be consumed by …","Returns the complement of this set of flags.","Optional outline mask setting for the entire batch.","","","Number of points covered by this batch.","Connected points. Must be at least 2.","","Radius of the point in world space","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","Transformation applies to point positions","Uniform buffer that changes for every batch of points.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Texture filter setting for magnification (a texel covers …","Texture filter setting for minification (several texels …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Vector that spans up the rectangle from its top left …","Vector that spans up the rectangle from its top left …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Tint that is multiplied to the rect, supports …","","Optional outline mask.","","","","Texture that fills the rectangle","","","","","Top left corner position in world space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Handle that is valid for a single frame","","Handle to a 2D resource.","No handle, causes error on resolve.","Resource handle that keeps the resource alive as long as …","A resource that lives until its last handle was dropped.","","","Handle to a resource that is stored in a resource manager.","","","","","A resources that lives only for a single frame.","Data required to create a texture 2d resource.","Texture manager for 2D textures.","","Data for the highest mipmap level. Must be padded …","","","","","","","","","","","","","","","This handle is only valid for this frame. Querying it …","","","","","","","","","","","","","","","Takes ownership of a mesh.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Accesses a given resource.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Handle that is valid for a single frame","No handle, causes error on resolve.","Resource handle that keeps the resource alive as long as …","A resource that lives until its last handle was dropped.","","Handle to a resource that is stored in a resource manager.","","","","","","A resources that lives only for a single frame.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","We store a refcounted handle along side every long lived …","","","Creates a new resource.","","","","","","","","","","","","","","","","","","","","","This handle is only valid for this frame. Querying it …","","","Handle to a 2D resource.","Data required to create a texture 2d resource.","Texture manager for 2D textures.","","","","","","","","","","","","","Creates a new 2D texture resource and schedules data …","","Data for the highest mipmap level. Must be padded …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Retrieves gpu handle.","Creates a new 2D texture resource and schedules data …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns a single pixel white pixel.","","Automatically sized, based on a view builder setting.","Like <code>Size::AUTO</code>, but larger by some small factor (~2).","A size of something in either world-units, screen-units, …","Same as <code>Size</code> but stored with a f16 float.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the size is an automatically determined …","","","","","Creates a new size in ui point units.","Creates a new size in scene units.","Get the point size of this, if stored as a point size.","Get the scene-size of this, if stored as a scene size.","","","","","","","","","","","","How <code>Size::AUTO</code> is interpreted.","Default value for clearing depth buffer to infinity.","","Color format used for the main target of the view builder.","Default depth state for enabled depth write &amp; read.","Default multisample state that any <code>wgpu::RenderPipeline</code> …","Depth format used for the main target of the view builder.","Enable MSAA always. This makes our pipeline less variable …","Puts the view space origin into the middle of the screen.","Orthographic projection with the camera position at the …","Configures the camera placement in the orthographic …","Perspective camera looking along the negative z view space …","How we project from 3D to 2D.","","<code>ViewBuilder</code> that can be shared between threads.","Basic configuration for a target view.","Puts the view space origin at the top-left corner of the …","The highest level rendering block in <code>re_renderer</code>. Used to …","","","","","","How <code>Size::AUTO</code> is interpreted.","","","","","","","","","","","","","","","","","","","","","","","","Composites the final result of a <code>ViewBuilder</code> to a given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Draws the frame as instructed to a temporary HDR target.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines the line radius for <code>crate::Size::AUTO</code> for lines.","","","","","","","","How many pixels are there per point. I.e. the ui scaling …","Determines the point radius when <code>crate::Size::AUTO</code>.","","","","","","","","Result of <code>ViewBuilder::setup_view</code> - needs to be <code>Option</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distance of the far plane to the camera.","Distance of the near plane.","Viewing angle in view space y direction (which is the …","Size of the orthographic camera view space y direction …","","","","","A Vec4 of pure padding (i.e. 16 bytes of padding)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collection of all wgpu resource pools.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Debug label of the bind group layout. This will show up in …","","","","","","","","","","","","","","","","","","","","","","","A reference-counter baked bind group.","","Resource pool for bind groups.","","","","","","","","Returns a reference-counted, currently unused bind-group. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Debug label of the bind group. This will show up in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base offset of the buffer. For bindings with …","Size of the binding, or <code>None</code> for using the rest of the …","Buffer creation descriptor.","A reference-counter baked buffer. Once all instances are …","","","","","Returns a reference-counted gpu buffer that is currently …","","Called by <code>RenderContext</code> every frame. Updates statistics …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Method to retrieve a resource from a weak handle (used by …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Debug label of a buffer. This will show up in graphics …","Allows a buffer to be mapped immediately after they are …","","","","","","Size of a buffer.","","","","","","","","","","","","","","","","Usages of a buffer. If the buffer is used in any way that …","","Generic resource pool for all resources that have varying …","","","All resources, including both resources that are in use …","","If true, a unused resources will be kept around for while …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Any resource that has been deallocated last frame. We keep …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Debug label of the pipeline layout. This will show up in …","","","","","","","","","","","","","","","","","","","","","","","","","","Renderpipeline descriptor, can be converted into …","A copy of <code>wgpu::VertexBufferLayout</code> with a <code>smallvec</code> for the …","","","","The stride, in bytes, between elements of this buffer.","The list of attributes which comprise a single vertex.","Generates attributes with successive shader locations …","","","","","","","","","","","","","","","","","","","","","The effect of draw calls on the depth and stencil aspects …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Debug label of the pipeline. This will show up in graphics …","The multi-sampling properties of the pipeline.","","","","","The properties of the pipeline at the primitive assembly …","The color state of the render targets.","","How often this vertex buffer is “stepped” forward.","","","","","","","","","","","","","","","","","","","","","The format of any vertex buffers used with this pipeline.","","","","","","","","","","","","","","","","","","","","","","","","Frame index in which this resource was (re)created.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Frame index in which a handle to this resource was last …","","","","","","","","","","","","","","","","How to deal with out of bounds accesses in the u (i.e. x) …","How to deal with out of bounds accesses in the v (i.e. y) …","How to deal with out of bounds accesses in the w (i.e. z) …","Valid values: 1, 2, 4, 8, and 16.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Debug label of the sampler. This will show up in graphics …","Maximum level of detail (i.e. mip level) to use","Minimum level of detail (i.e. mip level) to use","How to filter the texture when it needs to be magnified …","How to filter the texture when it needs to be minified …","How to filter between mip map levels","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Debug label of the shader. This will show up in graphics …","","","","","Path to the source code of this shader module.","","","","","","","","","","","","","","","Generic resource pool for all resources that are fully …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A reference-counter baked texture. Once all instances are …","","","","","","","Returns a reference-counted handle to a currently unused …","","Called by <code>RenderContext</code> every frame. Updates statistics …","","","","","","","","","","","","","","","","","","","","","","","","","","","Dimensions of the texture.","","","","","","","","","","","","","","","Format of the texture.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Method to retrieve a resource from a weak handle (used by …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Debug label of the texture. This will show up in graphics …","Mip count of texture. For a texture with no extra mips, …","","","","Number of bytes this texture is expected to take.","Sample count of texture. If this is not 1, texture must …","","Size of the texture. All components must be greater than …","","","","","","","","","","","","","","","","","","","","","Allowed usages of the texture. If used in other ways, the …","Copies the desc but changes the label.","Copies the desc but adds a string to the label."],"i":[0,2,4,2,4,2,0,0,0,10,10,10,10,10,2,2,2,2,2,0,0,0,0,0,2,2,2,4,10,0,2,2,2,2,2,2,0,0,0,0,2,4,0,0,0,0,0,2,2,4,2,4,0,2,2,4,2,4,41,4,2,4,0,2,4,111,94,2,4,2,4,92,70,2,4,2,4,111,0,0,0,0,0,0,0,0,0,41,0,2,4,0,2,4,2,4,2,4,41,65,2,4,2,4,2,4,2,41,0,71,70,0,0,0,71,2,4,2,2,2,2,4,4,4,4,2,2,4,2,4,4,2,4,2,2,4,2,4,4,4,2,4,57,2,4,2,0,2,4,0,41,0,2,4,0,0,2,4,2,4,41,2,4,4,2,4,2,2,4,42,0,2,0,41,4,4,4,0,207,207,207,207,207,207,207,207,92,66,0,41,2,4,70,0,41,41,0,57,2,4,41,0,92,94,94,41,2,4,2,2,4,2,4,4,2,4,2,4,207,207,2,4,2,4,2,4,2,4,111,92,111,94,0,71,0,0,0,0,0,0,0,0,0,0,0,25,29,25,25,25,30,29,25,29,30,25,29,30,25,30,29,29,25,25,29,29,29,30,25,29,30,25,29,30,25,29,30,25,29,29,25,25,29,30,25,29,30,25,29,30,25,25,29,29,25,25,30,30,25,29,30,25,29,30,25,29,30,25,30,29,29,30,25,29,238,0,0,0,238,238,238,0,0,238,238,238,238,238,238,238,238,238,238,238,0,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,47,0,47,0,47,59,47,59,47,47,47,47,47,59,47,59,47,47,59,47,59,47,47,47,59,47,59,59,47,59,47,47,59,47,47,47,0,47,59,47,59,47,59,47,59,47,0,41,0,41,0,0,0,41,41,41,41,55,54,53,239,41,55,54,53,239,55,41,41,55,54,53,239,41,55,54,53,239,41,41,55,54,53,239,41,55,54,53,53,239,239,41,239,41,55,54,53,239,54,53,54,55,41,41,41,55,54,53,239,41,55,54,53,239,41,41,53,239,41,41,41,54,41,41,41,41,55,54,53,239,41,55,54,53,239,41,55,54,53,239,41,55,54,53,239,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,61,63,61,63,61,61,61,61,63,61,63,61,63,61,63,240,63,63,61,63,61,63,63,61,240,63,0,61,63,61,63,61,61,0,61,63,61,63,61,63,0,61,63,0,0,0,66,0,0,65,66,67,65,66,67,57,65,66,67,57,65,66,67,65,66,67,67,65,67,57,65,66,67,57,65,66,67,57,65,65,66,67,57,65,66,67,57,65,66,65,66,65,65,66,66,67,65,66,66,67,57,65,65,66,57,67,65,66,67,57,65,65,66,67,57,65,57,0,66,57,65,57,57,65,66,67,65,66,65,66,67,57,65,66,67,57,65,66,67,57,65,66,67,57,57,0,0,0,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,0,74,18,74,18,70,74,18,70,70,74,70,70,74,18,74,18,74,18,74,18,74,18,70,74,18,74,74,18,74,0,74,18,74,18,74,70,74,18,74,18,74,18,74,18,74,18,0,0,75,75,75,76,75,76,75,75,75,75,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,75,76,76,76,75,75,75,75,75,75,76,76,75,76,75,76,75,76,75,75,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,90,90,90,90,90,90,90,90,94,90,94,90,92,94,90,92,94,92,92,94,90,92,94,90,92,94,90,92,94,90,90,92,92,94,92,90,92,94,90,92,94,90,92,94,94,94,94,90,92,92,92,92,94,94,94,90,92,94,90,92,94,90,92,94,90,92,94,92,92,94,90,0,0,0,0,85,101,102,103,101,101,103,85,101,102,103,85,101,102,103,85,101,102,103,85,101,102,103,85,101,102,103,85,101,102,103,85,101,102,103,85,101,102,103,85,101,102,103,0,102,102,101,103,85,85,101,102,103,85,101,102,103,85,101,85,102,0,102,85,101,102,103,85,101,102,103,85,101,102,103,85,101,102,103,85,101,102,103,102,102,102,85,85,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,107,107,107,107,107,107,107,0,0,0,0,0,108,108,108,108,109,110,111,108,111,111,108,109,110,111,108,109,110,109,109,111,110,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,108,109,109,110,108,108,111,108,109,110,111,108,109,110,111,108,109,110,111,111,110,111,109,109,108,110,110,109,110,111,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,109,110,111,109,110,109,109,111,110,108,117,117,0,0,0,0,0,0,123,0,0,0,0,0,0,165,166,0,0,165,166,116,117,0,117,0,0,0,0,0,0,0,0,241,242,0,0,0,0,123,117,95,112,87,99,115,146,99,115,131,117,117,96,113,117,117,117,117,117,136,150,150,126,0,242,126,126,0,126,126,164,117,117,117,242,117,117,117,117,117,117,164,164,112,136,117,117,0,87,117,146,125,162,117,95,112,95,0,87,0,164,117,164,126,87,150,0,95,112,242,0,112,243,142,243,136,126,0,131,131,0,142,117,0,164,164,164,117,164,117,117,117,117,87,95,112,0,0,121,121,122,122,121,122,121,121,121,122,122,121,122,121,122,121,122,122,121,122,121,122,121,122,121,121,122,122,121,122,121,122,121,122,121,122,121,0,0,0,0,0,123,123,123,124,125,124,131,126,131,123,124,125,126,131,123,124,125,123,124,125,123,124,125,126,0,131,126,123,126,126,126,126,126,131,123,124,125,126,131,123,124,125,126,131,123,124,125,131,126,131,123,124,125,123,126,131,123,124,125,0,126,131,123,124,125,125,126,131,123,124,125,125,124,126,131,126,124,131,131,123,124,125,126,131,123,124,125,126,131,123,124,125,126,131,123,124,125,126,131,123,124,125,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,0,133,134,133,134,133,133,133,134,134,133,134,133,134,133,134,134,133,134,133,134,133,134,133,133,134,134,133,134,133,134,133,134,133,134,133,96,96,96,96,138,0,0,0,0,0,0,0,0,99,99,96,0,138,135,99,96,136,135,95,96,99,135,99,137,137,96,96,96,96,96,96,96,96,95,137,135,99,96,136,138,95,137,135,99,96,136,138,135,99,96,136,135,99,96,136,96,136,96,96,137,137,96,136,95,137,135,99,96,136,138,95,137,135,99,96,136,138,96,95,137,135,99,96,136,138,137,95,137,135,99,96,136,138,96,96,138,96,138,96,136,96,96,96,96,96,138,138,95,137,135,99,96,136,138,138,96,96,96,96,96,96,0,96,95,137,135,99,96,136,138,96,96,96,95,137,135,99,96,136,138,96,96,96,95,95,99,96,95,96,137,138,136,96,137,137,96,138,96,96,96,135,99,96,136,138,96,95,137,135,99,96,136,138,95,137,135,99,96,136,138,95,137,135,99,96,136,138,96,95,137,135,99,96,136,138,135,95,0,0,0,142,143,144,142,143,144,142,143,144,142,143,144,142,143,144,143,142,143,144,142,143,144,142,143,144,142,143,144,144,143,142,143,144,142,143,144,142,143,144,142,143,144,144,142,143,143,142,142,143,144,142,143,144,142,143,144,142,143,144,142,143,144,144,0,0,0,0,145,146,87,146,147,87,147,145,146,87,147,145,146,145,146,145,146,145,145,147,87,87,147,145,146,87,147,145,146,87,147,145,146,147,87,147,145,146,87,147,145,146,0,87,87,147,145,146,146,87,147,145,146,87,145,146,87,147,147,147,145,146,87,147,145,146,87,147,145,146,87,147,145,146,87,147,145,146,87,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,152,152,152,97,0,0,0,0,0,152,97,150,151,151,152,152,152,153,152,153,97,150,151,152,153,97,150,151,97,150,151,97,150,151,150,150,152,153,152,152,153,97,152,153,97,150,151,152,153,97,150,151,152,153,97,150,151,153,152,153,97,150,151,97,97,97,150,152,153,97,150,151,0,152,153,97,150,151,152,153,97,150,151,97,97,152,152,152,152,152,152,150,153,153,152,152,97,152,97,150,151,152,153,97,150,151,152,153,97,150,151,152,153,97,150,151,152,153,97,150,151,152,97,0,0,155,156,155,156,155,156,155,156,155,156,156,156,155,156,155,156,155,156,155,156,155,156,155,156,155,156,155,156,155,156,156,155,155,156,155,156,155,156,155,156,155,156,0,113,115,116,0,0,0,0,0,0,0,113,157,115,157,112,113,115,157,115,158,158,113,113,113,113,113,113,113,113,112,243,158,113,157,115,116,112,243,158,113,157,115,116,113,157,115,113,157,115,113,113,113,158,158,113,112,243,158,113,157,115,116,112,243,158,113,157,115,116,113,112,243,158,113,157,115,116,158,112,243,158,113,157,115,116,113,113,116,113,116,113,112,113,113,113,113,113,116,116,112,243,158,113,157,115,116,113,113,113,113,113,0,113,112,243,158,113,157,115,116,113,113,113,112,243,158,113,157,115,116,113,113,113,112,115,113,112,113,158,112,243,116,243,113,158,158,113,113,113,113,113,157,115,116,113,112,243,158,113,157,115,116,112,243,158,113,157,115,116,112,243,158,113,157,115,116,113,112,243,158,113,157,115,116,157,112,0,0,159,160,159,160,159,160,159,160,159,160,159,160,159,160,159,160,159,160,160,160,159,160,159,160,159,160,159,160,160,159,159,159,160,159,160,159,160,159,160,159,160,160,165,166,165,166,0,0,0,0,0,0,161,162,161,163,164,163,165,166,161,162,164,163,165,166,161,162,161,162,161,162,163,164,164,164,163,165,166,161,162,164,163,165,166,161,162,164,163,165,166,161,162,163,161,164,163,165,166,161,162,164,164,165,166,164,163,165,166,161,162,0,164,163,165,166,161,162,162,164,163,165,166,161,162,164,162,164,163,163,163,164,164,164,161,162,164,164,163,165,166,161,162,164,163,165,166,161,162,164,163,165,166,161,162,164,163,165,166,161,162,0,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,0,0,168,169,168,169,168,168,168,169,169,168,169,168,169,168,169,169,168,169,168,169,168,169,168,168,169,168,169,168,169,168,169,168,169,168,105,177,0,0,177,177,86,0,105,0,0,0,105,105,86,0,0,84,182,84,182,182,182,170,170,0,84,0,84,0,84,182,244,244,245,245,0,0,0,171,170,170,171,170,171,171,171,171,170,171,171,170,171,170,171,171,170,171,170,171,171,171,171,170,171,171,170,171,171,170,171,170,171,170,170,170,171,171,171,170,171,170,171,170,171,170,171,105,177,177,177,86,105,0,0,0,0,105,105,86,177,86,174,174,177,105,86,174,177,105,86,174,177,86,177,86,174,174,177,105,86,174,177,105,86,174,177,105,86,174,177,105,86,177,105,177,105,177,105,105,174,174,177,105,86,174,174,177,105,86,174,177,105,86,174,105,174,174,177,86,105,174,177,105,86,174,177,105,86,174,177,105,86,174,177,105,86,244,244,245,245,0,0,0,180,84,84,182,84,180,182,84,180,180,180,182,84,84,182,182,84,180,182,84,180,84,182,84,180,182,84,180,182,182,84,180,84,84,182,182,84,180,182,84,180,180,182,84,84,84,180,182,84,180,182,84,180,182,84,180,182,84,180,84,84,182,98,98,0,0,98,183,98,183,98,183,98,183,98,183,98,183,98,183,98,98,183,98,183,98,98,98,183,183,98,183,98,183,98,98,183,98,98,98,98,98,98,98,98,183,98,183,98,183,98,183,98,183,0,188,0,188,188,188,188,188,184,185,0,185,0,0,0,0,184,0,0,184,185,186,187,187,246,247,246,188,184,185,186,187,247,246,188,184,185,186,187,184,185,186,187,184,185,186,187,188,188,186,187,246,247,246,188,184,185,186,187,247,246,188,184,185,186,187,186,247,246,188,184,185,186,187,188,247,247,188,247,246,188,184,185,186,187,184,185,186,187,247,246,188,184,185,186,187,247,246,188,184,185,186,187,247,246,188,184,185,186,187,186,246,246,246,187,187,188,247,187,186,187,188,188,247,246,187,186,188,188,184,185,186,187,247,246,188,184,185,186,187,247,246,188,184,185,186,187,247,246,188,184,185,186,187,247,246,188,184,185,186,187,187,248,248,249,249,248,0,0,0,0,0,0,0,0,0,0,0,0,0,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,199,200,201,199,200,201,199,200,201,200,201,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,190,191,191,192,192,193,193,194,194,194,195,195,195,196,196,196,197,197,197,198,198,198,199,199,200,200,201,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,202,196,190,191,193,195,190,191,193,195,190,191,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,192,193,194,195,196,197,198,199,200,201,202,190,191,198,192,193,194,195,196,197,198,192,193,194,195,196,197,198,196,197,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,56,56,207,56,207,0,56,56,207,56,207,56,207,56,207,56,207,0,56,207,56,207,56,207,207,207,207,207,207,207,207,207,0,56,0,56,0,0,56,0,56,0,56,0,56,207,207,207,56,207,56,207,56,207,56,207,0,0,0,104,209,208,104,209,208,104,209,208,104,209,104,209,104,104,104,209,208,104,209,208,104,209,208,104,104,209,208,104,209,208,209,104,209,104,209,104,209,104,104,209,208,104,209,208,208,104,209,104,209,208,104,209,208,209,208,104,208,104,104,209,104,209,208,104,209,208,104,209,208,104,209,208,0,0,43,43,0,0,0,43,214,77,43,212,77,77,211,212,211,214,77,43,212,211,214,77,43,212,211,214,77,43,212,214,77,43,212,214,214,214,211,214,77,77,43,212,211,214,77,43,212,211,214,214,77,43,212,211,214,77,43,212,211,212,214,43,212,214,43,212,214,43,212,214,214,77,43,212,211,214,43,212,214,43,212,214,77,43,212,211,214,77,43,212,211,212,212,211,214,211,77,212,214,214,77,43,212,214,77,43,212,211,214,77,43,212,211,214,77,43,212,211,214,77,43,212,211,250,250,250,0,0,0,0,216,215,27,215,27,216,215,27,216,215,27,216,215,216,215,216,216,216,27,216,215,27,216,215,27,216,216,215,27,216,215,27,216,215,216,215,216,215,216,216,215,27,27,216,215,216,215,216,215,27,216,215,27,215,215,27,216,27,215,216,215,216,215,27,216,215,27,216,215,27,216,215,27,216,215,27,215,0,0,0,0,251,218,252,218,130,251,218,130,251,218,130,218,218,130,130,251,218,130,251,218,130,251,218,130,251,218,218,130,251,218,218,130,130,251,218,130,130,251,218,251,218,252,218,218,218,130,251,218,130,251,218,130,251,218,130,251,218,0,0,0,0,221,222,220,223,221,222,220,223,221,222,220,221,222,221,222,221,221,221,220,223,221,222,220,223,221,222,220,221,223,221,222,220,223,221,222,220,222,221,222,221,222,221,222,223,221,221,222,220,221,222,220,220,221,222,223,221,222,220,223,221,222,220,222,223,220,221,220,221,221,222,223,221,222,220,223,221,222,220,223,221,222,220,223,221,222,220,0,0,0,0,227,149,228,149,149,149,225,227,149,228,225,227,149,228,225,227,149,228,227,149,228,227,228,227,227,225,228,227,149,228,225,227,149,228,225,227,227,149,228,225,227,149,228,225,227,149,228,227,149,228,227,149,228,228,228,227,227,149,228,225,227,149,228,225,225,227,149,228,227,149,228,225,227,149,228,225,228,228,225,227,228,225,228,228,227,149,227,149,228,149,227,149,228,225,227,149,228,225,227,149,228,225,227,149,228,225,228,228,228,140,0,140,0,140,236,140,236,140,236,140,236,140,236,140,236,140,140,140,140,140,236,236,140,236,140,236,140,236,140,140,236,140,236,140,236,140,236,140,0,0,0,231,232,232,232,232,232,213,231,232,213,231,232,213,231,232,231,232,231,231,231,232,213,231,232,213,231,232,213,231,231,232,213,231,232,213,231,232,231,232,231,232,231,231,232,213,231,232,213,213,231,232,231,232,213,231,232,213,232,232,232,232,232,232,213,231,213,231,231,232,231,232,213,231,232,213,231,232,213,231,232,213,0,0,0,120,234,226,120,234,226,120,234,226,120,234,120,234,120,234,120,120,226,120,234,226,120,234,226,120,120,234,226,120,234,226,120,234,120,234,120,234,120,120,234,226,226,120,234,226,226,120,234,120,234,226,120,234,226,234,226,120,226,120,234,120,234,120,234,226,120,234,226,120,234,226,120,234,226,0,0,253,237,253,237,237,237,253,237,253,237,253,237,253,237,253,237,237,237,237,253,237,253,237,237,237,237,253,237,253,237,253,237,253,237,253,237,253,237,0,0,0,0,0,127,128,181,128,181,129,127,128,181,129,127,128,181,127,128,127,128,127,127,127,181,129,129,127,128,181,129,127,128,181,127,128,129,127,128,181,129,127,128,181,127,128,127,128,127,128,128,129,127,127,128,181,181,127,128,127,128,129,127,128,181,129,127,128,181,128,128,181,127,181,128,128,127,128,129,127,128,181,129,127,128,181,129,127,128,181,129,127,128,181,129,127,128,181,128,128,128],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[2,3],[4,5],0,[[4,4],4],[2,2],[4,4],0,[2,3],[4,5],0,0,[[]],[[]],[[]],[[]],0,[[[7,[6]]],[[9,[8]]]],[2,2],[4,4],[[]],[[]],0,0,[5],[5],[5],[[10,5]],[5],[5],0,0,0,0,[[],2],[[],4],0,[11],[11],[11],[11],[[],[[12,[2]]]],[[],[[12,[4]]]],0,0,[[]],[[]],[11],[11],[[2,2],13],[[4,4],13],[[],13],0,0,0,[[[7,[6]]],13],0,0,0,0,[[2,14],[[12,[15]]]],[[4,14],[[12,[15]]]],[[]],[16,2],[17,2],[4,2],[[]],[16,4],[2,4],[17,4],[3,2],[3,2],[5,4],[3,2],[5,4],[[5,5],4],[[3,3,3],2],[[5,5,5],4],[[3,3,3],2],[[3,3,3,3],2],[[5,5,5,5],4],[[3,3,3,3],2],[[5,5,5,5],4],[[3,3,3,3],4],[[3,3,3,3],4],[3,2],[5,4],0,[2,3],[4,5],[[2,5],2],[[],18],[[],19],[[],19],0,0,[5],[2],[4],0,0,[[2,11],3],[[4,11],5],[[2,11],3],[[4,11],5],0,[[],11],[[],11],[4,5],[[]],[[]],[2,13],[[],13],[[],13],0,0,[[2,5],2],0,0,[[4,4],4],[[4,5],4],[[4,5],4],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,[2,3],[4,5],[[[7,[6]]],[[9,[[22,[21]]]]]],0,0,0,0,0,[2,12],[4,12],0,0,0,0,0,0,[2],[4],[2],[2,2],[4,4],[[]],[[]],[4],[2],[4],[2],[4],0,0,[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[25],[[25,26,27,11],[[29,[28]]]],[[30,11,19,19],[[29,[28]]]],[29],[25],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[29,31,32,33]],[[29,31,34,[24,[35]],[24,[35]],36]],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[11],[11],[11],[[29,37]],[29],[[25,14],38],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[]],[[]],[[]],[39,25],[29,11],[29],[25],0,[30,19],[[40,19],19],0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],0,0,[[],24],[[],24],[[],24],0,0,0,0,0,0,[[]],[[]],[[41,42,28],43],[[41,42,44],[[45,[43]]]],[11],[11],[[]],[11],[[]],[[],11],[[]],[[],12],[[],12],[[],23],[[],24],0,0,0,0,0,0,0,[1],[[]],[[]],[10,10],[[]],[[10,10],46],[5],[5],[5],[[10,5]],[5],[5],[11],[11],[[]],[11],[[10,10],13],[[],13],[[10,14],38],[[]],[5],[[],11],[[]],[[10,10],[[24,[46]]]],[[]],[[],12],[[],12],[[],23],[[],24],0,0,0,0,[1],[[]],[[]],[[]],[[]],[[47,48],9],[47,47],[[]],[[],47],[11],[11],[11],[11],[47,49],[[]],[[]],[11],[11],[47,50],[[47,14],38],[[]],[[]],0,[[],11],[[],11],[[]],[[]],[47,51],0,[47,48],[47,13],[47,13],[[],52],[[]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,0,[41],[41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],0,[[]],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[53],[11],0,0,0,[[]],[[]],[[]],[[]],[[]],[54,24],[53,31],[[54,55,56,26,57]],0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],0,[[[32,[26]],[32,[58]],59],41],[26,53],0,[41],0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],0,[1],[[]],[[]],[42,42],[[]],[[],42],[11],[11],[[]],[11],[[42,42],13],[[],13],[[42,14],38],[21,42],[60,42],[[[24,[21]]],42],[[]],[42,[[24,[21]]]],[[],19],[42],[[],11],[[]],0,[[42,21],42],[[]],[[],12],[[],12],[[],23],[[],24],0,0,0,0,[[]],[[]],[[]],[[]],[61],0,[[],61],[11],[11],[11],[11],[[]],[[]],[11],[11],[62,13],[[63,63],13],[[],13],0,[[63,14],38],[[]],[[]],[[],19],[[61,64]],[[]],[63],0,[[],11],[[],11],[[]],[[]],[61],0,0,[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,65],[66,66],[67,67],[[]],[[]],[[]],0,[[],65],[[],67],[[],[[57,[68]]]],[11],[11],[11],[11],[11],[11],[11],[11],0,[[]],[[]],[[]],[[]],[11],[11],[11],[11],[[65,65],13],[[66,66],13],[[],13],[[],13],[[65,14],38],[[65,14],38],[[66,14],38],[[66,14],38],[[67,14],38],[[]],[[]],[[[69,[8]]],66],[[]],[[]],[[],65],[21,[[12,[65]]]],[21,[[12,[66]]]],0,0,[[],11],[[],11],[[],11],[[],11],[[65,11,[7,[6]]]],[[]],[[]],[[]],[[]],[65,37],[70,[[57,[70]]]],[[],20],0,[[[57,[70]],[7,[6]]],[[9,[67]]]],[[65,[7,[6]]]],[[[57,[70]],[7,[6]],[7,[6]]],[[24,[8]]]],0,[[]],[[]],[[]],[[],60],[[],60],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[70,65],[[57,[70]]]],0,0,0,0,[[]],[[]],[[71,57],[[72,[8]]]],[11],[11],[[]],[11],0,0,[[]],[73],[73],[[],11],[[]],[[],[[9,[71]]]],[[],12],[[],12],[[],23],[[71,[7,[6]]],9],[[],24],[[71,57,[7,[6]],13],[[9,[8]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[7,[6]]],[[9,[8]]]],[[74,[7,[6]]],[[9,[8]]]],[[18,[7,[6]]],[[9,[8]]]],[[[7,[6]]],9],[[[7,[6]]],9],[[74,[7,[6]]],9],[[[7,[6]],[22,[21]]],9],[[[7,[6]],[22,[21]]],9],[[74,[7,[6]],[22,[21]]],9],[[],18],[11],[11],[11],[11],[[]],[[]],[11],[11],[[[7,[6]]],13],[[74,[7,[6]]],13],[[18,[7,[6]]],13],0,[[]],[[]],[[],74],[[],18],[[],11],[[],11],[[]],[[]],[[],74],[[[7,[6]]],[[9,[[22,[21]]]]]],[[74,[7,[6]]],[[9,[[22,[21]]]]]],[[18,[7,[6]]],[[9,[[22,[21]]]]]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,[1],0,0,[[]],[[]],[[]],[[]],0,0,[75,75],[[]],[[76,56,26,43],77],0,[11],[11],[11],[11],[[]],[[]],[11],[11],[[]],[[]],[[],11],[[],11],[[]],[[]],[[],13],0,0,[[56,26],76],0,0,0,0,0,[[]],0,[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,[[],78],0,0,[79,5],[[45,80,81,82]],[[83,84],[[9,[85]]]],[[21,86,41],[[9,[[45,[87]]]]]],[88,[[24,[89]]]],[[86,41],[[9,[[45,[87]]]]]],0,0,0,[[90,91,91],92],[[90,81],92],[[90,79,79,79],92],[[90,91,91,91],92],[[90,79,79],92],[[90,91,91],92],[[90,37],92],[[90,37],92],[[90,37],92],[[90,37],92],[[90,37,93]],[[94,[69,[42]]],90],[90,95],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[92,2],92],[[],[[94,[68]]]],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[90],[11],[11],[92],[11],[[92,96],92],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[]],[[]],[[]],[94,13],[94,37],[94,37],[[90,97],90],[[92,97],92],0,[[92,98],92],0,0,0,[[94,41],99],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[92,92],0,0,[[90,100],90],0,0,0,0,[1],[1],[1],[1],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,85],[101,101],[102,102],[103,103],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],0,0,0,0,0,[[41,104,85],[[12,[102,105]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,0,[1],0,[[]],[[]],[106,106],[[]],[11],[11],[[]],[11],0,[[]],[[],11],[[]],[[],13],[[]],[[],12],[[],12],[[],23],[[],24],0,[1],[[]],[[]],[107,107],[[]],[11],[11],[[]],[11],[[107,14],38],[[]],[[],11],[[]],[[],13],[[],93],0,0,[[]],[[],12],[[],12],[[],23],[[],24],[[]],0,0,0,0,[[108,79],109],[[108,91],109],[[108,11,37],110],[[108,11,37],110],0,0,[[111,[69,[42]]],108],[108,112],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[109,2],109],0,0,[[110,37],110],0,[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[11],[11],[108],[109],[11],[11],[108],[[108,113],108],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[111,37],[111,37],0,[41,111],[[109,97],109],0,[[108,97],108],[[110,[114,[93]],97],110],[[110,37],110],[[109,98],109],0,[[111,41],[[12,[115,116]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[109,109],[[110,37],110],0,0,0,0,0,0,0,[[108,100],108],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],0,0,0,0,0,0,0,0,0,[[117,[69,[[118,[117]]]]]],[[117,[69,[[118,[117]]]]]],0,0,[[117,[69,[[118,[117]]]]]],[[]],[[]],[117,117],[[]],0,0,0,0,0,[[55,56,26,57]],0,0,0,0,0,0,[11],[11],[[]],[[56,117,119],9],[11],[93,117],[117,93],[[117,118],13],[[117,117],13],[[],13],0,0,0,0,[[117,14],38],[[]],0,0,[[],11],0,0,0,[[]],0,0,0,0,0,0,0,[117],0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,[[56,26,57],120],0,[[117,[69,[[118,[117]]]]]],0,0,0,0,[[]],0,[[],12],[[],12],[[],23],[[],24],0,0,0,0,0,[1],0,0,[[]],[[]],[[]],[[]],[121,121],[[]],[[55,56,26,57],122],[11],[11],[11],[11],[[]],[[]],[[122,56,117,119,121],9],[11],[11],[[]],[[]],[[],11],[[],11],[[]],[[]],[[41,32],121],[[]],0,[[]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,[1],[1],[1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[123,123],[124,124],[125,125],[[]],[[]],[[]],0,[[41,126,13],[[32,[[130,[127,128,129]]]]]],[[55,56,26,57],131],[[],126],[[],123],0,0,0,0,[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[[]],[[131,56,117,119],9],[11],[11],[11],[11],[11],[[123,14],38],[[]],[[]],[[]],[[]],[[]],0,[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[]],[[]],[[]],[41,[[12,[125,105]]]],0,0,[[]],0,0,0,0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],0,[1],[[]],[[]],[132,132],[[]],0,0,0,[11],[11],[[]],[11],0,[[]],[[],11],[[]],[[],13],0,0,[[]],[[],12],[[],12],[[],23],[[],24],0,0,[1],[[]],[[]],[[]],[[]],[133,133],[[]],[[55,56,26,57],134],[11],[11],[11],[11],[[]],[[]],[[134,56,117,119,133],9],[11],[11],[[]],[[]],[[],11],[[],11],[[]],[[]],[41,133],[[]],0,[[]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],0,0,[[],96],0,0,0,0,0,[[96,96],96],[[96,96]],[[96,96],96],[[96,96]],[96,3],0,[[96,96],96],[[96,96]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[135,135],[99,99],[96,96],[136,136],[[]],[[]],[[]],[[]],[[96,96],46],0,[96,96],[[96,96],13],[[137,41,42,43,[114,[93]],[118,[117]]],135],[[55,56,26,57],137],[[],96],[[],136],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[96,96],96],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[137,56,117,119],9],[11],[11],[11],[11],[11],[11],[11],[[],96],[[96,96],13],[[138,138],13],[[],13],[[],13],[[96,139]],0,[[96,14],38],[[96,14],38],[[96,14],38],[[96,14],38],[[96,14],38],[[138,14],38],[[138,14],38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[140,138],[3,[[24,[96]]]],[3,96],[3,96],[139,96],[[],19],[5,5],0,[96],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[96,96]],[[96,96],96],[[96,96],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[96,13],[96,13],[[],13],0,0,[41,[[12,[99,138]]]],[96,96],0,[[96,96],[[24,[46]]]],[[]],[141],0,[[96,96]],0,0,[[96,96,13]],[138,[[24,[62]]]],[[96,96],96],[[96,96]],[[96,96],96],[[]],[[]],[[]],[[]],[[],60],[[96,96]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[96,96],96],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[142,142],[143,143],[144,144],[[]],[[]],[[]],0,[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[11],[11],[11],0,0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[],13],[[],13],[[],13],0,0,0,0,0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],0,0,0,0,0,[1],[1],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[145,145],[146,146],[[]],[[]],0,0,[[55,56,26,57],147],[[],87],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[[147,56,117,119],9],[11],[11],[11],[11],[[]],[[]],[[]],[[]],0,0,[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[]],[[]],0,0,[41,[[9,[146]]]],0,[[]],0,0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],0,0,[1],0,[[]],[[]],[148,148],[[]],[11],[11],[[]],[11],[[]],[[],11],[[]],[[],13],0,[[]],[[],12],[[],12],[[],23],[[],24],[[],149],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[97,97],[150,150],[151,151],[[]],[[]],[[]],0,0,[[152,56,31],[[12,[151,140]]]],[[153,41,127,150],77],[[41,42,32]],[[150,41,42]],[[55,56,26,57],153],[[],97],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[[]],[[153,56,117,119,151],9],[11],[11],[11],[11],[11],[[97,97],13],[[],13],[[97,14],38],[[150,14],38],[[]],[[]],[[]],[[]],[[]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[97,13],[97,13],0,[47,154],0,[47,93],0,[[41,150,42],152],0,[[]],0,0,0,[[3,3],97],[[152,31],119],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],0,[[97,97],97],0,0,[1],[1],[[]],[[]],[[]],[[]],[155,155],[156,156],[[]],[[]],0,0,[11],[11],[11],[11],[[]],[[]],[11],[11],0,0,[[]],[[]],[[],11],[[],11],[[]],[[]],[[],13],[[],13],0,0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],0,0,[[],113],0,0,0,0,0,[[113,113],113],[[113,113]],[[113,113],113],[[113,113]],[113,93],0,[[113,113],113],[[113,113]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[113,113],[157,157],[115,115],[[]],[[]],[[]],[[113,113],46],[113,113],[[113,113],13],[[158,41,42,43,[114,[93]],[118,[117]]],157],[[55,56,26,57],158],[[],113],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[113,113],113],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[158,56,117,119],9],[11],[11],[11],[11],[11],[11],[11],[[],113],[[113,113],13],[[116,116],13],[[],13],[[],13],[[113,139]],0,[[113,14],38],[[113,14],38],[[113,14],38],[[113,14],38],[[113,14],38],[[116,14],38],[[116,14],38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,[[24,[113]]]],[93,113],[93,113],[139,113],[[],19],0,[113],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[113,113]],[[113,113],113],[[113,113],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[113,13],[113,13],[[],13],0,[[41,111],[[12,[115,116]]]],[113,113],0,[[113,113],[[24,[46]]]],[[]],0,0,[141],0,[[113,113]],0,0,[[113,113,13]],[[113,113],113],[[113,113]],[[113,113],113],[[]],[[]],[[]],[[],60],[[113,113]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[113,113],113],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[159,159],[160,160],[[]],[[]],[11],[11],[11],[11],[[]],[[]],[11],[11],0,0,[[]],[[]],[[],11],[[],11],[[]],[[]],[[],13],[[],13],0,0,0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,[1],[1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[161,161],[162,162],[[]],[[]],[[55,56,26,57],163],[[],164],0,[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[163,56,117,119],9],0,[11],[11],[11],[11],[11],[11],0,0,[[165,14],38],[[166,14],38],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[41,[[12,[162,105]]]],0,[[]],0,0,0,0,0,[[]],[[]],0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,[1],[[]],[[]],[167,167],[[]],0,[11],[11],[[]],[11],0,0,0,[[]],[[],11],[[]],[[],13],0,0,[[]],0,[[],12],[[],12],[[],23],[[],24],0,0,[1],[[]],[[]],[[]],[[]],[168,168],[[]],[[55,56,26,57],169],[11],[11],[11],[11],[[]],[[]],[[169,56,117,119,168],9],[11],[11],[[]],[[]],[[],11],[[],11],[[]],[[]],[41,168],0,[[]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[170,19]],[[]],[[]],[[]],[[]],[171,171],[[]],[[171,171],46],[[170,41,85,86],[[12,[172,105]]]],[171,173],[[],171],[11],[11],[11],[11],[[],[[12,[171]]]],[[]],[[]],[11],[11],[[171,171],13],[[],13],[[171,14],38],[[]],[173,171],[[]],[[170,172],[[12,[102,105]]]],[[],19],[171],[[],11],[[],11],[[]],[[]],0,0,[147,170],[[171,171],[[24,[46]]]],[171,12],[[]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[174,19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[174,19],[[12,[105]]]],[[[177,[[0,[175,176]]]]],[[177,[[0,[175,176]]]]]],[86,86],[[]],[[]],[[],[[174,[176]]]],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[[[177,[[0,[178,176]]]],177],13],[[105,105],13],[[],13],[[],13],[[[177,[[0,[179,176]]]],14],38],[[105,14],38],[[105,14],38],0,[[]],[[]],[[]],[[]],[[174,177],[[12,[105]]]],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],0,[141],0,[[174,86],177],[[]],[[]],[[],60],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,0,0,[1],0,[[84,19]],[[]],[[]],[[]],[[]],[[]],[[]],[180,180],[[]],[[],[[45,[3]]]],[[84,181,182],180],[[26,58,181,182],180],0,[11],[11],[11],[11],[11],[11],0,[[]],[[]],[[]],[11],[11],[11],0,[[]],[[]],[[]],[[84,180],[[12,[[32,[[130,[127,128,129]]]],105]]]],[[84,19,181,182],180],0,[[],11],[[],11],[[],11],[[]],[[]],[[]],[[],180],0,[[[32,[26]],[32,[58]],181],84],0,0,[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],0,[84,180],0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[98,98],[183,183],[[]],[[]],[11],[11],[11],[11],[[],[[12,[98]]]],[[]],[[]],[11],[11],[[98,98],13],[[98,14],38],[[]],[98,183],[[]],[[],11],[[],11],[[]],[[]],[98,13],[[],13],[[],13],[[98,5]],[[98,5]],[5,98],[5,98],[98,[[24,[5]]]],[98,[[24,[5]]]],[98,12],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[184,184],[185,185],[186,186],[187,187],[[]],[[]],[[]],[[]],[[188,41,119,91],9],[[],188],[[],186],[[],187],0,[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[186]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[188,41,4],[[9,[189]]]],0,0,[[188,41,117,119]],[11],[11],[11],[11],[11],[11],[11],[[184,14],38],[[185,14],38],[[186,14],38],[[187,14],38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[188,188],0,0,0,0,[186,12],0,[[188,41,187],[[9,[188]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],202],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[]],[5,190],[93,191],[[]],[91,192],[[]],[91,193],[[]],[[]],[203,194],[[],194],[[],195],[203,195],[[]],[[]],[204,196],[79,196],[204,197],[[]],[79,197],[[]],[205,198],[4,198],[[]],[206,199],[[]],[100,200],[[]],[81,201],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[],56],[[],207],[11],[11],[11],[11],[[]],[[]],[11],[11],0,[[]],[[]],[[],11],[[],11],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[56,207],0,0,0,[207,19],0,[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,[1],[1],[[208,19]],[[]],[[]],[[]],[[]],[[]],[[]],[104,104],[209,209],[[]],[[]],[[104,104],46],[104,173],[[],104],[[],209],[[],208],[11],[11],[11],[11],[11],[11],[[],[[12,[104]]]],[[]],[[]],[[]],[11],[11],[11],0,[[104,104],13],[[209,209],13],[[],13],[[],13],[[104,14],38],[[209,14],38],[[]],[173,104],[[]],[[]],[[],19],[[],19],[[208,26,209],104],[[208,104],[[12,[210,140]]]],[104],[209],[[],11],[[],11],[[],11],[[]],[[]],[[]],0,[208,11],[[104,104],[[24,[46]]]],0,[104,12],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],0,0,0,0,0,0,0,0,[1],[1],[1],[1],0,0,[[211,26,56,212],77],[212,13],[[211,19,181,27,213]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[214,214],[77,77],[43,43],[212,212],[[]],[[]],[[]],[[]],[[214,214],46],[214,173],[[],214],[[],211],[11],[77],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[214]]]],[[]],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[11],0,[[214,214],13],[[43,43],13],[[212,212],13],[[],13],[[],13],[[],13],[[214,14],38],[[43,14],38],[[212,14],38],[173,214],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[214],[43],[212],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],0,0,[211,11],[[214,214],[[24,[46]]]],0,0,[212,19],[214,12],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,0,0,[1],[1],[[27,26,215],[[32,[[130,[216,215,217]]]]]],[215,13],[[27,19]],[[]],[[]],[[]],[[]],[[]],[[]],[216,216],[215,215],[[]],[[]],[[216,216],46],[216,173],[[],216],[[],27],[11],[11],[11],[11],[11],[11],[[],[[12,[216]]]],[[]],[[]],[[]],[11],[11],[11],[[216,216],13],[[215,215],13],[[],13],[[],13],[[216,14],38],[[215,14],38],[[]],[173,216],[[]],[[]],[[27,216],[[12,[[32,[[130,[216,215,217]]]],140]]]],[[],19],[[],19],[216],[215],[[],11],[[],11],[[],11],[[]],[[]],[[]],0,0,[27,11],[[216,216],[[24,[46]]]],0,[215,19],[216,12],0,[[]],[[]],[27,19],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],0,0,0,0,0,0,[[218,219],[[32,[130]]]],[[],13],[[218,19,73]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[218,[176]]]],[11],[130],[11],[11],[11],[11],[11],[[]],[[]],[[]],[11],[11],[218],[11],[[]],[[]],[[]],[218,[[12,[[32,[130]],140]]]],0,[[],11],[[],11],[[],11],0,[[]],[[]],[[]],0,[218,11],[[],19],0,[218,19],0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],0,0,0,0,[1],[1],[[220,19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[221,221],[222,222],[[]],[[]],[[221,221],46],[221,173],[[],221],[[],220],[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[221]]]],[[]],[[]],[[]],[[]],[11],[11],[11],[11],0,[[221,221],13],[[222,222],13],[[],13],[[],13],[[221,14],38],[[222,14],38],[[]],[[]],[173,221],[[]],[[]],[[],19],[[],19],[[220,26,222,208],221],[[220,221],[[12,[223,140]]]],[221],[222],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],0,0,[220,11],[[221,221],[[24,[46]]]],0,[221,12],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],0,0,0,0,[1],[1],[1],0,0,[[93,37],224],[[225,26,19,226,220]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[227,227],[149,149],[228,228],[[]],[[]],[[]],[[227,227],46],[[228,26,220,226],[[9,[229]]]],[227,173],[[],227],[[],225],0,[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[227]]]],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[[227,227],13],[[149,149],13],[[228,228],13],[[],13],[[],13],[[],13],[[227,14],38],[[149,14],38],[[228,14],38],0,0,[[]],[173,227],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[225,26,228,220,226],227],[[225,227],[[12,[229,140]]]],[227],[149],[228],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],0,0,[225,11],[[227,227],[[24,[46]]]],0,0,0,0,[227,12],0,[[]],[[]],[[]],[149,230],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[11],[11],[11],[11],[[]],[[]],[11],[11],[[140,140],13],[[],13],[[140,14],38],[[140,14],38],0,[[]],[[]],[[],11],[[],11],[[]],[[]],0,[141],[[],60],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,[1],[1],0,0,0,0,[[213,19]],[[]],[[]],[[]],[[]],[[]],[[]],[231,231],[232,232],[[]],[[]],[[231,231],46],[231,173],[[],231],[[],232],[[],213],[11],[11],[11],[11],[11],[11],[[],[[12,[231]]]],[[]],[[]],[[]],[11],[11],[11],[[231,231],13],[[232,232],13],[[],13],[[],13],[[231,14],38],[[232,14],38],[[]],[173,231],[[]],[[]],[[],19],[[],19],[[213,26,232],231],[[213,231],[[12,[233,140]]]],[231],[232],[[],11],[[],11],[[],11],[[]],[[]],[[]],0,0,0,0,0,0,[213,11],[[231,231],[[24,[46]]]],0,[231,12],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],0,0,0,[1],[1],[[226,26,57,19,72]],[[]],[[]],[[]],[[]],[[]],[[]],[120,120],[234,234],[[]],[[]],[[120,120],46],[[234,26,57],235],[120,173],[[],120],[[],226],[11],[11],[11],[11],[11],[11],[[],[[12,[120]]]],[[]],[[]],[[]],[11],[11],[11],[[120,120],13],[[234,234],13],[[],13],[[],13],[[120,14],38],[[234,14],38],[173,120],[[]],[[]],[[]],[[226,120],[[12,[235,140]]]],[[],19],[[],19],[[226,26,57,234],120],[[226,120],[[12,[236,140]]]],[120],[234],[[],11],[[],11],[[],11],[[]],[[]],[[]],0,[226,11],[[120,120],[[24,[46]]]],0,[120,12],0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],0,0,[[]],[[]],[[]],[[]],0,[[],[[237,[176]]]],[11],[11],[11],[11],[[]],[[]],[11],[11],[[]],[[]],[[237,219]],[237,[[12,[140]]]],[237,[[12,[236,140]]]],[[],11],[[],11],[[]],[[]],0,[237,11],[[237,73]],0,0,0,[24,[[12,[140]]]],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],24],[[],24],0,0,0,0,0,[1],[1],[[181,26,128],[[32,[[130,[127,128,129]]]]]],[128,13],[[181,19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[127,127],[128,128],[[]],[[]],[[127,127],46],[127,173],[[],127],[[],181],0,[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[127]]]],0,[[]],[[]],[[]],[[]],[11],[11],[11],[11],[[127,127],13],[[128,128],13],[[],13],[[],13],[[127,14],38],[[128,14],38],0,[[]],[173,127],[[]],[[]],[[]],[[181,127],[[12,[[32,[[130,[127,128,129]]]],140]]]],[[],19],[[],19],[127],[128],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],0,0,[181,11],[[127,127],[[24,[46]]]],0,[128,19],0,[127,12],0,0,[[]],[[]],[181,19],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],0,[[128,42],128],[[128,21],128]],"p":[[3,"Private"],[3,"Color32"],[15,"u8"],[3,"Rgba"],[15,"f32"],[3,"Path"],[8,"AsRef"],[3,"PathBuf"],[6,"Result"],[4,"ColorMap"],[15,"usize"],[4,"Result"],[15,"bool"],[3,"Formatter"],[3,"Error"],[3,"HsvaGamma"],[3,"Hsva"],[3,"OsFileSystem"],[15,"u64"],[6,"RecommendedFileResolver"],[15,"str"],[4,"Cow"],[3,"TypeId"],[4,"Option"],[3,"CpuWriteGpuReadBelt"],[3,"Device"],[3,"GpuBufferPool"],[8,"Pod"],[3,"CpuWriteGpuReadBuffer"],[3,"Chunk"],[3,"CommandEncoder"],[3,"Arc"],[6,"BufferAddress"],[6,"ImageCopyTexture"],[3,"NonZeroU32"],[3,"Extent3d"],[8,"Iterator"],[6,"Result"],[6,"BufferSize"],[3,"BufferViewMut"],[3,"RenderContext"],[3,"DebugLabel"],[4,"BindGroupEntry"],[8,"ExactSizeIterator"],[3,"Vec"],[4,"Ordering"],[4,"HardwareTier"],[3,"DownlevelCapabilities"],[6,"DeviceDescriptor"],[3,"Features"],[3,"Limits"],[3,"Backends"],[3,"FrameGlobalCommandEncoder"],[3,"Renderers"],[3,"SharedRendererData"],[3,"WgpuResourcePools"],[3,"FileResolver"],[3,"Queue"],[3,"RenderContextConfig"],[3,"String"],[3,"ErrorTracker"],[8,"Error"],[3,"WrappedContextError"],[4,"Error"],[3,"SearchPath"],[3,"ImportClause"],[3,"InterpolatedFile"],[8,"Default"],[8,"Into"],[8,"FileSystem"],[3,"FileServer"],[6,"HashSet"],[8,"FnMut"],[3,"MemFileSystem"],[3,"FrameUniformBuffer"],[3,"GlobalBindings"],[3,"GpuBindGroup"],[3,"BoundingBox"],[3,"Vec3"],[3,"Node"],[3,"Affine3A"],[6,"HashMap"],[3,"Mesh"],[3,"TextureManager2D"],[3,"Mesh"],[4,"ResourceLifeTime"],[3,"MeshInstance"],[4,"Format"],[4,"TextureFormat"],[3,"LineBatchBuilder"],[3,"Vec2"],[3,"LineStripBuilder"],[15,"u32"],[3,"LineStripSeriesBuilder"],[3,"LineBatchInfo"],[3,"LineStripFlags"],[3,"OutlineMaskPreference"],[3,"Size"],[3,"LineDrawData"],[3,"Mat4"],[3,"Material"],[3,"GpuMesh"],[3,"GpuMaterial"],[3,"GpuBindGroupLayoutHandle"],[4,"ResourceManagerError"],[3,"MaterialUniformBuffer"],[3,"MeshVertexData"],[3,"PointCloudBatchBuilder"],[3,"PointBuilder"],[3,"PointsBuilder"],[3,"PointCloudBuilder"],[3,"PointCloudBatchInfo"],[3,"PointCloudBatchFlags"],[3,"Range"],[3,"PointCloudDrawData"],[4,"PointCloudDrawDataError"],[4,"DrawPhase"],[3,"EnumSet"],[3,"RenderPass"],[3,"GpuShaderModuleHandle"],[3,"CompositorDrawData"],[3,"Compositor"],[4,"DepthCloudDepthData"],[3,"DepthCloudDrawInstance"],[3,"DepthCloudDrawData"],[3,"DepthCloud"],[3,"GpuTextureHandle"],[3,"TextureDesc"],[3,"GpuTextureInternal"],[3,"DynamicResource"],[3,"DepthCloudRenderer"],[3,"DepthCloudInfoUBO"],[3,"GenericSkyboxDrawData"],[3,"GenericSkybox"],[3,"LineStripBatch"],[3,"LineStripInfo"],[3,"LineRenderer"],[4,"LineDrawDataError"],[8,"IntoIterator"],[4,"PoolError"],[3,"Demand"],[3,"LineVertex"],[3,"LineStripInfo"],[3,"BatchUniformBuffer"],[3,"MeshBatch"],[3,"MeshDrawData"],[3,"MeshRenderer"],[3,"InstanceData"],[3,"VertexBufferLayout"],[3,"OutlineConfig"],[3,"OutlineCompositingDrawData"],[3,"OutlineMaskProcessor"],[3,"OutlineCompositor"],[3,"MultisampleState"],[3,"JumpfloodingStepUniformBuffer"],[3,"OutlineConfigUniformBuffer"],[3,"PointCloudBatch"],[3,"PointCloudRenderer"],[3,"PositionData"],[3,"BatchUniformBuffer"],[3,"RectangleInstance"],[3,"RectangleDrawData"],[3,"RectangleRenderer"],[3,"TexturedRect"],[4,"TextureFilterMag"],[4,"TextureFilterMin"],[3,"UniformBuffer"],[3,"TestTriangleDrawData"],[3,"TestTriangle"],[3,"MeshManager"],[3,"MeshHandleInner"],[6,"GpuMeshHandle"],[3,"KeyData"],[3,"ResourceManager"],[8,"Clone"],[8,"Key"],[4,"ResourceHandle"],[8,"PartialEq"],[8,"Debug"],[3,"GpuTexture2DHandle"],[3,"GpuTexturePool"],[3,"Texture2DCreationDesc"],[3,"SizeHalf"],[4,"OrthographicCameraMode"],[4,"Projection"],[3,"AutoSizeConfig"],[3,"TargetConfiguration"],[3,"ViewBuilder"],[3,"CommandBuffer"],[3,"F32RowPadded"],[3,"U32RowPadded"],[3,"Vec2"],[3,"Vec2RowPadded"],[3,"UVec2"],[3,"UVec2RowPadded"],[3,"Vec3RowPadded"],[3,"Vec3Unpadded"],[3,"Vec4"],[3,"Mat3"],[3,"Mat4"],[3,"Mat4x3"],[3,"PaddingRow"],[3,"UVec2"],[3,"Vec3A"],[3,"Vec4"],[3,"Mat3"],[3,"WgpuResourcePoolStatistics"],[3,"GpuBindGroupLayoutPool"],[3,"BindGroupLayoutDesc"],[3,"BindGroupLayout"],[3,"GpuBindGroupPool"],[3,"BindGroupDesc"],[3,"GpuSamplerPool"],[3,"GpuBindGroupHandle"],[3,"BufferDesc"],[3,"GpuBufferHandle"],[3,"Buffer"],[3,"DynamicResourcePool"],[8,"FnOnce"],[3,"GpuPipelineLayoutPool"],[3,"GpuPipelineLayoutHandle"],[3,"PipelineLayoutDesc"],[3,"GpuPipelineLayout"],[3,"SmallVec"],[3,"GpuRenderPipelinePool"],[3,"GpuShaderModulePool"],[3,"GpuRenderPipelineHandle"],[3,"RenderPipelineDesc"],[3,"RenderPipeline"],[3,"VertexBufferLayout"],[3,"GpuSamplerHandle"],[3,"SamplerDesc"],[3,"Sampler"],[3,"ShaderModuleDesc"],[3,"ShaderModule"],[3,"ResourceStatistics"],[3,"StaticResourcePool"],[3,"UniformBufferAlignmentCheck"],[3,"ActiveFrameContext"],[8,"DedupableError"],[8,"DrawData"],[8,"Renderer"],[3,"PointCloudVertex"],[13,"Frame"],[13,"ExpiredResource"],[3,"ViewTargetSetup"],[3,"QueuedDraw"],[13,"Orthographic"],[13,"Perspective"],[13,"Buffer"],[3,"DynamicResourcePoolProtectedState"],[8,"DynamicResourcesDesc"],[3,"StoredResource"]]},\
"re_sdk":{"doc":"The Rerun SDK","t":[3,8,3,3,13,13,13,3,4,13,17,3,8,3,3,13,18,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,5,11,12,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,5,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,0,10,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,12,12,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,13,3,13,13,3,13,13,13,13,13,13,13,13,18,18,3,13,3,3,3,3,3,4,4,3,13,3,13,3,3,3,3,13,3,4,3,13,18,3,3,3,3,4,4,3,3,8,3,4,13,13,13,13,13,13,3,3,3,3,13,13,13,13,13,13,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,12,12,12,12,11,11,12,12,12,12,4,4,13,18,18,18,13,18,18,18,13,13,4,3,13,13,13,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,2,2,2,2,2,2,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,13,13,13,13,3,13,13,4,18,3,3,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,4,13,13,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,3,4,13,8,13,3,12,5,12,10,12,18,18,18,13,3,13,3,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ApplicationId","Component","ComponentName","EntityPath","IllegalInstanceKey","MismatchedRowLengths","MoreThanOneRow","MsgSender","MsgSenderError","PackingError","RERUN_ENV_VAR","RecordingId","SerializableComponent","Session","SessionBuilder","SplattedInstanceKeys","ZERO","__clone_box","__clone_box","__clone_box","__clone_box","application_id","as_ref","as_slice","as_str","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","called_from_official_rust_example","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","components","coordinates","decide_logging_enabled","default","default_enabled","default_server_addr","demo_util","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","enabled","entity_path","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","external","field","file_sink","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_str","from_uuid","full_name","get_hash","get_hash","get_hash","get_hash","get_rerun_env","global","global_session","hash","hash","hash","hash","hash","hash","hash","hash64","init","init","init","init","instanced","into","into","into","into","is_child_of","is_descendant_of","is_official_example","is_root","iter","join","last","len","log","log_sink","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","msg_sender","name","new","new","new_recording_info","num_instances","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","random","recording_id","root","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","session","short_name","sink","sink","splatted","time","timeless","timepoint","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unknown","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","AnnotationContext","AnnotationInfo","Arrow3D","Box3D","ClassDescription","ClassId","ClassId","ColorRGBA","Depth","Encoded","EncodedMesh3D","F32","F64","Glb","Gltf","I16","I32","I64","I8","IDENTITY","IDENTITY","InstanceKey","JPEG","KeypointId","Label","LineStrip2D","LineStrip3D","Mat3x3","Mesh3D","MeshFormat","MeshId","Obj","Pinhole","Pinhole","Point2D","Point3D","Quaternion","Radius","Raw","RawMesh3D","Rect2D","Rigid3","Rigid3","SPLAT","Scalar","ScalarPlotProps","Size3D","Tensor","TensorData","TensorDataMeaning","TensorDimension","TensorId","TensorTrait","TextEntry","Transform","U16","U32","U64","U8","Unknown","Unknown","Vec2D","Vec3D","Vec4D","ViewCoordinates","XCYCW2H2","XCYCWH","XYWH","XYXY","YXHW","YXYX","ZERO","ZERO","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","albedo_factor","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","aspect_ratio","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","child_from_parent","class_map","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","color","data","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default","default","default","default","depth","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","describe_short","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dtype","dtype","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","focal_length","focal_length_in_pixels","format","forward","fov_y","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_body","from_dynamic_image","from_image","from_rgb","from_rgba","from_rub","from_str","from_up_and_handedness","from_xywh","get","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","handedness","hash","hash","hash","hash","hash","hash","height","height","id","id","id","image_from_cam","index","index","index","indices","info","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_shaped_like_an_image","is_shaped_like_an_image","is_specific","is_splat","is_vector","is_vector","keypoint_connections","keypoint_map","label","level","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","meaning","meaning","meaning","mesh_id","mesh_id","mesh_id","meter","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","named","new","new","new","new","new","new","new","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_child_from_parent","new_parent_from_child","normals","num_dim","num_dim","num_triangles","origin","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent_from_child","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","positions","principal_point","random","random","resolution","resolution","right","rotation","sanity_check","sanity_check","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scattered","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shape","shape","shape","size","size_in_bytes","size_in_bytes","specific_index","tensor_from_jpeg_bytes","tensor_from_jpeg_file","tensor_id","to_array","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rub","to_string","to_string","to_string","to_string","to_string","to_string","top_left_corner","transform","translation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unnamed","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","up","vector","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","width","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x","x","x","x","x","x","y","y","y","y","y","y","y","y","z","z","z","z","z","z","Axis3","Handedness","Left","NEGATIVE_X","NEGATIVE_Y","NEGATIVE_Z","Negative","POSITIVE_X","POSITIVE_Y","POSITIVE_Z","Positive","Right","Sign","SignedAxis3","X","Y","Z","__clone_box","__clone_box","__clone_box","__clone_box","as_vec3","axis","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","describe","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_dim","from_right_handed","from_str","init","init","init","init","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","sign","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","bounce_lerp","color_spiral","colormap_turbo_srgb","grid","lerp","linspace","glam","image","re_log","re_log_types","re_memory","re_sdk_comms","CreateFile","FileSink","FileSinkError","LogMsgEncode","SpawnThread","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","deref","deref","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","init","init","into","into","join_handle","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","provide","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","send","source","to_string","try_from","try_from","try_into","try_into","tx","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","global_session","ArrowMsg","BeginRecordingMsg","ClearComponents","ClearRecursive","ComponentBundle","EntityPathOpMsg","Goodbye","LogMsg","MAX","MsgBundle","MsgId","PathOp","ZERO","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","arrow_deserialize","arrow_serialize","as_u128","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","components","data_type","data_type","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","entity_path","entity_path","eq","eq","equivalent","equivalent","find_component","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_hash","hash","id","init","init","init","init","init","into","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","msg_id","name","name","name","new","new","new_array","new_empty","new_from_boxed","num_components","num_instances","num_instances","num_rows","num_rows","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","random","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","short_string","time_point","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_append_component","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","value","value_boxed","value_list","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BufferedSink","DisabledSink","LogSink","TcpSink","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","client","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","disabled","drain_backlog","drain_backlog","drain_backlog","drop","drop","drop","drop_msgs_if_disconnected","drop_msgs_if_disconnected","drop_msgs_if_disconnected","flush","flush","flush","from","from","from","init","init","init","into","into","into","is_enabled","is_enabled","is_enabled","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","send","send","send","send","send_all","send_all","send_all","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","IllegalInstanceKey","MismatchedRowLengths","MoreThanOneRow","MsgSender","MsgSenderError","PackingError","SplattedInstanceKeys","az","az","borrow","borrow","borrow_mut","borrow_mut","bundle_from_iter","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","deref","deref","deref_mut","deref_mut","drop","drop","entity_path","fmt","fmt","from","from","from","init","init","instanced","into","into","into_messages","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","num_instances","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","provide","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","send","send_to_sink","source","splatted","timeless","timepoint","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","with_component","with_splat","with_splat_opt","with_time","with_timeless","with_timepoint","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","Session","SessionBuilder","__clone_box","application_id","as_ref","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","buffered","buffered","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone_into","connect","default_enabled","default_enabled","deref","deref","deref_mut","deref_mut","disabled","drain_backlog","drop","drop","enabled","enabled","finalize","from","from","init","init","into","into","is_enabled","is_official_example","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","recording_id","recording_id","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","save","send","send_path_op","sink","sink","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","BufferedSink","CreateFile","FileSink","FileSinkError","LogMsgEncode","LogSink","SpawnThread","TcpSink","client","disabled","join_handle","send","tx","BEGINNING","MAX","MIN","Sequence","Time","Time","TimeInt","TimePoint","TimeType","Timeline","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","abs","add","add","add","add_assign","add_assign","arrow_deserialize","arrow_serialize","as_f32","as_f64","as_i64","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","data_type","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","format","format","format_range","format_time_range","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_iter","from_milliseconds","from_nanos","from_ns_since_epoch","from_seconds","from_seconds_since_epoch","from_sequence","from_u64","from_us_since_epoch","get","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","init","init","init","init","init","insert","into","into","into","into","into","into_iter","into_iter","is_absolute_date","is_empty","is_exactly_midnight","is_timeless","is_timeless","iter","lerp","log_time","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","name","nanos_since_epoch","neg","new","new_array","new_sequence","new_temporal","now","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","serialize","sub","sub","sub","sub","sub_assign","sum","timeless","timelines","times","to_datetime","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from"],"q":["re_sdkre_sdk::componentsre_sdk::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_sdk::demo_util","","","","","","re_sdk::external","","","","","","re_sdk::file_sink","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_sdk::global","re_sdk::logre_sdk::log_sink","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_sdk::msg_sender","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_sdk::session","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_sdk::sink","","","","","","","","","","","","","re_sdk::timed":["The user-chosen name of the application doing the logging.","A type that can used as a Component of an Entity.","The name of an entity component, e.g. <code>pos</code> or <code>color</code>.","<code>camera / &quot;left&quot; / points / #42</code>","<code>InstanceKey</code> with a <code>u64::MAX</code> was found, but is reserved for …","Some components had more or less instances than some other.","The same component were put in the same log message …","Facilitates building and sending component payloads with …","Errors that can occur when constructing or sending messages","A message during packing. See <code>MsgBundleError</code>.","","A unique id per recording (a stream of <code>LogMsg</code>es).","A <code>Component</code> that fulfils all the conditions required to be …","The main way to do Rerun loggning.","Construct a <code>Session</code>.","Instance keys cannot be splatted","The recording id:s given to recordings that don’t have …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","These are the different <em>components</em> you can log.","Coordinate system helpers, for use with …","Checks the <code>RERUN</code> environment variable. If not found, …","","","The default address of a Rerun TCP server which an SDK …","This module contains utilities to support Rerun examples.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Re-exports of other crates.","Create a <code>Field</code> for this <code>Component</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Includes namespace, e.g. <code>rerun.color</code> or <code>ext.confidence</code>.","","","","","Helper to get the value of the <code>RERUN</code> environment variable.","","Access a global <code>Session</code> singleton for convenient logging.","Precomputed hash of the string.","","","","","","","Precomputed 64-bit hash.","","","","","All the instanced component collections that have been …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this a direct child of the other path.","Is this a strict descendant of the given path.","","","","","","Number of parts","Things directly related to logging.","","","","","","","","","","","The name of the component.","","","Creates a new <code>re_log_types::RecordingInfo</code> which can be …","The expected number of instances for each row of each …","","","","","","","","","Return <code>None</code> if root.","","","","","","","","","","","","","","","","","","","","","","Excludes the rerun namespace, so you’ll get <code>color</code> but …","Different destinations for log messages.","","All the splatted components that have been appended to …","Time-related types.","If true, all timestamp data associated with this message …","All the different timestamps for this message.","","","","","","","","","","","","","","","","","","","","","The default <code>ApplicationId</code> if the user hasn’t set one.","","","","","","","","","","","","","","","","","","","","","The <code>AnnotationContext</code> provides additional information on …","Information about an Annotation.","A 3D Arrow","A 3D bounding box represented by it’s half-lengths","The description of a semantic Class.","A 16-bit ID representing a type of semantic class.","The data is an annotated <code>crate::component_types::ClassId</code> …","An RGBA color tuple.","Image data interpreted as depth map.","","Compressed/encoded mesh format","","","Binary <code>glTF</code>.","<code>glTF</code>.","","","","","","","A number used to specify a specific instance in an entity.","","A 16-bit ID representing a type of semantic keypoint …","A String label component","A Line Strip of 2D points","A Line Strip of 3D points","A 3x3 column-major Matrix made up of 3 Vecs","A Generic 3D Mesh.","The format of a binary mesh file, e.g. GLTF, GLB, OBJ","A unique id per <code>Mesh3D</code>.","Wavefront .obj.","Camera perspective projection (a.k.a. intrinsics).","The parent is some local camera space, the child an image …","A point in 2D space.","A point in 3D space.","A Quaternion represented by 4 real numbers.","A Radius component","","A raw “triangle soup” mesh.","A rectangle in 2D space.","A proper rigid 3D transform, i.e. a rotation and a …","For example: the parent is a 3D world space, the child a …","A special value indicating that this [<code>InstanceKey]</code> is …","A double-precision scalar.","Additional properties of a scalar when rendered as a plot.","A 3D size, e.g. the size of a 3D box.","A Multi-dimensional Tensor","Flattened <code>Tensor</code> data payload","How to interpret the contents of a tensor.","Flattened <code>Tensor</code> data payload","A unique id per <code>Tensor</code>.","","A text entry component, comprised of a text body and its …","A transform between two spaces.","","","","","Default behavior: guess based on shape","We don’t know the transform, but it is …","A vector in 2D space.","A vector in 3D space.","A vector in 4D space.","How we interpret the coordinate system of an entity/space.","[x_center, y_center, width/2, height/2]","[x_center, y_center, width, height]","[x, y, w, h], with x,y = left,top.","[x0, y0, x1, y1], with x0,y0 = left,top and x1,y1 = …","[y, x, h, w], with x,y = left,top.","[y0, x0, y1, x1], with x0,y0 = left,top and x1,y1 = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Albedo factor applied to the final color of the meshata payloadocal length.","X &amp; Y focal length in pixels.","","","Field of View on the Y axis, i.e. the angle between top …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Construct a tensor from [<code>image::DynamicImage</code>].","Construct a tensor from something that can be turned into …","","","Returns a matrix that translates RUB to this coordinate …","","Choses a coordinate system based on just an up-axis.","","","","","","","","","","","","","","","","","","","","","<code>ClassId</code> or <code>KeypointId</code> to which this annotation info …","Column-major projection matrix.","","","","Optionally, the flattened indices array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Are we referring to a specific instance of the entity …","Are we referring to all instances of the entity (e.g. all …","","","Semantic connections between two keypoints.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The per-element data meaning Used to indicated if the data …","","","","Reciprocal scale of meter unit for depth images","","","","","","","","","","","","","","","","","","","","","","","","","","Optional name of the dimension, e.g. “color” or “…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optionally, the flattened normals array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The flattened positions array of this mesh.","Principal point of the pinhole camera, i.e. the …","","","","Pixel resolution (usually integers) of child image space. …","","How is the child rotated?","Returns an error if this does not span all three …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dimensionality and length","Number of elements on this dimension. I.e. size-1 is the …","","","Returns <code>None</code> if splat, otherwise the index.","Construct a tensor from the contents of a JPEG file.","Construct a tensor from the contents of a JPEG file on …","Unique identifier for the tensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a matrix that translates this coordinate system to …","","","","","","","","four columns of an affine transformation matrix","Translation to parent from childne of <code>X</code>, <code>Y</code>, <code>Z</code>.","Left or right handedness. Used to describe a coordinate …","","","","","","","","","","","Positive (<code>+</code>) or Negative (<code>-</code>).","One of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A linear interpolator that bounces between <code>a</code> and <code>b</code> as <code>t</code> …","Create a spiral of points with colors along the Z axis.","Returns sRGB polynomial approximation from Turbo color …","Given two 3D vectors <code>from</code> and <code>to</code>, linearly interpolates …","Linear interpolator.","Linearly interpolates from <code>a</code> through <code>b</code> in <code>n</code> steps, …","","","","","","","Error creating the file.","Stream log messages to an <code>.rrd</code> file.","Errors that can occur when creating a <code>FileSink</code>.","Error encoding a log message.","Error spawning the file writer thread.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Start writing log messages to a file at the given path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Access a global <code>Session</code> singleton for convenient logging.","Log an entity using an <code>ArrowMsg</code>.","A new recording has begun.","Clear all the components stored at an <code>EntityPath</code>","Clear all the components of an <code>[EntityPath]</code> and any …","A <code>ComponentBundle</code> holds an Arrow component column, and its …","Server-backed operation on an <code>EntityPath</code>.","Sent when the client shuts down the connection.","The most general log message sent from the SDK to the …","All ones.","A <code>MsgBundle</code> holds data necessary for composing a single …","A unique id per <code>crate::LogMsg</code>.","Operation to perform on an <code>EntityPath</code>, e.g. clearing all …","All zeroes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the datatype of the bundled component, discarding …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the index of <code>component</code> in the bundle, if it exists.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","A unique id per <code>crate::LogMsg</code>.","","","","","Create a new <code>MsgBundle</code> with a pre-built Vec of …","","","Create a new <code>ComponentBundle</code> from a boxed <code>Array</code>. The <code>Array</code> …","Returns the number of component collections in this …","Returns the number of <em>instances</em> for a given <code>row</code> in the …","Returns the number of <em>instances</em> for a given <code>row</code> in the …","Returns the number of <em>rows</em> in this bundle, i.e. the length …","Returns the number of <em>rows</em> for each component collections …","","","","","","","","","","","","","","","","","","","","","","","","","","A shortened string representation of the message id.","","","","","","","","","Try to append a collection of <code>Component</code> onto the …","","","","","","Extract a <code>MsgBundle</code> from an <code>ArrowMsg</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>ComponentBundle</code> value as a boxed <code>Array</code>.","Get the <code>ComponentBundle</code> value","","","","","","","","","","","","","","","","Store log messages in memory until you call …","","Where the SDK sends its log messages.","Stream log messages to a Rerun TCP server.","","","","","","","","","","","","","","","","","","","","","","","","","","","A sink that does nothing. All log messages are just …","Drain all buffered <code>LogMsg</code>es and return them.","Drain all buffered <code>LogMsg</code>es and return them.","","","","","If the TCP session is disconnected, allow it to quit early …","If the TCP session is disconnected, allow it to quit early …","","Wait until all logged data have been sent to the remove …","Wait until all logged data have been sent to the remove …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>false</code> if this sink just discards all messages.","Returns <code>false</code> if this sink just discards all messages.","","","","","","","","Connect to the given address in a background thread. …","An empty buffer.","","","","","","","","","","","","","Send this log message.","","","","Send all these log messages.","Send all these log messages.","","","","","","","","","","","","","","","","","","","","","","","","","","<code>InstanceKey</code> with a <code>u64::MAX</code> was found, but is reserved for …","Some components had more or less instances than some other.","The same component were put in the same log message …","Facilitates building and sending component payloads with …","Errors that can occur when constructing or sending messages","A message during packing. See <code>MsgBundleError</code>.","Instance keys cannot be splatted","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","All the instanced component collections that have been …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Starts a new <code>MsgSender</code> for the given entity path.","The expected number of instances for each row of each …","","","","","","","","","","Consumes, packs, sanity checks and finally sends the …","Consumes, packs, sanity checks and finally sends the …","","All the splatted components that have been appended to …","If true, all timestamp data associated with this message …","All the different timestamps for this message.","","","","","","","","","","","","","","Appends a component collection to the current message.","Appends a splatted component to the current message.","Helper to make it easier to optionally append splatted …","Appends a given <code>timeline</code>/<code>time</code> pair to the current message.","Specifies whether the current message is timeless.","Appends a given <code>timepoint</code> to the current message.","","","","","The main way to do Rerun loggning.","Construct a <code>Session</code>.","","","","","","","","","","","Buffer log messages in RAM.","Buffer log messages in RAM.","","","","","","","","","Send log data to a remote viewer/server.","Set whether or not Rerun is enabled by default.","","","","","","Construct a new session with a disabled “dummy” sink …","Drain all buffered <code>LogMsg</code>es and return them.","","","Set whether or not Rerun is enabled.","","Returns whether or not logging is enabled, plus a …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if logging is enabled on this <code>Session</code>.","","","","","","Create a new <code>SessionBuilder</code> with an application id.","Construct a new session with a given <code>RecordingInfo</code> and …","","","","","Set the <code>RecordingId</code> for this session.","","","","","","Stream all log messages to an <code>.rrd</code> file.","Send a <code>LogMsg</code>.","Send a <code>re_log_types::PathOp</code>.","Access the underlying log sink to where we send out log …","","","","","","","","","","","","","","","","","","","Store log messages in memory until you call …","Error creating the file.","Stream log messages to an <code>.rrd</code> file.","Errors that can occur when creating a <code>FileSink</code>.","Error encoding a log message.","Where the SDK sends its log messages.","Error spawning the file writer thread.","Stream log messages to a Rerun TCP server.","","A sink that does nothing. All log messages are just …","","Send this log message.","","The beginning of time.","","","Used e.g. for frames in a film.","A date-time represented as nanoseconds since unix epoch","Normal wall time.","A 64-bit number describing either nanoseconds OR sequence …","A point in time on any number of <code>Timeline</code>s.","The type of a <code>TimeInt</code> or <code>Timeline</code>.","A time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Human-readable formatting","","","Returns a formatted string of <code>time_range</code> on this <code>Timeline</code>.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","For time timelines.","For time timelines.","","For time timelines.","","For sequence timelines.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","If true, this time is likely relative to unix epoch.","","","","","","","The log time timeline to which all API functions will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logging to this time means the data will show upp in all …","","","Returns the absolute datetime if applicable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,129,129,129,0,0,129,0,0,0,0,0,129,7,2,4,7,8,134,2,4,2,2,4,7,8,2,2,4,7,8,2,4,7,8,0,2,4,7,8,2,4,7,8,2,4,7,8,2,4,7,8,2,4,7,8,2,4,7,8,0,0,0,7,134,0,0,2,2,4,7,8,2,4,7,8,2,4,7,8,2,4,7,8,134,130,2,2,4,7,8,2,4,7,8,0,146,0,2,2,4,4,7,7,8,8,2,2,2,4,4,4,4,4,4,7,8,8,8,4,7,7,2,2,4,7,8,0,0,0,2,2,4,4,7,8,4,4,2,4,7,8,130,2,4,7,8,4,4,134,4,4,4,4,4,0,0,2,4,7,8,2,4,7,8,0,146,2,4,0,130,2,4,7,8,2,4,7,8,4,2,4,7,8,4,7,134,4,2,4,7,8,2,4,7,8,2,4,7,8,0,2,0,23,130,0,130,130,2,4,7,8,2,4,7,8,2,4,7,8,2,4,7,8,2,4,7,8,8,2,4,7,8,2,4,7,8,2,4,7,8,2,4,7,8,2,4,7,8,0,0,0,0,0,0,49,0,49,39,0,47,47,38,38,47,47,47,47,66,52,0,47,0,0,0,0,0,0,0,0,38,0,54,0,0,0,0,39,0,0,0,54,34,0,0,0,0,0,0,0,0,0,0,0,47,47,47,47,49,54,0,0,0,0,43,43,43,43,43,43,40,41,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,71,47,48,49,50,51,52,53,54,55,56,57,37,30,59,31,32,33,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,53,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,51,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,65,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,52,60,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,71,47,48,49,50,51,52,53,54,55,56,57,31,34,35,70,71,33,50,30,59,31,32,33,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,31,33,69,60,35,66,52,55,56,57,48,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,61,61,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,66,71,48,49,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,147,50,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,43,71,47,48,49,50,51,52,53,54,55,56,57,31,32,33,69,60,61,34,35,36,70,38,71,48,49,51,30,59,31,32,33,69,60,61,34,34,35,36,62,63,64,70,37,65,38,38,39,40,41,66,42,43,44,45,46,71,47,48,48,49,50,51,52,53,54,55,55,56,56,57,57,53,53,65,61,53,30,59,59,31,32,32,33,69,69,60,60,61,34,35,36,36,62,62,63,63,64,64,64,70,37,65,38,39,40,40,40,41,41,41,66,66,42,43,44,44,45,46,71,47,48,49,50,51,52,53,54,55,55,55,56,56,56,57,51,50,50,32,32,61,61,61,43,147,50,31,34,35,70,38,71,61,31,34,35,70,38,71,43,48,147,50,33,53,64,55,56,37,69,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,147,50,34,34,147,50,69,69,33,51,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,147,50,50,39,37,65,50,30,59,31,32,60,61,34,35,36,62,63,39,40,41,66,42,43,44,45,46,50,51,54,55,56,48,48,59,40,41,66,50,51,56,30,59,31,32,33,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,52,52,37,147,50,37,30,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,52,31,34,35,70,71,37,53,70,71,53,53,61,52,61,37,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,45,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,66,71,48,49,52,53,54,55,56,57,147,50,50,48,147,50,34,50,50,50,32,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,71,47,48,49,50,51,52,53,54,55,56,57,61,34,38,48,55,56,57,43,65,52,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,48,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,61,30,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,57,66,43,48,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,30,59,31,32,33,69,60,61,34,35,36,62,63,64,70,37,65,38,39,40,41,66,42,43,44,45,46,71,47,48,49,50,51,52,53,54,55,56,57,55,56,57,59,40,41,66,46,55,56,57,59,40,41,66,46,56,57,59,41,66,46,0,0,85,74,74,74,102,74,74,74,102,85,0,0,101,101,101,101,102,74,85,74,74,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,101,102,74,74,85,101,102,74,85,101,85,74,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,74,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,74,101,102,74,85,101,74,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,101,102,74,85,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,104,104,103,104,103,104,103,104,103,104,103,104,103,104,103,104,103,104,103,103,104,104,104,103,104,104,103,104,103,104,103,103,104,103,104,103,103,104,103,104,104,103,104,103,104,103,104,104,103,104,103,104,103,103,104,103,104,103,104,103,104,103,104,103,104,0,109,109,113,113,0,109,109,0,111,0,0,0,111,111,114,115,109,113,111,111,111,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,113,111,114,115,109,113,111,114,115,109,113,111,115,111,114,111,114,115,109,113,111,114,115,109,113,111,109,113,111,114,115,109,113,113,115,111,113,111,113,115,111,111,114,115,115,109,113,111,114,115,109,109,109,109,113,111,111,109,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,115,111,114,114,114,115,111,114,114,115,114,115,114,115,111,114,115,109,113,111,114,115,109,113,111,111,111,114,115,109,113,111,114,115,109,113,111,109,113,111,115,111,114,115,109,113,111,115,115,111,114,114,114,114,115,115,109,113,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,114,114,114,111,114,115,109,113,111,114,115,109,113,111,114,115,109,113,0,0,0,0,127,126,124,127,126,124,127,126,124,127,126,124,127,126,124,127,126,124,126,124,127,126,124,127,126,124,0,125,125,124,127,126,124,125,125,126,125,125,126,127,126,124,127,126,124,127,126,124,125,125,127,127,126,124,127,126,124,126,124,127,126,124,127,126,124,127,126,124,127,126,124,125,127,126,124,125,125,124,127,126,124,127,126,124,127,126,124,127,126,124,127,126,124,127,126,124,127,126,124,127,126,124,129,129,129,0,0,129,129,130,129,130,129,130,129,0,130,129,130,129,130,129,130,129,130,129,130,129,130,129,129,130,129,129,130,129,130,130,129,130,130,129,130,129,130,130,130,129,130,129,129,130,129,130,129,130,130,129,130,130,130,129,130,129,130,129,130,129,130,129,130,129,130,129,130,130,130,130,130,130,130,129,130,129,0,0,23,134,23,134,23,134,23,23,134,23,134,23,134,23,134,23,134,23,23,23,134,134,134,134,23,134,23,23,23,134,23,134,134,134,134,23,134,23,134,23,23,134,134,23,134,23,134,23,134,23,134,23,134,134,134,23,134,23,134,23,23,23,23,23,134,23,134,23,134,23,134,23,134,23,134,23,134,23,134,23,0,104,0,0,104,0,104,0,126,0,103,125,103,133,133,133,139,0,139,0,0,0,0,136,133,132,120,139,133,136,133,133,136,133,120,120,133,133,133,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,120,132,120,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,139,139,132,136,136,136,133,133,133,133,132,120,120,139,139,120,133,133,136,133,136,133,139,136,120,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,120,136,133,132,120,139,120,120,136,120,136,133,120,120,136,132,136,133,132,120,139,136,133,132,120,139,132,132,136,133,132,120,132,132,136,136,133,132,120,139,136,133,132,120,139,136,133,133,132,120,139,120,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,136,133,133,133,133,120,120,120,136,136,133,132,120,139,136,136,136,133,132,120,139,136,133,132,120,139,132,132,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139,136,133,132,120,139],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],0,[2,3],[4],[2,3],[[]],[[]],[[]],[[]],[[]],[2,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[2,2],[4,4],[7,7],[8,8],[[]],[[]],[[]],[[]],[[2,2],9],[[4,4],9],[[7,7],9],[[8,8],9],0,0,[5,5],[[],7],0,[[],10],0,[2,3],[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[2]]]],[[],[[12,[4]]]],[[],[[12,[7]]]],[[],[[12,[8]]]],[11],[11],[11],[11],0,0,[[2,2],5],[[2,3],5],[[4,4],5],[[7,7],5],[[8,8],5],[[],5],[[],5],[[],5],[[],5],0,[[],13],0,[[2,14],[[12,[15]]]],[[2,14],[[12,[15]]]],[[4,14],[[12,[15]]]],[[4,14],[[12,[15]]]],[[7,14],[[12,[15]]]],[[7,14],[[12,[15]]]],[[8,14],[[12,[15]]]],[[8,14],[[12,[15]]]],[16,2],[3,2],[[]],[3,4],[[],4],[[]],[16,4],[17,4],[[[20,[18,19]]],4],[[]],[3,8],[[]],[16,8],[[],4],[3,[[12,[7]]]],[21,7],[2,3],[[],22],[[],22],[[],22],[[],22],[[],[[6,[5]]]],0,[[],[[24,[23]]]],[2,22],[2],[4],[4,25],[7],[8],0,[4,22],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[]],[[]],[[4,4],5],[[4,4],5],0,[4,5],[4,26],[[4,4],4],[4,[[6,[18]]]],[4,11],0,0,[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],0,[[],2],[3,2],[[[20,[18,19]]],4],[[[27,[8]]],28],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[6,[4]]]],[[2,2],[[6,[9]]]],[[4,4],[[6,[9]]]],[[7,7],[[6,[9]]]],[[8,8],[[6,[9]]]],0,[[],7],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,12],[4,12],[7,12],[8,12],0,[2,3],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],29],[[],29],[[],29],[[],29],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],0,[[[6,[30]]],[[6,[30]]]],[[],6],[[],[[6,[31]]]],[[],[[6,[32]]]],[[[6,[33]]],[[6,[33]]]],[[],6],[[],6],[[],[[6,[34]]]],[[],[[6,[35]]]],[[],[[6,[36]]]],[[],6],[[],6],[[],6],[[],6],[[[6,[37]]],[[6,[37]]]],[[],6],[[[6,[38]]],[[6,[38]]]],[[[6,[39]]],[[6,[39]]]],[[[6,[40]]],[[6,[40]]]],[[[6,[41]]],[[6,[41]]]],[[],6],[[],[[6,[42]]]],[[[6,[43]]],[[6,[43]]]],[[],[[6,[44]]]],[[[6,[45]]],[[6,[45]]]],[[[6,[46]]],[[6,[46]]]],[[],6],[[[6,[47]]],[[6,[47]]]],[[[6,[48]]],[[6,[48]]]],[[[6,[49]]],[[6,[49]]]],[[[6,[50]]],[[6,[50]]]],[[[6,[51]]],[[6,[51]]]],[[[6,[52]]],[[6,[52]]]],[[[6,[53]]],[[6,[53]]]],[[[6,[54]]],[[6,[54]]]],[[],[[6,[55]]]],[[],[[6,[56]]]],[[],[[6,[57]]]],[30,[[12,[58]]]],[59,[[12,[58]]]],[31,[[12,[58]]]],[32,[[12,[58]]]],[33,[[12,[58]]]],[60,[[12,[58]]]],[61,[[12,[58]]]],[34,[[12,[58]]]],[35,[[12,[58]]]],[36,[[12,[58]]]],[62,[[12,[58]]]],[63,[[12,[58]]]],[64,[[12,[58]]]],[[],[[12,[58]]]],[37,[[12,[58]]]],[65,[[12,[58]]]],[38,[[12,[58]]]],[39,[[12,[58]]]],[40,[[12,[58]]]],[41,[[12,[58]]]],[66,[[12,[58]]]],[42,[[12,[58]]]],[43,[[12,[58]]]],[44,[[12,[58]]]],[45,[[12,[58]]]],[46,[[12,[58]]]],[[],[[12,[58]]]],[47,[[12,[58]]]],[48,[[12,[58]]]],[49,[[12,[58]]]],[50,[[12,[58]]]],[51,[[12,[58]]]],[52,[[12,[58]]]],[53,[[12,[58]]]],[54,[[12,[58]]]],[55,[[12,[58]]]],[56,[[12,[58]]]],[57,[[12,[58]]]],[53,[[6,[67]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[52,68],0,[30,30],[59,59],[31,31],[32,32],[33,33],[69,69],[60,60],[61,61],[34,34],[35,35],[36,36],[62,62],[63,63],[64,64],[70,70],[37,37],[65,65],[38,38],[39,39],[40,40],[41,41],[66,66],[42,42],[43,43],[44,44],[45,45],[71,71],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,31],9],[[34,34],9],[[35,35],9],[[70,70],9],[[71,71],9],0,0,[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],72],[[],31],[[],33],[[],69],[[],60],[[],35],[[],66],[[],52],[[],55],[[],56],[[],57],[22,48],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[61,16],[61,16],[[],[[12,[30]]]],[[],[[12,[59]]]],[[],[[12,[31]]]],[[],[[12,[32]]]],[[],[[12,[33]]]],[[],[[12,[69]]]],[[],[[12,[60]]]],[[],[[12,[61]]]],[[],[[12,[34]]]],[[],[[12,[35]]]],[[],[[12,[36]]]],[[],[[12,[62]]]],[[],[[12,[63]]]],[[],[[12,[64]]]],[[],[[12,[70]]]],[[],[[12,[37]]]],[[],[[12,[65]]]],[[],[[12,[38]]]],[[],[[12,[39]]]],[[],[[12,[66]]]],[[],[[12,[71]]]],[[],[[12,[48]]]],[[],[[12,[49]]]],[[],[[12,[52]]]],[[],[[12,[53]]]],[[],[[12,[54]]]],[[],[[12,[55]]]],[[],[[12,[56]]]],[[],[[12,[57]]]],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[],73],[50,73],[[30,30],5],[[59,59],5],[[31,31],5],[[32,32],5],[[33,33],5],[[69,69],5],[[60,60],5],[[61,61],5],[[34,34],5],[[35,35],5],[[36,36],5],[[62,62],5],[[63,63],5],[[64,64],5],[[70,70],5],[[37,37],5],[[65,65],5],[[38,38],5],[[39,39],5],[[40,40],5],[[41,41],5],[[66,66],5],[[43,43],5],[[71,71],5],[[47,47],5],[[48,48],5],[[49,49],5],[[50,50],5],[[51,51],5],[[52,52],5],[[53,53],5],[[54,54],5],[[55,55],5],[[56,56],5],[[57,57],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[30,14],[[12,[15]]]],[[59,14],[[12,[15]]]],[[31,14],[[12,[15]]]],[[32,14],[[12,[15]]]],[[33,14],[[12,[15]]]],[[69,14],[[12,[15]]]],[[60,14],[[12,[15]]]],[[61,14],[[12,[15]]]],[[34,14],[[12,[15]]]],[[34,14],[[12,[15]]]],[[35,14],[[12,[15]]]],[[36,14],[[12,[15]]]],[[62,14],[[12,[15]]]],[[63,14],[[12,[15]]]],[[64,14],[[12,[15]]]],[[70,14],[[12,[15]]]],[[37,14],[[12,[15]]]],[[65,14],[[12,[15]]]],[[38,14],[[12,[15]]]],[[38,14],[[12,[15]]]],[[39,14],[[12,[15]]]],[[40,14],[[12,[15]]]],[[41,14],[[12,[15]]]],[[66,14],[[12,[15]]]],[[42,14],[[12,[15]]]],[[43,14],[[12,[15]]]],[[44,14],[[12,[15]]]],[[45,14],[[12,[15]]]],[[46,14],[[12,[15]]]],[[71,14],[[12,[15]]]],[[47,14],[[12,[15]]]],[[48,14],[[12,[15]]]],[[48,14],[[12,[15]]]],[[49,14],[[12,[15]]]],[[50,14],[[12,[15]]]],[[51,14],[[12,[15]]]],[[52,14],[[12,[15]]]],[[53,14],[[12,[15]]]],[[54,14],[[12,[15]]]],[[55,14],[[12,[15]]]],[[55,14],[[12,[15]]]],[[56,14],[[12,[15]]]],[[56,14],[[12,[15]]]],[[57,14],[[12,[15]]]],[[57,14],[[12,[15]]]],[53,[[6,[67]]]],[53,55],0,[61,[[6,[74]]]],[53,[[6,[67]]]],[[]],[75,59],[[]],[[]],[[]],[[],32],[[]],[[]],[76,69],[[[20,[77,19]]],60],[[]],[[]],[[]],[[]],[16,36],[[]],[[[20,[19]]],62],[[]],[[[20,[19]]],63],[[]],[[],64],[[]],[78,64],[[]],[[]],[[]],[[]],[[]],[79,40],[[],40],[[]],[75,41],[[],41],[[]],[[]],[80,66],[[]],[[]],[81,44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[79,55],[[],55],[[]],[[],56],[75,56],[[]],[[[27,[16]]],51],[82,[[12,[50,83]]]],[[[27,[82]]],[[12,[50,83]]]],[[84,84,84],32],[[84,84,84,84],32],[61,78],[3,[[12,[61]]]],[[74,85],61],[[67,67,67,67],43],[[],[[6,[86]]]],[50,[[6,[86]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[61,[[6,[85]]]],[31],[34],[35],[70],[38],[71],[43,67],[22,48],[[],71],[50,71],0,0,[64],[55],[56],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[50,5],[34,5],[34,5],[[],5],[50,5],0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],49],[50,49],0,[39,70],0,0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,[[22,16],48],[[67,67,67],59],[[67,67],40],[[67,67,67],41],[[67,67,67,67],66],[[71,[20,[48,19]],47,49,[6,[67]]],50],[[[27,[16]],[6,[16]]],51],[[67,67,67],56],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,52],[68,52],0,[[],11],[50,11],[37,11],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[52,68],[[31,31],[[6,[9]]]],[[34,34],[[6,[9]]]],[[35,35],[[6,[9]]]],[[70,70],[[6,[9]]]],[[71,71],[[6,[9]]]],0,[53,79],[[],70],[[],71],[53,[[6,[79]]]],0,[61,[[6,[74]]]],0,[61,[[12,[16]]]],[37,[[12,[87]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[30,12],[59,12],[31,12],[32,12],[33,12],[69,12],[60,12],[61,12],[34,12],[35,12],[36,12],[62,12],[63,12],[64,12],[70,12],[37,12],[65,12],[38,12],[39,12],[66,12],[71,12],[48,12],[49,12],[52,12],[53,12],[54,12],[55,12],[56,12],[57,12],[[]],[50],0,0,[[],11],[50,11],[34,[[6,[34]]]],[[[20,[84,19]]],[[12,[50,83]]]],[[[89,[88]]],[[12,[50,83]]]],0,[32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,78],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[43],0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[90,[[12,[65,91]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[94,[[93,[92]]]]],[[12,[50]]]],[[[94,[[93,[81]]]]],[[12,[50]]]],[[[94,[[95,[92]]]]],[[12,[50]]]],[[[94,[[93,[96]]]]],[[12,[50]]]],[[[94,[[93,[97]]]]],[[12,[50]]]],[[[94,[[93,[98]]]]],[[12,[50]]]],[[[94,[[95,[96]]]]],[[12,[50]]]],[[[94,[[93,[67]]]]],[[12,[50]]]],[[[94,[[95,[99]]]]],[[12,[50]]]],[[],12],[[[94,[[95,[100]]]]],[[12,[50]]]],[[[94,[[95,[98]]]]],[[12,[50]]]],[[[94,[[93,[100]]]]],[[12,[50]]]],[[[94,[[95,[22]]]]],[[12,[50]]]],[[[94,[[95,[84]]]]],[[12,[50]]]],[[[94,[[93,[99]]]]],[[12,[50]]]],[[[94,[[95,[81]]]]],[[12,[50]]]],[[[94,[[93,[84]]]]],[[12,[50]]]],[[[94,[[93,[22]]]]],[[12,[50]]]],[[[94,[[95,[97]]]]],[[12,[50]]]],[[[94,[[95,[67]]]]],[[12,[50]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[22,48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,[[6,[74]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,67],0,[43,67],[22,48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55,67],[56,67],[57,67],0,0,0,0,0,[55,67],[56,67],[57,67],0,0,0,0,0,[56,67],[57,67],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[74],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[101,101],[102,102],[74,74],[85,85],[[]],[[]],[[]],[[]],[11],[11],[11],[11],[11],[11],[11],[11],[85,3],[[],[[12,[101]]]],[[],[[12,[102]]]],[[],[[12,[74]]]],[[],[[12,[85]]]],[11],[11],[11],[11],[[101,101],5],[[102,102],5],[[74,74],5],[[85,85],5],[[],5],[[],5],[[],5],[[],5],[[101,14],[[12,[15]]]],[[101,14],[[12,[15]]]],[[102,14],[[12,[15]]]],[[74,14],[[12,[15]]]],[[74,14],[[12,[15]]]],[[85,14],[[12,[15]]]],[[]],[[]],[[]],[[]],[11,101],[5,85],[3,[[12,[74]]]],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[102,101],74],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[101,12],[102,12],[74,12],[85,12],0,[[]],[[]],[[]],[[]],[[],16],[[],16],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],29],[[],29],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67],[[11,67,67,67,67]],[67],[[75,75,11],26],[67],[11,26],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[11],[11],[11],[11],[11],[103],[11],[[104,14],105],[[104,14],105],[[]],[[]],[106,104],[[],11],[[],11],[[]],[[]],0,[[],6],[[],6],[[]],[[]],[[[27,[107]]],[[12,[103,104]]]],[[]],[[]],[[]],[[]],[108],[[]],[[]],[[]],[[]],[[103,109]],[104,[[6,[110]]]],[[],16],[[],12],[[],12],[[],12],[[],12],0,[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[24,[23]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[[],[[6,[111]]]],[111,[[12,[58]]]],[111,112],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[5,4],113],[111,111],[114,114],[115,115],[109,109],[113,113],[[]],[[]],[[]],[[]],[[]],[[111,111],9],0,[[],72],[114,72],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[111]]]],[[],[[12,[109]]]],[[],[[12,[113]]]],[11],[11],[11],[11],[11],[113,4],0,[[111,111],5],[[113,113],5],[[],5],[[],5],[[115,2],[[6,[11]]]],[[111,14],[[12,[15]]]],[[111,14],[[12,[15]]]],[[114,14],[[12,[15]]]],[[115,14],[[12,[15]]]],[[115,14],[[12,[15]]]],[[109,14],[[12,[15]]]],[[113,14],[[12,[15]]]],[[]],[[]],[[]],[116,109],[117,109],[[]],[118,109],[[]],[[],22],[111],[109,111],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],0,[[],2],[114,2],0,[[2,[119,[96]]],114],[[111,4,120,[20,[114,19]]],115],[[]],[[2,72],114],[[2,121],114],[115,11],[[114,11],[[6,[11]]]],[[115,11],[[6,[11]]]],[114,11],[115,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[111,111],[[6,[9]]]],[[],111],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[111,12],[109,12],[113,12],[111,16],0,[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[115,[[12,[122]]]],[[],12],[[],12],[20,[[12,[114,122]]]],[[],[[12,[114,122]]]],[[[20,[19]]],[[12,[114,122]]]],[117,[[12,[115,122]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],29],[[],29],[[],29],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[114,[[123,[121,19]]]],[114,119],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[],124],[11],[11],[11],[11],[11],[11],[[],[[123,[125]]]],[[],[[20,[109]]]],[[],[[20,[109]]]],[124,[[20,[109]]]],[11],[11],[11],[[]],[[]],[126],[[]],[[]],[126],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[],5],[[],5],[127,5],[[],6],[[],6],[[],6],[[]],[[]],[[]],[10,126],[[],124],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[109],[[127,109]],[[126,109]],[[124,109]],[[[20,[109]]]],[[[20,[109]]]],[[124,[20,[109]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],29],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[128,[[12,[114,122]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[11],[11],[11],[11],[11],[11],0,[[129,14],105],[[129,14],105],[[]],[122,129],[[]],[[],11],[[],11],0,[[]],[[]],[130,[[12,[129]]]],[[],6],[[],6],[[]],[[]],[[[27,[4]]],130],0,[[]],[[]],[[]],[[]],[108],[[]],[[]],[[]],[[]],[130,[[12,[129]]]],[[130,125],[[12,[129]]]],[129,[[6,[110]]]],0,0,0,[[],16],[[],12],[[],12],[[],12],[[],12],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[130,128],[[12,[130,129]]]],[[130,131],[[12,[130,129]]]],[[130,[6,[131]]],[[12,[130,129]]]],[[130,132,[27,[133]]],130],[[130,5],130],[[130,120],130],[[]],[[]],[[]],[[]],0,0,[1],0,[23,125],[[]],[[]],[[]],[[]],[23,125],[[]],[[]],[134,23],[28,23],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[23,23],[[]],[[134,10],23],[[134,5],134],0,[11],[11],[11],[11],[[],23],[23,[[20,[109]]]],[11],[11],[[134,5],134],0,[134],[[]],[[]],[[],11],[[],11],[[]],[[]],[23,5],0,[[],6],[[],6],[[]],[[]],[[[27,[8]]],134],[[28,[123,[125]]],23],[[]],[[]],[[]],[[]],[[134,7],134],0,[[]],[[]],[[]],[[]],[[134,[27,[107]]],[[12,[23,104]]]],[[23,109]],[[23,120,113]],[23,135],0,[[]],[[],12],[[],12],[[],12],[[],12],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[],[[123,[125]]]],0,[109],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[133,133],[[136,137]],[[133,138]],[[133,133]],[[136,137]],[[133,133]],[[],6],[[],[[12,[58]]]],[133,67],[133,81],[133,97],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[136,136],[133,133],[132,132],[120,120],[139,139],[[]],[[]],[[]],[[]],[[]],[[136,136],9],[[133,133],9],[[132,132],9],[[120,120],9],[[139,139],9],[[],72],[[],132],[[],120],[11],[11],[11],[11],[11],[11],[11],[11],[11],[11],[[],[[12,[136]]]],[[],[[12,[133]]]],[[],[[12,[132]]]],[[],[[12,[120]]]],[[],[[12,[139]]]],[11],[11],[11],[11],[11],[[136,136],5],[[133,138],5],[[133,133],5],[[132,132],5],[[120,120],5],[[139,139],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[136,14],[[12,[15]]]],[[133,14],[[12,[15]]]],[[132,14],[[12,[15]]]],[[120,14],[[12,[15]]]],[[139,14],[[12,[15]]]],[136,16],[[139,133],16],[[139,140],16],[[132,140],16],[[]],[133,136],[138,136],[136,133],[97,133],[137,133],[[]],[[]],[[]],[[],120],[[]],[97,[[6,[139]]]],[[],120],[97,133],[97,133],[97,136],[97,133],[81,136],[97,133],[22,[[6,[139]]]],[97,136],[[120,132],[[6,[133]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[136],[133],[132],[120],[139],[[],11],[[],11],[[],11],[[],11],[[],11],[[120,132,133],[[6,[133]]]],[[]],[[]],[[]],[[]],[[]],[120],[120],[136,5],[120,5],[136,5],[133,5],[120,5],[120,141],[[[142,[136]],67],136],[[],132],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[132,143],0,[136,97],[133],[[[27,[143]],139],132],[[]],[[[27,[143]]],132],[[[27,[143]]],132],[[],136],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[136,136],[[6,[9]]]],[[133,133],[[6,[9]]]],[[133,138],[[6,[9]]]],[[132,132],[[6,[9]]]],[[120,120],[[6,[9]]]],[[139,139],[[6,[9]]]],[[120,132],[[6,[133]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[136,12],[133,12],[132,12],[120,12],[139,12],[[136,136],137],[[136,137]],[[133,133]],[[133,138]],[[133,133]],[[],133],[[],120],[120,141],[120,141],[136,[[6,[144]]]],[[]],[[]],[[]],[[]],[[]],[[],12],[144,[[12,[136]]]],[145,[[12,[136]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[132,139],0,[[],29],[[],29],[[],29],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Private"],[3,"ComponentName"],[15,"str"],[3,"EntityPath"],[15,"bool"],[4,"Option"],[3,"RecordingId"],[3,"ApplicationId"],[4,"Ordering"],[4,"SocketAddr"],[15,"usize"],[4,"Result"],[3,"Field"],[3,"Formatter"],[3,"Error"],[3,"String"],[3,"EntityPathImpl"],[4,"EntityPathPart"],[3,"Global"],[3,"Vec"],[3,"Uuid"],[15,"u64"],[3,"Session"],[6,"MutexGuard"],[3,"EntityPathHash"],[8,"Iterator"],[8,"Into"],[3,"RecordingInfo"],[3,"TypeId"],[3,"Arrow3D"],[3,"ClassId"],[3,"ColorRGBA"],[3,"AnnotationInfo"],[3,"InstanceKey"],[3,"KeypointId"],[3,"Label"],[3,"RawMesh3D"],[4,"MeshFormat"],[4,"Mesh3D"],[3,"Point2D"],[3,"Point3D"],[3,"Radius"],[4,"Rect2D"],[3,"Scalar"],[3,"ScalarPlotProps"],[3,"Size3D"],[4,"TensorData"],[3,"TensorDimension"],[4,"TensorDataMeaning"],[3,"Tensor"],[3,"TextEntry"],[3,"Rigid3"],[3,"Pinhole"],[4,"Transform"],[3,"Vec2D"],[3,"Vec3D"],[3,"Vec4D"],[4,"Error"],[3,"Box3D"],[3,"AnnotationContext"],[3,"ViewCoordinates"],[3,"LineStrip2D"],[3,"LineStrip3D"],[3,"Mat3x3"],[3,"EncodedMesh3D"],[3,"Quaternion"],[15,"f32"],[3,"IsoTransform"],[3,"ClassDescription"],[3,"MeshId"],[3,"TensorId"],[4,"DataType"],[4,"TensorDataType"],[3,"SignedAxis3"],[3,"Vec3"],[3,"ClassDescriptionArrow"],[3,"ClassMapElemArrow"],[3,"Mat3"],[3,"Vec2"],[3,"Quat"],[15,"f64"],[4,"DynamicImage"],[4,"TensorImageError"],[15,"u8"],[4,"Handedness"],[4,"TensorElement"],[4,"RawMeshError"],[3,"Path"],[8,"AsRef"],[3,"EncodedMesh3DArrow"],[4,"FieldError"],[15,"i16"],[3,"OwnedRepr"],[3,"ArrayBase"],[3,"ViewRepr"],[15,"i32"],[15,"i64"],[15,"u16"],[15,"u32"],[15,"i8"],[4,"Axis3"],[4,"Sign"],[3,"FileSink"],[4,"FileSinkError"],[6,"Result"],[4,"EncodeError"],[3,"PathBuf"],[3,"Demand"],[4,"LogMsg"],[8,"Error"],[3,"MsgId"],[15,"u128"],[4,"PathOp"],[3,"ComponentBundle"],[3,"MsgBundle"],[3,"EntityPathOpMsg"],[3,"ArrowMsg"],[3,"BeginRecordingMsg"],[3,"ListArray"],[3,"TimePoint"],[8,"Array"],[4,"MsgBundleError"],[3,"Box"],[3,"BufferedSink"],[8,"LogSink"],[3,"TcpSink"],[3,"DisabledSink"],[8,"IntoIterator"],[4,"MsgSenderError"],[3,"MsgSender"],[8,"SerializableComponent"],[3,"Timeline"],[3,"TimeInt"],[3,"SessionBuilder"],[3,"Arc"],[3,"Time"],[3,"Duration"],[3,"TimeReal"],[4,"TimeType"],[3,"TimeRange"],[8,"ExactSizeIterator"],[3,"RangeInclusive"],[3,"TimelineName"],[3,"OffsetDateTime"],[3,"SystemTime"],[8,"Component"],[8,"TensorTrait"]]},\
"re_sdk_comms":{"doc":"TCP communications between a Rerun logging SDK and …","t":[3,17,17,17,6,3,0,5,5,12,12,12,5,12,12,12,12,12,12,12,5,0,0,3,13,13,13,3,4,13,4,13,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,5,11,11,11,11,11,11,11,11,12,5,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,4,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Client","DEFAULT_SERVER_PORT","PREFIX","PROTOCOL_VERSION","Result","ServerOptions","buffered_client","decode_log_msg","default_server_addr","drop_join","drop_quit_tx","encode_join","encode_log_msg","encode_quit_tx","flushed_rx","max_latency_sec","msg_tx","quiet","send_join","send_quit_tx","serve","server","tcp_client","Client","DropIfDisconnected","Flush","Flush","FlushedMsg","InterruptMsg","LogMsg","MsgMsg","Packet","PacketMsg","Quit","QuitMsg","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop_if_disconnected","drop_join","drop_quit_tx","encode_join","encode_quit_tx","eq","eq","eq","equivalent","equivalent","equivalent","flush","flushed_rx","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","msg_drop","msg_encode","msg_tx","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","send","send_join","send_msg_msg","send_quit_tx","send_until_success","tcp_sender","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","CongestionManager","ServerOptions","Throttling","TimelineThrottling","__clone_box","accept_rate","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","chance_of_sending","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","fmt","from","from","from","from","init","init","init","init","into","into","into","into","last_log_time","last_time","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","max_latency_sec","max_latency_sec","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","quiet","register_latency","register_latency","rng","run_client","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","send_time","serve","should_send","should_send_time","should_send_time_point","spawn_client","throttling","timeline_histories","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Connected","Disconnected","Pending","TcpClient","TcpStreamState","addrs","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","connect","default","deref","deref","deref_mut","deref_mut","drop","drop","flush","from","from","has_disconnected","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","send","stream_state","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from"],"q":["re_sdk_comms","","","","","","","","","","","","","","","","","","","","","","","re_sdk_comms::buffered_clientre_sdk_comms::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_sdk_comms::tcp_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Send <code>LogMsg</code>es to a server over TCP.","","","","","","","","The default address of a Rerun TCP server which an SDK …","","","","","","","If the latency in the <code>LogMsg</code> channel is greater than this, …","","Turns <code>info</code>-level logs into <code>debug</code>-level logs.","","","Listen to multiple SDK:s connecting to us over TCP.","TODO(emilk): use tokio instead","","Send <code>LogMsg</code>es to a server over TCP.","Switch to a mode where we drop messages if disconnected.","","","","Sent to prematurely quit (before flushing).","","","","","Quite immediately, dropping any unsent message.","Sent to prematurely quit (before flushing).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wait until everything has been sent.","","","","","Switch to a mode where we drop messages if disconnected.","","","","","","","","","","","Stall until all messages so far has been sent.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Connect via TCP to this log server.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decides how many messages to drop so that we achieve a …","","Figures out how large fraction of messages to send based on","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","If the latency in the <code>LogMsg</code> channel is greater than this, …","","","","","","","","","","","Turns <code>info</code>-level logs into <code>debug</code>-level logs.","","","","","","","","","","","","","","Listen to multiple SDK:s connecting to us over TCP.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A healthy <code>TcpStream</code> ready to send packets","A broken <code>TcpStream</code> which experienced a failure to connect …","The <code>TcpStream</code> is yet to be connected.","Connect to a rerun server and send log messages.","State of the <code>TcpStream</code>","","","","","","","","","","","","","","Returns <code>false</code> on failure. Does nothing if already …","","","","","","","","Wait until all logged data have been sent.","Returns the argument unchanged.","Returns the argument unchanged.","Check if the underlying <code>TcpStream</code> has entered the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","blocks until it is sent","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,11,11,11,0,11,11,7,11,7,11,11,0,0,0,0,16,21,35,0,0,21,0,35,0,16,0,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,11,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,11,13,15,16,11,11,11,11,11,13,15,16,13,15,16,11,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,0,0,11,11,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,11,11,11,11,0,0,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,21,35,11,13,15,16,0,0,0,0,7,29,28,29,7,26,28,29,7,26,28,29,7,26,28,29,7,26,26,28,29,7,26,28,29,7,26,7,7,7,26,28,29,7,26,28,29,7,26,28,29,7,26,7,7,28,29,7,26,28,29,7,26,28,29,7,26,29,29,28,29,7,26,28,29,7,26,29,7,28,29,28,29,7,26,28,29,7,26,7,28,29,28,0,28,29,7,26,28,29,7,26,26,0,28,28,28,0,28,28,7,28,29,7,26,28,29,7,26,28,29,7,26,28,29,7,26,28,29,7,26,28,29,7,26,28,29,7,26,28,29,7,26,36,36,36,0,0,22,36,22,36,22,36,22,36,22,36,22,36,22,22,22,36,22,36,22,36,22,22,36,22,22,36,22,36,22,36,22,36,22,22,36,22,36,22,36,22,36,22,22,22,36,22,36,22,36,22,36,22,36,22,36,22,36,22,36,22],"f":[0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],3],0,0,0,[1,[[5,[4]]]],0,0,0,0,0,0,0,[[6,7],[[9,[[8,[1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[11],[12],[12],[12],[12],[11],0,0,0,0,[[13,13],14],[[15,15],14],[[16,16],14],[[],14],[[],14],[[],14],[11],0,[[13,17],18],[[15,17],18],[[16,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[19,19]],[[19,20,19,20]],0,[3,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,1]],0,[[11,21]],0,[[22,14,19],[[10,[16]]]],[[3,19,19,20]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[25],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[7,7],[[]],[[],7],[[],26],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[7,7],14],[[7,17],18],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],0,0,[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,0,[27,28],[27,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[28,27]],[[29,27]],0,[[30,31,7],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[6,7],[[9,[[8,[1]]]]]],[[28,1],14],[[28,32,33],14],[[28,34],14],[[30,[31,[1]],7]],0,0,[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[22,9],[[],22],[12],[12],[12],[12],[12],[12],[22],[[]],[[]],[22,14],[[],12],[[],12],[[]],[[]],[[],10],[[],10],[[]],[[]],[3,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,9],0,[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"LogMsg"],[6,"Result"],[4,"SocketAddr"],[15,"u8"],[3,"Vec"],[15,"u16"],[3,"ServerOptions"],[3,"Receiver"],[6,"Result"],[4,"Option"],[3,"Client"],[15,"usize"],[3,"FlushedMsg"],[15,"bool"],[3,"QuitMsg"],[4,"InterruptMsg"],[3,"Formatter"],[6,"Result"],[3,"Receiver"],[3,"Sender"],[4,"MsgMsg"],[3,"TcpClient"],[4,"Result"],[3,"TypeId"],[3,"Private"],[3,"TimelineThrottling"],[15,"f32"],[3,"CongestionManager"],[3,"Throttling"],[3,"TcpStream"],[3,"Sender"],[3,"TimelineName"],[15,"i64"],[3,"TimePoint"],[4,"PacketMsg"],[4,"TcpStreamState"]]},\
"re_smart_channel":{"doc":"A channel that keeps track of latency and queue length.","t":[13,3,13,3,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,5,5,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12],"n":["File","Receiver","Sdk","Sender","SharedStats","Source","TcpServer","WsClient","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chained_channel","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","fmt","from","from","from","from","hash","init","init","init","init","into","into","into","into","is_empty","is_empty","is_network","latency_ns","latency_ns","latency_ns","latency_sec","latency_sec","len","len","recv","recv_with_send_time","rx","send","send_at","smart_channel","smart_channel_with_stats","source","source","stats","stats","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_recv","tx","type_id","type_id","type_id","type_id","path","port","ws_server_url"],"q":["re_smart_channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_smart_channel::Source","",""],"d":["The source if a file on disk","","The source is the logging sdk directly, same process.","","Stats for a channel, possibly shared between chained …","Where is the messages coming from?","We are a TCP server listening on this port","We are a WebSocket client connected to a rerun server.","","","","","","","","","Create a new channel that use the same stats as this one.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the channel currently empty of messages?","Is the channel currently empty of messages?","","Latest known latency from sending a message to receiving …","Latest known latency from sending a message to receiving …","Latest known latency from sending a message to receiving …","Latest known latency from sending a message to receiving …","Latest known latency from sending a message to receiving …","Number of messages in the channel right now.","Number of messages in the channel right now.","","Receives without registering the latency.","","","back-date a message","","Create a new channel using the same stats as some other.","Where is the data coming from?","","","","","","","","","","","","","","","","","","","","","","The server we are connected to (or are trying to connect …"],"i":[3,0,3,0,0,0,3,3,2,3,6,5,2,3,6,5,2,3,5,3,5,6,2,3,6,5,2,3,6,5,2,3,6,5,3,3,2,3,6,5,3,2,3,6,5,2,3,6,5,2,5,3,2,5,6,2,5,2,5,2,2,2,5,5,0,0,2,2,2,5,3,5,2,3,6,5,2,3,6,5,2,5,2,3,6,5,20,21,22],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]]],[3,3],[[[5,[[0,[4,1]]]]],[[5,[[0,[4,1]]]]]],[[]],[[]],[[],6],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[3,3],8],[[3,9],10],[[]],[[]],[[]],[[]],[3],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[[2,[1]]],8],[[[5,[1]]],8],[3,8],[[[2,[1]]],11],[[[5,[1]]],11],0,[[[2,[1]]],12],[[[5,[1]]],12],[[[2,[1]]],7],[[[5,[1]]],7],[[[2,[1]]],[[14,[1,13]]]],[[[2,[1]]],[[14,[13]]]],0,[[[5,[1]],1],[[14,[[15,[1]]]]]],[[[5,[1]],16,1],[[14,[[15,[1]]]]]],[3],[[3,[17,[6]]]],[[[2,[1]]],3],0,0,0,[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[[2,[1]]],[[14,[1,18]]]],0,[[],19],[[],19],[[],19],[[],19],0,0,0],"p":[[8,"Send"],[3,"Receiver"],[4,"Source"],[8,"Clone"],[3,"Sender"],[3,"SharedStats"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"f32"],[3,"RecvError"],[4,"Result"],[3,"SendError"],[6,"Instant"],[3,"Arc"],[4,"TryRecvError"],[3,"TypeId"],[13,"File"],[13,"TcpServer"],[13,"WsClient"]]},\
"re_string_interner":{"doc":"Yet another string interning library.","t":[7,3,3,11,11,11,11,11,11,11,5,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11],"n":["GLOBAL_INTERNER","InternedString","StringInterner","as_ref","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","bytes_used","bytes_used","clone","clone_into","cmp","declare_new_type","default","deref","deserialize","eq","equivalent","fmt","fmt","from","from","from","from","get_hash","global_intern","hash","hash","hash","hash","intern","into","into","len","map","new","partial_cmp","serialize","string","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["re_string_interner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Declare a newtype wrapper around <code>InternedString</code> with all …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","global interning function.","Fast but high quality string hash","","Precomputed hash of the string.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,4,1,4,0,4,1,1,1,0,4,1,1,1,1,1,1,1,1,1,4,1,0,0,1,1,1,4,1,4,4,4,1,1,1,1,1,1,1,4,1,4,1,4],"f":[0,0,0,[1,2],[1,2],[1,2],[[]],[[]],[[]],[[]],[[],3],[4,3],[1,1],[[]],[[1,1],5],0,[[],4],[1,2],[6,[[7,[1]]]],[[1,1],8],[[],8],[[1,9],10],[[1,9],10],[2,1],[11,1],[[]],[[]],[[],12],[2,1],[13,12],[1],[1,12],0,[[4,2],1],[[]],[[]],[4,3],0,[2,1],[[1,1],[[14,[5]]]],[[1,15],7],0,[[]],[[],11],[[],7],[[],7],[[],7],[[],7],[[],16],[[],16]],"p":[[3,"InternedString"],[15,"str"],[15,"usize"],[3,"StringInterner"],[4,"Ordering"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"String"],[15,"u64"],[8,"Hash"],[4,"Option"],[8,"Serializer"],[3,"TypeId"]]},\
"re_tensor_ops":{"doc":"Helper used to work with <code>re_log_types::Tensor</code> as an <code>ndarray</code>","t":[0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,12,11,11,12,12,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11],"n":["dimension_mapping","DimensionMapping","DimensionSelector","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","create","deserialize","deserialize","dim_idx","eq","eq","equivalent","equivalent","find_width_height_dim_indices","fmt","fmt","from","from","height","into","into","invert_height","invert_width","is_name_like_height","is_name_like_width","is_valid","longest_and_second_longest_dim_indices","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","selectors","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","visible","vzip","vzip","width","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from"],"q":["re_tensor_ops","re_tensor_ops::dimension_mapping","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Flip the height","Flip the width","","","Protect against old serialized data that is not up-to-date …","Returns the longest and second longest dimensions","","","","","","","","","","","","","","Which dimensions have selectors, and are they visible?","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,4,3,4,3,3,4,3,4,0,3,4,3,4,4,3,4,4,4,0,0,4,0,3,4,3,4,3,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4],"f":[0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[3,3],[4,4],[[]],[[]],[[],4],[[],[[5,[3]]]],[[],[[5,[4]]]],0,[[3,3],6],[[4,4],6],[[],6],[[],6],[[]],[[3,7],8],[[4,7],8],[[]],[[]],0,[[]],[[]],0,0,[9,6],[9,6],[[4,10],6],[[]],[[],2],[[],2],[[]],[[]],[10,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,5],[4,5],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],11],[[],11],[[]],[[]],[[]],[[]],0,[[]],[[]],0,[[]],[[]],[[]],[[]]],"p":[[3,"Private"],[4,"Option"],[3,"DimensionSelector"],[3,"DimensionMapping"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[15,"usize"],[3,"TypeId"]]},\
"re_tuid":{"doc":"TUID: Time-based Unique Identifiers.","t":[18,3,3,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["MAX","MutableTuidArray","Tuid","TuidArray","TuidArrayIterator","ZERO","__clone_box","arrow_deserialize","arrow_serialize","as_any","as_arc","as_box","as_mut_any","as_u128","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","consume_next","data_type","data_type","data_type","default","deserialize","eq","field_inc","field_inc","field_time_ns","field_time_ns","fmt","fmt","from","from","from","from","has_validity","hash","inc","init_validity","into","into","into","into","into_iter","into_iter","len","monotonic_nanos_since_epoch","new","new_array","next","partial_cmp","push_null","random","random_u64","reserve","return_next","serialize","shrink_to_fit","time_ns","to_owned","try_extend","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","validity","validity","validity_iter"],"q":["re_tuid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["All ones.","","","","","All zeroes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Initialized to something random on each thread, then …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns a high-precision, monotonically increasing count …","","","","","","","","","","","","Approximate nanoseconds since epoch.","","","","","","","","","","","","","","","","","",""],"i":[2,0,0,0,0,2,2,2,2,5,5,5,5,2,5,18,12,2,5,18,12,2,2,2,2,12,5,2,5,5,2,2,5,12,5,12,5,2,5,18,12,2,12,2,2,5,5,18,12,2,18,12,5,0,5,2,12,2,5,2,0,5,12,2,5,2,2,5,5,18,12,2,5,18,12,2,5,5,18,12,2,5,5,12],"f":[0,0,0,0,0,0,[1],[[[3,[2]]],[[3,[2]]]],[2,4],[5,6],[5,[[8,[7]]]],[5,[[9,[7]]]],[5,6],[2,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],[[2,2],11],[12],[5,13],[[],13],0,[[],5],[[],[[14,[2]]]],[[2,2],15],0,0,0,0,[[5,16],17],[[2,16],17],[[]],[[]],[[]],[[]],0,[2],0,[5],[[]],[[]],[[]],[[]],[18],[[]],[5,19],[[],20],[[],5],[[]],[12,3],[[2,2],[[3,[11]]]],[5],[[],2],[[],20],[[5,19]],[12,[[3,[2]]]],[2,14],[5],0,[[]],[[5,21],4],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[5,[3,[[22,[2]]]]],4],[[],23],[[],23],[[],23],[[],23],[5,[[3,[24]]]],0,0],"p":[[3,"Private"],[3,"Tuid"],[4,"Option"],[6,"Result"],[3,"MutableTuidArray"],[8,"Any"],[8,"Array"],[3,"Arc"],[3,"Box"],[15,"u128"],[4,"Ordering"],[3,"TuidArrayIterator"],[4,"DataType"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TuidArray"],[15,"usize"],[15,"u64"],[8,"IntoIterator"],[8,"Borrow"],[3,"TypeId"],[3,"MutableBitmap"]]},\
"re_ui":{"doc":"Rerun GUI theme and helpers, built around <code>egui</code>.","t":[17,4,3,3,17,2,17,13,13,13,13,13,13,3,13,13,13,13,13,3,13,13,13,13,13,13,3,13,13,13,11,11,11,11,12,12,12,11,11,11,11,0,0,0,12,11,11,11,12,5,11,11,11,11,12,11,0,12,12,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,11,12,11,11,11,12,11,11,11,0,12,11,11,11,11,0,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,12,5,11,11,11,5,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,3,3,5,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,12,12,12,11,11,5,5,5,5,5,11,11,11,5,5,12,11,12,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,3,11,11,11,11,11,11,12,11,5,11,11,11,11,5,5],"n":["CUSTOM_WINDOW_DECORATIONS","Command","CommandPalette","DesignTokens","FULLSIZE_CONTENT","Icon","NATIVE_WINDOW_BAR","Open","OpenProfiler","PlaybackStepBack","PlaybackStepForward","PlaybackTogglePlayPause","Quit","ReUi","ResetViewer","Save","SaveSelection","SelectionNext","SelectionPrevious","StaticImageCache","ToggleBlueprintPanel","ToggleCommandPalette","ToggleFullscreen","ToggleMemoryPanel","ToggleSelectionPanel","ToggleTimePanel","TopBarStyle","ZoomIn","ZoomOut","ZoomReset","borrow","borrow","borrow_mut","borrow_mut","bottom_bar_color","bottom_bar_rounding","bottom_bar_stroke","bottom_panel_frame","bottom_panel_margin","clone","clone_into","command","command_palette","design_tokens","design_tokens","downcast","downcast","draw_shadow_line","egui_ctx","egui_dock_style","error_text","from","from","grid_left_hand_label","height","icon_image","icons","images","indent","into","into","large_button","large_button_impl","large_button_selected","large_collapsing_header","load_and_apply","loop_everything_color","loop_selection_color","medium_icon_toggle_button","native_window_buttons_ui","native_window_rounding","normal_rounding","paint_watermark","query","rerun_logo","selectable_label_with_icon","selected_alternative","selection_grid","setup_table_body","setup_table_header","shadow_gradient_dark_start","small_icon_button","small_icon_size","small_rounding","static_image_cache","static_image_cache","table_header_height","table_line_height","title_bar_height","to_owned","toggle_switch","toggle_switch","top_bar_color","top_bar_height","top_bar_margin","top_bar_style","top_panel_frame","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","view_padding","visibility_toggle_button","visible","warning_text","window_rounding","Command","CommandIter","Open","OpenProfiler","PlaybackStepBack","PlaybackStepForward","PlaybackTogglePlayPause","Quit","ResetViewer","Save","SaveSelection","SelectionNext","SelectionPrevious","ToggleBlueprintPanel","ToggleCommandPalette","ToggleFullscreen","ToggleMemoryPanel","ToggleSelectionPanel","ToggleTimePanel","ZoomIn","ZoomOut","ZoomReset","back_idx","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","downcast","downcast","eq","equivalent","fmt","format_shortcut_tooltip_suffix","from","from","get","get_hash","hash","idx","into","into","into_iter","iter","kb_shortcut","len","listen_for_kb_shortcut","marker","menu_button","menu_button_ui","next","next_back","nth","size_hint","text","text_and_tooltip","to_owned","to_owned","tooltip","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","CommandPalette","FuzzyMatch","alternatives_ui","borrow","borrow","borrow_mut","borrow_mut","command","commands_that_match","default","downcast","downcast","format_match","from","from","fuzzy_match","into","into","query","score","selected_alternative","show","toggle","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","visible","window_content_ui","DesignTokens","Typography","apply_design_tokens","borrow","borrow","borrow_mut","borrow_mut","bottom_bar_color","bottom_bar_rounding","bottom_bar_stroke","clone","clone_into","deserialize","downcast","downcast","fmt","follow_path","follow_path_or_die","fontFamily","fontSize","fontWeight","from","from","get_alias","get_alias_str","get_aliased_color","get_global_color","global_path_value","into","into","load_and_apply","parse_color","parse_px","shadow_gradient_dark_start","to_owned","top_bar_color","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","ADD","ARROW_LEFT","ARROW_RIGHT","BOTTOM_PANEL_TOGGLE","CLOSE","CONTAINER","FOLLOW","INVISIBLE","Icon","LEFT_PANEL_TOGGLE","LOOP","MAXIMIZE","MINIMIZE","PAUSE","PLAY","REMOVE","RERUN_MENU","RESET","RIGHT_PANEL_TOGGLE","SPACE_VIEW_3D","SPACE_VIEW_CHART","SPACE_VIEW_HISTOGRAM","SPACE_VIEW_RAW","SPACE_VIEW_SCATTERPLOT","SPACE_VIEW_TENSOR","SPACE_VIEW_TEXT","VISIBLE","borrow","borrow_mut","clone","clone_into","downcast","fmt","from","id","into","new","png_bytes","to_owned","try_from","try_into","type_id","upcast","StaticImageCache","borrow","borrow_mut","default","downcast","from","get","images","into","load_image_bytes","try_from","try_into","type_id","upcast","toggle_switch","toggle_switch_ui"],"q":["re_ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_ui::command","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_ui::command_palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_ui::design_tokens","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_ui::icons","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_ui::static_image_cache","","","","","","","","","","","","","","re_ui::toggle_switch",""],"d":["If true, we hide the native window decoration (the top bar …","All the commands we support.","","The look and feel of the UI.","If true, we fill the entire window, except for the …","","If true, we show the native window decorations/chrome with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","For the streams view (time panel)","","","","","","","Colors, styles etc loaded from a design_tokens.json","","","Draws a shadow into the given rect with the shadow …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Workaround for putting a label into a grid at the top left …","Height of the top bar","","","","Extra horizontal space in the top left corner to make room …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create <code>ReUi</code> and apply style to the given egui context.","The color we use to mean “loop all the data”","The color we use to mean “loop this selection”","","Show some close/maximize/minimize buttons for the native …","","","Paint a watermark","","","","","Grid to be used in selection view.","","","","","","","","","","","Height of the title row in the blueprint view and …","","Adapted from <code>egui_demo_lib/src/demo/toggle_switch.rs</code>","iOS-style toggle switch.","","Height of the top-most bar.","","","","","","","","","","","","Margin on all sides of views.","","","","","All the commands we support.","An iterator over the variants of Self","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add e.g. “ (Ctrl+F11)“ as a suffix","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Show this command as a menu-button.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Show the command palette, if it is visible.","","","","","","","","","","","","The look and feel of the UI.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create <code>DesignTokens</code> and apply style to the given egui …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Human readable unique id","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","iOS-style toggle switch.",""],"i":[0,0,0,0,0,0,0,33,33,33,33,33,33,0,33,33,33,33,33,0,33,33,33,33,33,33,0,33,33,33,30,1,30,1,45,45,45,1,1,1,1,0,0,0,1,30,1,1,1,0,1,30,1,1,30,1,0,49,30,30,1,1,1,1,1,1,1,1,1,0,1,1,1,42,1,1,42,1,1,1,45,1,1,1,0,1,1,1,1,1,0,0,45,1,1,1,1,30,1,30,1,30,1,30,1,1,1,42,1,1,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,33,34,33,34,33,34,33,34,33,34,33,33,33,33,33,34,34,33,33,34,33,34,34,33,33,34,33,34,33,33,34,34,34,34,33,33,33,34,33,33,34,33,34,33,34,33,34,0,0,42,43,42,43,42,43,0,42,43,42,0,43,42,43,43,42,42,43,42,42,42,43,42,43,42,43,42,43,42,42,42,0,0,0,45,46,45,46,45,45,45,45,45,46,45,46,45,0,0,46,46,46,45,46,0,0,0,0,0,45,46,45,0,0,45,45,45,45,46,45,46,45,46,45,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,49,49,49,49,49,49,49,49,0,49,49,49,49,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[1,2],[1,3],[1,1],[[]],0,0,0,0,[[]],[[]],[[1,4,5,6]],0,[7,8],[[1,[10,[9]]],11],[[]],[[]],[[1,4,12],13],0,[[1,14],[[16,[15]]]],0,0,0,[[]],[[]],[[1,4,14],13],[[1,4,14,[18,[17]],[18,[17]]],13],[[1,4,14,19],13],[[1,4,12,19,20]],[21,1],[[],17],[[],17],[[1,4,14,19],13],[[22,4]],[[],23],[[],23],[1],0,[1,[[16,[15]]]],[[1,4,14,[10,[24]],19],13],0,[[1,4,12],25],[26],[27],0,[[1,4,14],13],[[],3],[[],23],0,0,[[],23],[[],23],[[],23],[[]],0,[19,28],0,[[],23],[[],29],[[1,[18,[23]],19],30],[1,2],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],18],[[],18],[[],23],[[1,4,19],13],0,[[1,[10,[9]]],11],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[33,33],[34,34],[[]],[[]],[[]],[[]],[[33,33],19],[[],19],[[33,35],36],[[33,21],9],[[]],[[]],[[34,37],[[18,[33]]]],[[],38],[33],0,[[]],[[]],[[]],[[],34],[33,[[18,[39]]]],[34,37],[21,[[18,[33]]]],0,[[33,21],40],[[33,4,41],13],[34,18],[34,18],[[34,37],18],[34],[33,12],[33],[[]],[[]],[33,12],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],18],[[],18],0,0,[[42,4,19,19],[[18,[33]]]],[[]],[[]],[[]],[[]],0,[12,[[41,[43]]]],[[],42],[[]],[[]],[[43,4,44,17],24],[[]],[[]],0,[[]],[[]],0,0,0,[[42,21],[[18,[33]]]],[42],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],18],[[],18],0,[[42,4],[[18,[33]]]],0,0,[21,45],[[]],[[]],[[]],[[]],0,0,0,[45,45],[[]],[[],[[31,[46]]]],[[]],[[]],[[45,35],36],[[47,12],[[18,[47]]]],[[47,12],47],0,0,0,[[]],[[]],[[47,12],48],[[47,12],12],[[47,12],17],[[47,12],17],[[47,12],47],[[]],[[]],[21,45],[12,17],[12,23],0,[[]],0,[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],18],[[],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[]],[[14,35],36],[[]],0,[[]],[12,14],0,[[]],[[],31],[[],31],[[],32],[[],18],0,[[]],[[]],[[],49],[[]],[[]],[[49,12],[[16,[15]]]],0,[[]],[[],[[31,[50,9]]]],[[],31],[[],31],[[],32],[[],18],[19,28],[[4,19],13]],"p":[[3,"ReUi"],[3,"Frame"],[3,"Vec2"],[3,"Ui"],[3,"Rect"],[4,"Direction"],[3,"Style"],[3,"Style"],[3,"String"],[8,"Into"],[3,"RichText"],[15,"str"],[3,"Response"],[3,"Icon"],[3,"RetainedImage"],[3,"Arc"],[3,"Color32"],[4,"Option"],[15,"bool"],[8,"FnOnce"],[3,"Context"],[3,"Frame"],[15,"f32"],[4,"WidgetText"],[3,"Grid"],[3,"TableBody"],[3,"TableRow"],[8,"Widget"],[3,"Margin"],[3,"TopBarStyle"],[4,"Result"],[3,"TypeId"],[4,"Command"],[3,"CommandIter"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"u64"],[3,"KeyboardShortcut"],[3,"Button"],[3,"Vec"],[3,"CommandPalette"],[3,"FuzzyMatch"],[3,"FontId"],[3,"DesignTokens"],[3,"Typography"],[4,"Value"],[8,"DeserializeOwned"],[3,"StaticImageCache"],[3,"ColorImage"]]},\
"re_viewer":{"doc":"Rerun Viewer GUI.","t":[17,3,4,3,13,3,13,13,3,13,11,12,0,12,12,0,11,11,11,12,12,11,11,11,11,11,12,12,12,5,11,11,11,11,0,11,11,11,0,11,12,11,11,5,12,11,11,12,12,12,11,11,0,12,12,12,0,0,11,11,12,12,12,12,0,5,5,12,11,11,12,12,12,12,11,12,11,11,11,0,11,11,11,12,0,11,5,5,11,11,12,12,12,12,3,3,13,17,17,17,17,4,3,13,13,4,13,13,17,11,11,11,5,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,12,5,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,11,11,11,11,11,12,12,5,5,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,5,5,12,12,12,11,5,12,11,11,12,11,5,12,5,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,12,12,11,11,11,11,11,11,12,12,12,11,11,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,17,2,2,2,3,18,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,5,12,12,5,12,12,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,5,0,0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,12,3,2,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,12,11,11,11,11,0,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,11,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,11,11,11,11,11,11,11,11,4,13,4,3,13,13,13,3,3,13,4,3,13,3,3,3,13,13,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,4,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,11,11,11,11,12,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,13,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,3,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,4,13,3,17,13,3,3,13,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,3,4,13,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,5,5,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,5,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,5,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,8,13,13,13,4,11,0,11,11,11,11,11,11,11,11,0,0,0,0,10,11,11,11,11,0,11,5,11,0,11,0,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,3,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,5,5,5,5,5,5,5,5,5,5,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,5,11,11,11,11,11,5,11,11,5,11,11,11,11,11,5,11,5,11,11,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,4,13,3,13,3,11,5,5,5,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,5,0,12,11,11,11,11,11,11,11,11,5,11,5,5,11,5,11,11,12,11,11,5,0,5,5,12,11,11,11,11,11,11,0,5,0,12,0,5,11,11,11,11,11,11,11,5,11,11,11,17,3,3,17,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,12,12,11,12,11,11,11,11,11,11,12,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,5,5,5,5,5,5,5,0,0,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,13,13,13,13,13,4,6,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,18,3,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,12,11,11,11,11,2,18,3,6,13,3,4,2,2,13,13,13,3,2,3,13,3,4,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,3,3,3,3,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,5,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,3,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,8,0,0,0,0,0,5,0,0,10,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,13,4,4,13,13,13,3,13,11,11,11,11,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,17,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,12,12,12,12,3,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,5,5,11,12,11,11,11,11,11,11,11,12,5,12,12,12,12,12,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,11,11,11,11,11,13,13,4,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,4,3,13,13,13,4,3,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,12,5,12,5,11,11,11,11,11,5,12,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,11,12,5,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,0,0,13,3,3,3,4,13,3,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,18,3,3,6,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,5,11,11,11,11,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,5,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["APPLICATION_NAME","App","AppEnvironment","Profiler","PythonSdk","RemoteViewerApp","RerunCli","RustSdk","StartupOptions","Web","__clone_box","analytics","app","app","app_env","app_icon","az","borrow","borrow_mut","build_info","build_info","cast_from","checked_as","checked_cast_from","clone","clone_into","cmd_palette","component_ui_registry","ctrl_c","customize_eframe","deref","deref_mut","downcast","drop","env_vars","eq","equivalent","equivalent","external","fmt","frame_time_history","from","from_recording_source","hardware_tier","icon_status","init","into","latest_memory_purge","latest_queue_interest","log_dbs","lossless_try_into","lossy_into","math","memory_limit","memory_panel","memory_panel_open","misc","native","overflowing_as","overflowing_cast_from","pending_commands","pending_promises","re_ui","re_ui","remote_viewer_app","run_native_app","run_native_viewer_with_messages","rx","saturating_as","saturating_cast_from","server","startup_options","startup_options","state","to_owned","toasts","try_from","try_into","type_id","ui","unwrapped_as","unwrapped_cast_from","upcast","url","viewer_analytics","vzip","wake_up_ui_thread_on_each_msg","wgpu_options","wrapping_as","wrapping_cast_from","llvm_version","llvm_version","rustc_version","rustc_version","App","AppState","EventLog","FILE_SAVER_NOTIF_DURATION","FILE_SAVER_PROMISE","MAX_ZOOM_FACTOR","MIN_ZOOM_FACTOR","PanelSelection","StartupOptions","StepBack","StepForward","TimeControlCommand","TogglePlayPause","Viewport","WATERMARK","__clone_box","__clone_box","__clone_box","about_rerun_ui","analytics","app_options","az","az","az","az","az","blueprint_mut","blueprints","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_info","cache","cast_from","cast_from","cast_from","cast_from","cast_from","check_keyboard_shortcuts","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","cleanup","clear_color","clone","clone","clone","clone_into","clone_into","clone_into","cmd_palette","component_ui_registry","ctrl_c","debug_menu_options_ui","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","event_log_view","file_saver_progress_ui","fmt","frame_time_history","frame_time_label_ui","from","from","from","from","from","from_receiver","get_hash","handle_dropping_files","hash","icon_status","init","init","init","init","init","input_latency_label_ui","into","into","into","into","into","latest_memory_purge","latest_queue_interest","load_file_contents","load_file_path","load_rrd_to_log_db","log_db","log_db_is_nonempty","log_dbs","loop_selection","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","main_view_selector_ui","memory_limit","memory_panel","memory_panel_open","memory_panel_ui","memory_use_label_ui","new_recording_confg","open","options_menu_ui","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","paint_background_fill","paint_native_window_frame","panel_selection","pending_commands","pending_promises","poll_promise","preview_files_being_dropped","profiler","promise_exists","purge_memory_if_needed","re_ui","receive_messages","recording_config_entry","recording_configs","recordings_menu","rerun_menu_button_ui","reset","run_command","run_pending_commands","run_time_control_command","rx","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","save","save","save_buttons_ui","save_database_to_file","selected_app_id","selected_rec_id","selection_panel","serialize","serialize","set_profiler","show","show_log_db","spawn_threaded_promise","startup_options","state","time_panel","to_owned","to_owned","to_owned","toasts","top_bar_ui","top_panel","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","update","vzip","vzip","vzip","vzip","vzip","wait_screen_ui","warning_panel","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","AppIconStatus","NotSetIgnored","NotSetTryAgain","Set","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","eq","equivalent","equivalent","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","setup_app_icon","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","RERUN_TRACK_ALLOCATIONS","eframe","egui","re_renderer","BoundingBox","EVERYTHING","NAN","NOTHING","Rect","ZERO","__clone_box","__clone_box","any_nan","area","aspect_ratio","az","az","borrow","borrow","borrow_mut","borrow_mut","bottom","bottom_mut","bottom_up_range","bounding_sphere_radius","cast_from","cast_from","center","center","center_bottom","center_top","centered_bounding_sphere_radius","checked_as","checked_as","checked_cast_from","checked_cast_from","clamp","clone","clone","clone_into","clone_into","contains","contains","contains_rect","corners","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","distance_sq_to_pos","distance_to_pos","downcast","downcast","drop","drop","ease_out","edges","eq","eq","equivalent","equivalent","everything","everything_above","everything_below","everything_left_of","everything_right_of","expand","expand2","expanded","extend","extend_with","extend_with_x","extend_with_y","fmt","fmt","from","from","from","from_center_size","from_center_size","from_min_max","from_min_max","from_min_size","from_min_size","from_points","from_points","from_two_pos","from_x_y_ranges","half_size","height","init","init","intersect","intersection","intersects","into","into","is_finite","is_finite","is_nan","is_negative","is_nothing","is_point","is_positive","is_something","is_valid_bit_pattern","left","left_bottom","left_center","left_mut","left_top","lerp","line_segment_distance_sq_to_point_2d","line_segment_distance_sq_to_point_3d","line_segment_distance_to_point_3d","lossless_try_into","lossless_try_into","lossy_into","lossy_into","max","max","max","min","min","min","nothing","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","ray_bbox_intersect","ray_closest_t_line_segment","remap","remap_clamp","right","right_bottom","right_center","right_mut","right_top","rotate_bb","rotated_around_origin","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","serialize","set_bottom","set_center","set_height","set_left","set_right","set_top","set_width","shrink","shrink2","signed_distance_to_pos","size","size","square_proportions","to_owned","to_owned","top","top_mut","transform_affine3","transform_conformal3","transform_iso","translate","translated","try_from","try_from","try_into","try_into","type_id","type_id","union","union","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","volume","vzip","vzip","width","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","x_range","y_range","Caches","HoverHighlight","HoveredSpace","InteractionHighlight","Item","ItemCollection","OptionalSpaceViewEntityHighlight","SelectionHighlight","SelectionState","SpaceViewHighlights","SpaceViewOutlineMasks","TransformCache","UnreachableTransform","app_options","caches","clipboard","format_time","help_hover_button","item","mesh_loader","profiler","selection_state","space_info","time_control","time_control_ui","transform_cache","viewer_context","AppOptions","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","default","deref","deref_mut","deserialize","downcast","drop","eq","fmt","from","init","into","lossless_try_into","lossy_into","low_latency","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","show_camera_axes_in_3d","show_metrics","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","warn_latency","wrapping_as","wrapping_cast_from","zoom_factor","Caches","ColoredTensorView","TensorStats","az","az","begin_frame","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","decode","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","from","from","image","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","mesh","mesh_cache","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","purge_memory","range","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","tensor_decode_cache","tensor_image_cache","tensor_stats","tensor_stats","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","MeshCache","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","default","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","CouldNotDecode","DecodeCache","DecodedTensor","InvalidImage","InvalidMetaData","TensorDecodeError","__clone_box","__clone_box","az","az","az","begin_frame","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","fmt","fmt","from","from","from","generation","images","init","init","init","into","into","into","last_use_generation","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","memory_used","memory_used","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","provide","purge_memory","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","tensor","to_owned","to_owned","to_string","try_decode_tensor_if_necessary","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","expected","found","CachedImage","ColoredTensorView","ImageCache","ImageCacheKey","__clone_box","annotation_msg_id","annotations","apply_color_map","az","az","az","az","begin_frame","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_into","cmp","colored_image","colored_image","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","drop","drop","drop","drop","dynamic_img","eq","equivalent","equivalent","fmt","from","from","from","from","from_tensor","generation","get_colormapped_view","get_hash","get_view","hash","hash64","images","init","init","init","init","into","into","into","into","key","last_use_generation","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","memory_used","memory_used","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","purge_memory","retained_image","retained_image","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","tensor","tensor_id","texture_handle","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Clipboard","arboard","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","init_arboard","into","lossless_try_into","lossy_into","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","set_image","set_text","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","with","wrapping_as","wrapping_cast_from","format_time_compact","next_grid_tick_magnitude_ns","ComponentPath","DataBlueprintGroup","InstancePath","Item","ItemCollection","MsgId","SpaceView","__clone_box","__clone_box","are_all_same_kind","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","contains","data_ui","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","first","fmt","fmt","from","from","get_hash","hash","init","init","into","into","into_iter","is_empty","is_valid","items","iter","kind","len","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","purge_invalid","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","serialize","to_owned","to_owned","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","LoadedMesh","az","bbox","bbox","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","load_encoded_mesh","load_raw","load_raw_mesh","lossless_try_into","lossy_into","mesh_instances","name","name","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","PORT","Profiler","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","default","deref","deref_mut","downcast","drop","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","server","start","start_puffin_viewer","start_server","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","HoverHighlight","Hovered","HoveredSpace","InteractionHighlight","None","None","None","OptionalSpaceViewEntityHighlight","SPACEVIEW_OUTLINE_MASK_NONE","Selection","SelectionHighlight","SelectionState","SiblingSelection","SpaceViewEntityHighlight","SpaceViewHighlights","SpaceViewOutlineMasks","ThreeD","TwoD","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__private_field","any_outlines","any_selection_highlight","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clear_current","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","current","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","entity_highlight","entity_outline_mask","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","from","from","from","from","from","from","from","from","from","from","highlight_for_ui_element","highlighted_entity_paths","highlights_for_space_view","history","hover","hovered","hovered_previous_frame","hovered_space","hovered_space_previous_frame","hovered_space_this_frame","hovered_this_frame","index_highlight","index_outline_mask","init","init","init","init","init","init","init","init","init","init","instances","instances","into","into","into","into","into","into","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","max","on_frame_start","outlines_masks","overall","overall","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","select_next","select_previous","selection","selection","selection_ui","serialize","set_hovered","set_hovered_space","set_multi_selection","set_single_selection","to_owned","to_owned","to_owned","to_owned","to_owned","toggle_selection","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","pos","space_2d","space_3d","target_spaces","SpaceInfo","SpaceInfoCollection","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","child_spaces","default","deref","deref","deref_mut","deref_mut","descendants_without_transform","downcast","downcast","drop","drop","from","from","get_first_parent_with_info","init","init","into","into","is_reachable_by_transform","iter","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","parent","path","query_view_coordinates","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","spaces","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","visit_descendants_with_reachable_transform","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","All","Following","Looping","Off","Paused","PlayState","Playing","Selection","TimeControl","TimeState","TimeView","__clone_box","__clone_box","__clone_box","__clone_box","active_loop_selection","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","current_query","default","default_time_line","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","follow_button_ui","following","fps","fps","fps_ui","from","from","from","from","from","full_range","get_hash","get_hash","hash","hash","init","init","init","init","init","into","into","into","into","into","is_time_selected","loop_button_ui","loop_selection","loop_selection","looping","looping","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","max","min","min","move_time","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pause","pause_button_ui","play_button_ui","play_pause_ui","play_state","playback_speed_ui","playing","range","remove_loop_selection","reset_time_view","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","select_a_valid_timeline","serialize","serialize","serialize","serialize","serialize","set_fps","set_loop_selection","set_looping","set_play_state","set_speed","set_time","set_time_view","set_timeline","set_timeline_and_time","speed","speed","states","step_back_time","step_back_time_looped","step_fwd_time","step_fwd_time_looped","step_time_back","step_time_button_ui","step_time_fwd","time","time","time_control_ui","time_i64","time_int","time_spanned","time_type","time_view","timeline","timeline","timeline_selector_ui","to_owned","to_owned","to_owned","to_owned","toggle_play_pause","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","view","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","toggle_playback_text","InversePinholeCameraWithoutResolution","NestedPinholeCameras","TransformCache","UnknownSpaceInfo","UnknownTransform","UnreachableTransform","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","determine_transforms","downcast","downcast","drop","drop","first_unreachable_parent","fmt","from","from","gather_descendants_transforms","init","init","into","into","inverse_transform_at","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","reference_from_entity","reference_from_entity_per_entity","reference_path","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_string","transform_at","try_from","try_from","try_into","try_into","type_id","type_id","unreachable_descendants","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","RecordingConfig","ViewerContext","app_options","az","az","borrow","borrow","borrow_mut","borrow_mut","cache","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","component_path_button_to","component_ui_registry","current_query","cursor_interact_with_selectable","data_blueprint_button_to","data_blueprint_group_button_to","default","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","entity_path_button","entity_path_button_to","from","from","hovered","init","init","instance_path_button","instance_path_button_to","into","into","log_db","lossless_try_into","lossless_try_into","lossy_into","lossy_into","msg_id_button","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","re_ui","rec_cfg","render_ctx","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","select_hovered_on_click","selection","selection_state","selection_state","selection_state_mut","serialize","set_hovered","set_multi_selection","set_single_selection","space_view_button","space_view_button_to","time_button","time_ctrl","timeline_button","timeline_button_to","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","AppCreator","run_native_app","run_native_viewer_with_messages","RemoteViewerApp","app","app_env","az","borrow","borrow_mut","build_info","cast_from","checked_as","checked_cast_from","clear_color","connect","deref","deref_mut","downcast","drop","from","init","into","lossless_try_into","lossy_into","new","overflowing_as","overflowing_cast_from","re_ui","saturating_as","saturating_cast_from","save","set_profiler","startup_options","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","update","url","vzip","wrapping_as","wrapping_cast_from","Annotations","DataBlueprintGroupHandle","DefaultColor","HistoricalSelection","MISSING_ANNOTATIONS","MISSING_ANNOTATIONS","MISSING_ANNOTATIONS","MISSING_ANNOTATIONS","SelectionHistory","ViewCategory","Viewport","annotations","auto_layout","blueprint","data_blueprint","data_ui","event_log_view","memory_panel","scene","selection_history","selection_history_ui","selection_panel","space_view","space_view_entity_picker","space_view_heuristics","time_panel","view_bar_chart","view_category","view_spatial","view_tensor","view_text","view_time_series","viewport","AnnotationMap","Annotations","DefaultColor","EntityPath","MISSING_ANNOTATIONS","MISSING_MSG_ID","OpaqueWhite","ResolvedAnnotationInfo","ResolvedClassDescription","TransparentBlack","__clone_box","__clone_box","__clone_box","__clone_box","__private_field","annotation_info","annotation_info_with_keypoint","auto_color","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","class_description","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color","context","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","find","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","label","load","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","msg_id","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","LayoutSplit","Leaf","LeftRight","LeftRight","SpaceMakeInfo","SplitDirection","TopBottom","TopBottom","__clone_box","aspect_ratio","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","category","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","desired_aspect_ratio","downcast","downcast","downcast","drop","drop","drop","find_group_split_point","fmt","from","from","from","group_by_category","group_by_path_prefix","id","init","init","init","into","into","into","layout_by_category","layout_by_path_prefix","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","path","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","split_groups","split_spaces_at","suggest_split_direction","to_owned","tree_from_space_views","tree_from_split","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","bottom","left","right","t","t","top","Blueprint","az","blueprint_panel","blueprint_panel_and_viewport","blueprint_panel_expanded","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","default","deref","deref_mut","deserialize","downcast","drop","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","reset_button_ui","saturating_as","saturating_cast_from","selection_panel_expanded","serialize","time_panel_expanded","title_bar_ui","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","viewport","vzip","wrapping_as","wrapping_cast_from","DataBlueprintGroup","DataBlueprintGroupHandle","DataBlueprintTree","DataBlueprints","__clone_box","__clone_box","__clone_box","__clone_box","add_entity_to_group","add_group_to_hierarchy_recursively","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","children","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","contains_entity","data","data_blueprints","data_blueprints_individual","data_blueprints_projected","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","display_name","downcast","downcast","downcast","downcast","drop","drop","drop","drop","entities","entity_paths","entity_paths","eq","equivalent","equivalent","fmt","from","from","from","from","from","get_hash","group","group_mut","groups","hash","individual","init","init","init","init","insert_entities_according_to_hierarchy","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","on_frame_start","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent","partial_cmp","path_to_group","path_to_group_name","projected","properties_individual","properties_projected","remove_entity","remove_group","remove_group_if_empty","root_group","root_group_handle","root_handle","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","visit_group_entities_recursively","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","All","DataUi","MaxHeight","Reduced","Small","UiVerbosity","__clone_box","annotation_context","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","component","component_path","component_ui_registry","data","data_ui","deref","deref_mut","downcast","drop","entity_path","fmt","format_component_bundle","from","image","init","instance_path","into","log_msg","lossless_try_into","lossy_into","msg_id","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","TABLE_SCROLL_AREA_HEIGHT","annotation_info_table_ui","EntityComponentWithInstances","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","component_data","component_name","data_ui","deref","deref_mut","downcast","drop","entity_path","from","init","into","lossless_try_into","lossy_into","num_instances","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","ComponentUiCallback","ComponentUiRegistry","add","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","components","default","deref","deref_mut","downcast","drop","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","ui","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","DEFAULT_NUMBER_WIDTH","ZOOMED_IMAGE_TEXEL_RADIUS","format_tensor_shape_single_line","get_pixel","histogram_ui","image_options","show_zoomed_image_region","show_zoomed_image_region_area_outline","show_zoomed_image_region_tooltip","tensor_dtype_and_shape_ui","tensor_dtype_and_shape_ui_grid_contents","write_binary","HIDDEN_COMPONENTS_FOR_ALL_VERBOSITY","HIDDEN_COMPONENTS_FOR_LOW_VERBOSITY","EventLogView","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","default","deref","deref_mut","deserialize","downcast","drop","from","init","into","lossless_try_into","lossy_into","message_table","overflowing_as","overflowing_cast_from","row_height","saturating_as","saturating_cast_from","serialize","table_row","try_from","try_into","type_id","ui","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","MemoryPanel","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","cpu_stats","default","deref","deref_mut","downcast","drop","from","gpu_stats","history","init","into","left_side","lossless_try_into","lossy_into","memory_purge_times","note_memory_purge","overflowing_as","overflowing_cast_from","plot","saturating_as","saturating_cast_from","store_stats","summarize_callstack","tracking_stats","try_from","try_into","type_id","ui","unwrapped_as","unwrapped_cast_from","upcast","update","vzip","wrapping_as","wrapping_cast_from","SceneQuery","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","entity_paths","entity_props_map","from","init","into","iter_entities","latest_at","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","timeline","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","HistoricalSelection","MAX_SELECTION_HISTORY_LENGTH","SelectionHistory","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","control_bar_ui","current","current","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","fmt","fmt","from","from","from","history_item_ui","index","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","next","next_button_ui","on_frame_start","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","prev_button_ui","previous","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","select_next","select_previous","selection","selection_ui","stack","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","update_selection","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","item_collection_to_string","item_kind_ui","item_to_string","SelectionPanel","az","blueprint_ui","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","colormap_props_ui","contents","default","depth_props_ui","deref","deref_mut","deserialize","downcast","drop","entity_props_ui","from","has_data_section","init","into","list_existing_data_blueprints","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","pinhole_props_ui","saturating_as","saturating_cast_from","serialize","show_panel","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","what_is_selected_ui","wrapping_as","wrapping_cast_from","SpaceView","SpaceViewId","ViewState","__clone_box","__clone_box","__clone_box","add_entity_subtree","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","category","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","cmp","data_blueprint","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","display_name","downcast","downcast","downcast","drop","drop","drop","entities_determined_by_user","eq","equivalent","equivalent","fmt","from","from","from","get_hash","hash","id","init","init","init","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","new","on_frame_start","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","random","remove_entity_subtree","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","scene_ui","selected_tensor","selection_ui","serialize","serialize","serialize","space_path","state_bar_chart","state_spatial","state_tensors","state_text","state_time_series","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ui_bar_chart","ui_spatial","ui_tensor","ui_text","ui_time_series","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","view_state","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","CanAddToSpaceView","Compatible","EntityAddInfo","No","SpaceViewEntityPicker","__clone_box","add_entities_line_ui","add_entities_tree_ui","add_entities_ui","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_add","can_add_self_or_descendant","cast_from","cast_from","cast_from","categories","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone_into","create_entity_add_info","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","eq","equivalent","equivalent","from","from","from","init","init","init","into","into","into","is_compatible","is_compatible_and_missing","join","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","space_view_id","title_bar","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ui","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","already_added","reason","all_possible_space_views","contains_any_image","default_created_space_views","default_created_space_views_from_candidates","default_queried_entities","default_queried_entities_by_category","has_any_component_except","is_default_added_to_space_view","is_interesting_space_view_at_root","is_interesting_space_view_not_at_root","TimePanel","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","collapsed_ui","current_time_ui","data_density_graph","data_dentity_graph_painter","default","deref","deref_mut","deserialize","downcast","drop","expanded_ui","from","help_button","init","initialize_time_ranges_ui","interact_with_streams_rect","into","is_time_safe_to_show","lossless_try_into","lossy_into","next_col_right","overflowing_as","overflowing_cast_from","paint_streams_guide_line","paint_ticks","paint_time_cursor","paint_time_ranges_gaps","prev_col_width","saturating_as","saturating_cast_from","serialize","show_children","show_panel","show_tree","time_axis","time_marker_ui","time_ranges_ui","time_ranges_ui","time_selection_ui","top_row_ui","tree_ui","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","view_everything","vzip","wrapping_as","wrapping_cast_from","DENSITIES_PER_UI_PIXEL","DataDensityGraphPainter","DensityGraph","MARGIN_X","add_point","add_range","az","az","begin_frame","borrow","borrow","borrow_mut","borrow_mut","bucket_index_from_x","buckets","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","data_density_graph_ui","default","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","from","from","graph_color","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","make_brighter","max_x","min_x","new","next_max_density","normalize_density","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","paint","previous_max_density","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","show_msg_ids_tooltip","smooth","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","x_from_bucket_index","paint_ticks","paint_time_range_ticks","paint_time_ranges_and_ticks","TimelineAxis","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","collect_candidate_gaps","collect_gaps_with_granularity","create_ranges","deref","deref_mut","downcast","drop","fmt","from","gap_size_heuristic","init","into","lossless_try_into","lossy_into","min","new","overflowing_as","overflowing_cast_from","ranges","saturating_as","saturating_cast_from","sum_time_lengths","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","GAP_EXPANSION_FRACTION","MAX_GAP","Segment","TimeRangesUi","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clamp_time","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","fmt","fmt","from","from","gap_width","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","pan","points_per_time","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","segments","snap_time_control","snap_time_to_segments","tight_time","time","time_from_x_f32","time_from_x_f64","time_range_from_x_range","time_view","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","x","x_from_time","x_from_time_f32","x_range","zoom_at","drag_left_loop_selection_edge","drag_right_loop_selection_edge","format_duration","initial_time_selection","loop_selection_ui","on_drag_loop_selection","paint_range_text","scene","ui","SceneBarChart","az","borrow","borrow_mut","cast_from","charts","checked_as","checked_cast_from","default","deref","deref_mut","downcast","drop","from","init","into","load","load_tensors","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","BarChartState","HELP_TEXT","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","default","deref","deref_mut","deserialize","downcast","drop","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","view_bar_chart","vzip","wrapping_as","wrapping_cast_from","BarChart","Spatial","Tensor","Text","TimeSeries","ViewCategory","ViewCategorySet","__clone_box","az","bitand","bitor","bitxor","borrow","borrow_mut","cast_from","categorize_entity_path","checked_as","checked_cast_from","clone","clone_into","cmp","default","deref","deref_mut","deserialize","downcast","drop","enum_from_u32","enum_into_u32","eq","eq","equivalent","equivalent","fmt","fmt","from","icon","init","into","lossless_try_into","lossy_into","not","overflowing_as","overflowing_cast_from","partial_cmp","saturating_as","saturating_cast_from","serialize","sub","to_owned","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Image","MeshSource","MeshSourceData","SceneSpatial","SpaceCamera3D","SpaceSpecs","SpatialNavigationMode","UiLabel","UiLabelTarget","ViewSpatialState","eye","scene","space_camera_3d","ui","ui_2d","ui_3d","ui_renderer_bridge","view_2d","view_3d","DEFAULT_FOV_Y","Eye","MAX_PITCH","OrbitEye","__clone_box","__clone_box","approx_pixel_world_size_at","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","copy_from_eye","deref","deref","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","drop","drop","eq","far","fmt","fmt","forward_in_world","fov_y","fov_y","from","from","from_camera","fwd","init","init","interact","into","into","is_perspective","keyboard_navigation","lerp","lerp","lossless_try_into","lossless_try_into","lossy_into","lossy_into","near","orbit_center","orbit_radius","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","picking_ray","pitch","pos_in_world","position","project_onto","roll","rotate","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","serialize","set_fwd","set_up","to_eye","to_owned","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","ui_from_world","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","up","upcast","upcast","velocity","vzip","vzip","world_from_view","world_from_view_rot","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","AdditionalPickingInfo","CAMERA_COLOR","Image","Keypoints","Mesh3D","MeshSource","MeshSourceData","PickingRayHit","PickingResult","Point2D","Position3D","Rect","SceneSpatial","SceneSpatialPrimitives","SceneSpatialUiData","StaticGlb","UiLabel","UiLabelTarget","annotation_map","annotations","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","color","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","images","init","init","init","init","init","init","init","instance_path_hash","instance_path_hash","instance_path_hash_if_interactive","into","into","into","into","into","into","into","labeled_instance","labels","load","load_keypoint_connections","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","mesh","mesh_id","meter","new","num_logged_2d_objects","num_logged_3d_objects","outline_mask_ids","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pickable_ui_rects","picking","picking","preferred_navigation_mode","primitives","primitives","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scene_part","space_cameras","target","tensor","text","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ui","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","world_from_mesh","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","AdditionalPickingInfo","GuiOverlay","None","PickingContext","PickingRayHit","PickingResult","PickingState","RAY_T_EPSILON","TexturedRect","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","check_hit","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","closest_opaque_pick","closest_opaque_side_ui_dist_sq","depth_offset","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","from","from","from","from","from","from_instance_and_t","info","init","init","init","init","init","instance_path_hash","into","into","into","into","into","iter_hits","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","max_side_ui_dist_sq","opaque_hit","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","picking","picking_lines","picking_meshes","picking_points","picking_ray","picking_textured_rects","picking_ui_rects","pointer_in_ui","ray_in_world","ray_t","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sort_and_remove_hidden_transparent","space_position","transparent_hits","transparent_hits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ui_from_world","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","AXIS_COLOR_X","AXIS_COLOR_Y","AXIS_COLOR_Z","SceneSpatialPrimitives","add_axis_lines","any_outlines","az","borrow","borrow_mut","bounding_box","bounding_box","cast_from","checked_as","checked_cast_from","depth_clouds","deref","deref_mut","downcast","drop","from","init","into","line_strips","line_strips_outline_only","lossless_try_into","lossy_into","mesh_instances","meshes","new","num_primitives","overflowing_as","overflowing_cast_from","points","recalculate_bounding_box","saturating_as","saturating_cast_from","textured_rectangles","textured_rectangles_ids","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","ScenePart","arrows3d","boxes2d","boxes3d","cameras","images","instance_path_hash_for_picking","lines2d","lines3d","load","meshes","points2d","points3d","Arrows3DPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","process_entity_view","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Boxes2DPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","visit_instance","vzip","wrapping_as","wrapping_cast_from","Boxes3DPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","process_entity_view","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","CamerasPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","determine_view_coordinates","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","visit_instance","vzip","wrapping_as","wrapping_cast_from","ImagesPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","handle_image_layering","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","process_entity_view","process_entity_view_as_depth_cloud","process_entity_view_as_image","push_tensor_texture","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Lines2DPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","process_entity_view","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Lines3DPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","process_entity_view","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","MeshPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","process_entity_view","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Points2DPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","process_entity_view","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Points3DPart","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","load","lossless_try_into","lossy_into","max_labels","overflowing_as","overflowing_cast_from","process_annotations","process_colors","process_entity_view","process_labels","process_radii","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","SpaceCamera3D","__clone_box","az","borrow","borrow_mut","cam_from_world","cast_from","checked_as","checked_cast_from","clone","clone_into","deref","deref_mut","downcast","drop","entity_path","from","from_rub_quat","image_from_world","init","instance_path_hash","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","picture_plane_distance","pinhole","position","project_onto_2d","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unproject_as_ray","unwrapped_as","unwrapped_cast_from","upcast","view_coordinates","vzip","world_from_cam","world_from_camera","world_from_image","world_from_rub_view","wrapping_as","wrapping_cast_from","Auto","AutoSizeUnit","SpatialNavigationMode","ThreeD","TwoD","UiPoints","ViewSpatialState","World","__clone_box","__clone_box","__clone_box","auto_size_config","auto_size_config","auto_size_world_heuristic","axis_name","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","create_labels","default","default","default_line_radius","default_point_radius","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","downcast","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","from","from","from","help_text","init","init","init","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","nav_mode","outline_config","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","scene_bbox","scene_bbox_accum","scene_num_primitives","selection_ui","serialize","serialize","size_ui","state_2d","state_3d","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","update_depth_cloud_property_heuristics","update_object_property_heuristics","update_pinhole_property_heuristics","view_spatial","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Auto","HELP_TEXT_2D","Scaled","View2DState","ZoomState2D","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","capture_scroll","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","deserialize","desired_size_and_offset","downcast","downcast","drop","drop","from","from","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","project_onto_other_spaces","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","setup_target_config","show_projections_from_3d_space","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","update","view_2d","view_2d_scrollable","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","zoom","accepting_scroll","center","scale","EyeInterpolation","HELP_TEXT_3D","SpaceSpecs","View3DState","__clone_box","__clone_box","__clone_box","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","camera_before_tracked_camera","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default_eye","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","downcast","downcast","downcast","drop","drop","drop","elapsed_time","eye_interpolation","find_camera","from","from","from","from_view_coordinates","hovered_point","init","init","init","interpolate_to_eye","interpolate_to_orbit_eye","into","into","into","last_eye_interact_time","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","orbit_eye","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","paint_view","project_onto_other_spaces","reset_camera","right","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","show_axes","show_projections_from_2d_space","space_camera","space_specs","spin","start","target_eye","target_orbit","target_time","target_time","to_owned","to_owned","to_owned","tracked_camera","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","up","upcast","upcast","upcast","update_eye","view_3d","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ClearColor","GenericSkybox","ScreenBackground","ViewBuilderHandle","ViewBuilderMap","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone_into","cmp","create_and_fill_view_builder","create_scene_paint_callback","data","default","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","eq","equivalent","equivalent","fmt","from","from","from","get_hash","get_viewport","hash","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","partial_cmp","renderer_paint_callback","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","dimension_mapping_ui","scene","tensor_dimension_mapper","ui","SceneTensor","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","default","deref","deref_mut","downcast","drop","from","init","into","load","load_tensor_entity","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","tensors","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","DragDropAddress","Height","NewSelector","None","Selector","Width","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","deref","deref_mut","dimension_mapping_ui","downcast","drag_source_ui","drag_source_ui_id","drop","drop_target_ui","eq","equivalent","equivalent","from","init","into","is_some","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","read_from_address","saturating_as","saturating_cast_from","tensor_dimension_ui","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","write_to_address","ColorMap","ColorMapping","Fill","Greyscale","Original","TextureScaling","TextureSettings","Turbo","ViewTensorState","Virdis","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","color_from_normalized","color_mapping","create","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","dimension_mapping","dimension_name","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","gamma","image_ui","init","init","init","init","init","into","into","into","into","into","into_image","keep_aspect_ratio","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","map","options","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","paint_axis_names","paint_image","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scaling","selected_tensor_slice","selector_values","selectors_ui","serialize","serialize","serialize","serialize","serialize","slice_ui","tensor","tensor_ui","texture_settings","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ui","ui","ui","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","view_tensor","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","scene","ui","SceneText","TextEntry","__clone_box","az","az","body","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone_into","color","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","entity_path","fmt","from","from","init","init","into","into","level","load","lossless_try_into","lossless_try_into","lossy_into","lossy_into","msg_id","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","text_entries","time","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","ViewTextFilters","ViewTextState","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","calc_row_height","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","col_entity_path","col_log_level","col_timelines","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","drop","drop","filters","fmt","from","from","get_time_point","init","init","into","into","is_entity_path_visible","is_log_level_visible","latest_time","level_to_rich_text","lossless_try_into","lossless_try_into","lossy_into","lossy_into","monospace","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","row_entity_paths","row_log_levels","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","selection_ui","serialize","serialize","table_ui","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","update","view_text","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","scene","ui","Continuous","PlotPoint","PlotPointAttrs","PlotSeries","PlotSeriesKind","Scatter","SceneTimeSeries","__clone_box","__clone_box","__clone_box","__clone_box","add_line_segments","annotation_map","attrs","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color","color","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","kind","label","label","lines","load","load_scalars","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","points","radius","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scattered","time","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","value","vzip","vzip","vzip","vzip","vzip","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","HELP_TEXT","ViewTimeSeriesState","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","default","deref","deref_mut","deserialize","downcast","drop","format_time","from","init","into","lossless_try_into","lossy_into","ns_grid_spacer","overflowing_as","overflowing_cast_from","round_ns_to_start_of_day","saturating_as","saturating_cast_from","serialize","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","view_time_series","vzip","wrapping_as","wrapping_cast_from","MAX_ELEM_FOR_DEFAULT_OPEN","TabViewer","Viewport","VisibilitySet","add_new_spaceview_button_ui","add_space_view","az","az","blueprint_row_with_buttons","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","ctx","data_blueprint_tree_ui","default","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","focus_tab","from","from","has_been_user_edited","help_text_ui","init","init","into","into","is_tree_valid","lossless_try_into","lossless_try_into","lossy_into","lossy_into","mark_user_interaction","maximized","new","on_frame_start","on_tab_button","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","remove","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","serialize","should_auto_add_space_view","show_add_remove_entities_window","space_view","space_view_entity_window","space_view_entry_ui","space_view_mut","space_view_options_ui","space_view_ui","space_views","space_views","space_views_containing_entity_path","title","tree_ui","trees","try_from","try_from","try_into","try_into","type_id","type_id","ui","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","viewport_ui","visibility_button_ui","visible","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","ViewerAnalytics","analytics","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","deregister","downcast","drop","from","init","into","lossless_try_into","lossy_into","new","on_open_recording","on_viewer_started","overflowing_as","overflowing_cast_from","record","register","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from"],"q":["re_viewer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::AppEnvironment","","","","re_viewer::appre_viewer::app_icon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::env_vars","re_viewer::external","","","re_viewer::mathre_viewer::misc","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::app_options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::caches","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::caches::mesh_cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::caches::tensor_decode_cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::caches::tensor_decode_cache::TensorDecodeError","","re_viewer::misc::caches::tensor_image_cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::clipboard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::format_time","","re_viewer::misc::item","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::mesh_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::profiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::selection_statere_viewer::misc::selection_state::HoveredSpace","","","","re_viewer::misc::space_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::time_controlre_viewer::misc::time_control_ui","re_viewer::misc::transform_cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::misc::viewer_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::native","","","re_viewer::remote_viewer_app","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::annotations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::auto_layout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::auto_layout::SplitDirection","","","","","","re_viewer::ui::blueprint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::data_blueprint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::data_ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::data_ui::annotation_context","","re_viewer::ui::data_ui::component","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::data_ui::component_ui_registry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::data_ui::data","re_viewer::ui::data_ui::image","","","","","","","","","","","re_viewer::ui::data_ui::instance_path","","re_viewer::ui::event_log_view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::memory_panel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::scene","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::selection_history","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::selection_history_ui","","","re_viewer::ui::selection_panel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::space_view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::space_view_entity_picker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::space_view_entity_picker::CanAddToSpaceView","","re_viewer::ui::space_view_heuristics","","","","","","","","","","re_viewer::ui::time_panel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::time_panel::data_density_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::time_panel::paint_ticks","","","re_viewer::ui::time_panel::time_axis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::time_panel::time_ranges_ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::time_panel::time_selection_ui","","","","","","","re_viewer::ui::view_bar_chart","","re_viewer::ui::view_bar_chart::scene","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_bar_chart::ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_category","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::eye","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scenere_viewer::ui::view_spatial::scene::pickingre_viewer::ui::view_spatial::scene::primitives","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::arrows3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::boxes2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::boxes3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::cameras","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::images","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::lines2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::lines3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::meshes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::points2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::scene::scene_part::points3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::space_camera_3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::ui_2d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::ui_2d::ZoomState2D","","","re_viewer::ui::view_spatial::ui_3d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_spatial::ui_renderer_bridge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_tensor","","","","re_viewer::ui::view_tensor::scene","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_tensor::tensor_dimension_mapper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_tensor::ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_text","","re_viewer::ui::view_text::scene","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_text::ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::view_time_series","","re_viewer::ui::view_time_series::scenere_viewer::ui::view_time_series::ui","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::ui::viewport","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_viewer::viewer_analytics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The Rerun viewer as an <code>eframe</code> application.","Where is this App running in?","Wraps a connection to a <code>puffin</code> viewer.","Created from the Rerun Python SDK.","Connects to a server over WebSockets.","Running the Rust <code>rerun</code> binary from the CLI.","Created from the Rerun Rust SDK.","Settings set once at startup (e.g. via command-line …","We are a web-viewer running in a browser as Wasm.","","","","","","","","","","","","","","","","","","","Set to <code>true</code> on Ctrl-C.","","","","","","","","","","","","Measures how long a frame takes to paint","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","Where the logs are stored.","","","","","","","","","","","Commands to run at the end of the frame.","Pending background tasks, using <code>poll_promise</code>.","","","","","","","","","","","","What is serialized","","Toast notifications, using <code>egui-notify</code>.","","","","","","","","The url of the remote server.","All telemetry analytics collected by the Rerun Viewer are …","","This wakes up the ui thread each time we receive a new …","","","","","","","","The Rerun viewer as an <code>eframe</code> application.","","","","","","","","Settings set once at startup (e.g. via command-line …","","","","","","","","","","","","Global options for the whole viewer.","","","","","","","","","","","","","","","","","","","Things that need caching.","","","","","","","","","","","","","","","","","","","","","","","","","","","Set to <code>true</code> on Ctrl-C.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Measures how long a frame takes to paint","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a viewer that receives new log messages over time","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Do we have an open <code>LogDb</code> that is non-empty?","Where the logs are stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Which view panel is currently being shown","Commands to run at the end of the frame.","Pending background tasks, using <code>poll_promise</code>.","Polls the promise with the given name.","","","Returns whether a promise with the given name is currently …","","","","","Configuration for the current recording (found in <code>LogDb</code>).","","","Reset the viewer to how it looked the first time you ran …","","","","","","","","","","","","","","","","","","Returns a closure that, when run, will save the contents …","","","","","","","","","Creates a promise with the specified name that will run <code>f</code> …","","What is serialized","","","","","Toast notifications, using <code>egui-notify</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","In which state the app icon is (as far as we know).","We did not set it or failed to do it. In any case we won’…","We haven’t set the icon yet, we should try again next …","We successfully set the icon and it should be visible now.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Sets app icon at runtime.","","","","","","","","","","Enable allocation tracking (very slow - use it to find …","","","","A 3-dimensional axis-aligned bounding box","Infinite rectangle that contains every point.","An invalid <code>Rect</code> filled with <code>f32::NAN</code>;","The inverse of <code>Self::EVERYTHING</code>: stretches from positive …","A rectangular region of space.","A <code>BoundingBox</code> that only contains <code>Vec3::ZERO</code>.","","","True if any member is NaN.","","Width / height","","","","","","","<code>max.y</code>","<code>max.y</code>","","The minimum radius of a sphere, centered at the origin, …","","","Returns the center point of the bounding box.","","","","The minimum radius of a sphere, centered at the bounding …","","","","","Return the given points clamped to be inside the rectangle …","","","","","Returns <code>true</code> if the point is within (or on the edge of) …","","","The eight corners of this bounding box.","","","","","","","","The distance from the rect to the position, squared.","The distance from the rect to the position.","","","","","","The twelve edges of this bounding box.","","","","","A <code>BoundingBox</code> that contains every point.","A <code>Rect</code> that contains every point above a certain y …","A <code>Rect</code> that contains every point below a certain y …","A <code>Rect</code> that contains every point to the left of the given …","A <code>Rect</code> that contains every point to the right of the given …","Expand by this much in each direction, keeping the center","Expand by this much in each direction, keeping the center","Expand with this much padding on each side.","Enlarge the box to include this point.","","Expand to include the given x coordinate","Expand to include the given y coordinate","","","Returns the argument unchanged.","Returns the argument unchanged.","","Create a bounding box from a center position and a size.","","Create a bounding box from a minimum and maximum position.","","","left-top corner plus a size (stretching right-down).","Create a bounding box from an iterator of points that the …","Bounding-box around the points.","Returns the bounding rectangle of the two points.","","Returns half the size (similar to a radius).","","","","The intersection of two <code>Rect</code>, i.e. the area covered by …","Returns the smallest volume that is covered by both <code>self</code> …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if, and only if, all elements are finite.","True if all members are also finite.","Returns <code>true</code> if any elements are <code>NaN</code>.","<code>width &lt; 0 || height &lt; 0</code>","True if and only if there is no point for which …","True if this box contains exactly one point.","<code>width &gt; 0 &amp;&amp; height &gt; 0</code>","True if and only if there is at least one point for which …","","<code>min.x</code>","","","<code>min.x</code>","","Linearly interpolate so that <code>[0, 0]</code> is <code>Self::min</code> and <code>[1, 1]</code>…","","","","","","","","","Bounding box maximum (inclusive).","The other corner, opposing <code>Self::min</code>. Usually the right …","","Bounding box minimum (inclusive).","One of the corners of the rectangle, usually the left top …","A <code>BoundingBox</code> that contains no points.","","","","","Returns the distance the ray traveled of the first …","Compute the distance between a ray and a line segment.","Linearly remap a value from one range to another, so that …","Like <code>remap</code>, but also clamps the value so that the returned …","<code>max.x</code>","","","<code>max.x</code>","","Rotate the bounds (will expand the <code>Rect</code>)","Return a bounding box that contains this box after it has …","","","","","","","<code>max.y</code>","Keep size","keep min","<code>min.x</code>","<code>max.x</code>","<code>min.y</code>","keep min","Shrink by this much in each direction, keeping the center","Shrink by this much in each direction, keeping the center","Signed distance to the edge of the box.","Returns the 3D axis size of the bounding box.","","<code>[2, 1]</code> for wide screen, and <code>[1, 2]</code> for portrait, etc. At …","","","<code>min.y</code>","<code>min.y</code>","Return a bounding box that contains this box after it has …","Return a bounding box that contains this box after it has …","Return a bounding box that contains this box after it has …","","Translate (move) the box by this much.","","","","","","","","The union of two bounding rectangle, i.e. the minimum <code>Rect</code> …","","","","","","","Only correct for positively sized boxes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Global options for the viewer.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Show milliseconds, RAM usage, etc.","","","","","","","","","","","Zoom factor, independent of OS points_per_pixel setting.","Does memoization of different things for the immediate …","","","","","Call once per frame to potentially flush the cache(s).","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","For displaying images efficiently in immediate mode.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","For displaying meshes efficiently in immediate mode.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","A cache of decoded <code>Tensor</code> entities, indexed by <code>TensorId</code>.","","","","","","","","","","Call once per frame to (potentially) flush the cache.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Which <code>DecodeCache::generation</code> was this <code>Tensor</code> last used?","","","","","","","Total memory used by this <code>Tensor</code>.","","","","","","","","","Attempt to free up memory.","","","","","","","Cached <code>Result</code> from decoding the <code>Tensor</code>","","","","Decode a <code>Tensor</code> if necessary and cache the result.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>ColoredTensorView</code> is a wrapper on top of <code>Tensor</code>","","","","","Annotations used to create the view","","","","","","Call once per frame to (potentially) flush the cache.","","","","","","","","","","","","","","","","","","","","","","","","Image with annotations applied and converted to Srgb","For uploading to GPU","","","","","","","","","","","","","","","","","","Try to get a <code>DynamicImage</code> for the the cached <code>Tensor</code>.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Key used to retrieve this cached view","When <code>ImageCache::generation</code> was we last used?","","","","","","","","","Total memory used by this image.","","","","","","","","","","","Attempt to free up memory.","","","","","","","","","","","Borrowed tensor from the data store","","Try to get a <code>GpuTexture2DHandle</code> for the cached <code>Tensor</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Handles interfacing with the OS clipboard.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Get access to the thread-local <code>Clipboard</code>.","","","Useful when showing dates/times on a timeline and you want …","When showing grid-lines representing time.","","","","One “thing” in the UI.","An ordered collection of <code>Item</code>.","","","","","","","","","","","","","","","","","","","","","","Returns true if the exact selection is part of the current …","","","","","","","","","","","","","","","","","","","The first selected object if any.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","If <code>false</code>, the selection is referring to data that is no …","","","","Number of elements in this multiselection","","","","","","","","","","Remove all invalid selections.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Wraps a connection to a <code>puffin</code> viewer.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Hover highlight, sorted from weakest to strongest.","Apply hover highlight, does <em>not</em> exclude a selection …","","Combination of selection &amp; hover highlight which can occur …","","No selection highlight at all.","No hover highlight.","","","Should apply selection highlight (i.e. the exact selection …","Selection highlight, sorted from weakest to strongest.","Selection and hover state","A closely related object is selected, should apply similar …","Highlights of a specific entity path in a specific space …","Highlights in a specific space view.","","Hovering in a 3D space.","Hovering in a 2D space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the current selection out.","","","","","","","","","","","","","Returns the current selection.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","History of selections (what was selected previously).","","Returns the currently hovered objects.","What objects are hovered? Read from this.","","What space is the pointer hovering over? Read from this.","What space is the pointer hovering over? Write to this.","What objects are hovered? Write to this.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Picks the stronger selection &amp; hover highlight from two …","Called at the start of each frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Selections the next element in the history if any.","Selects the previous element in the history if any.","","Currently selected things; shown in the …","","","Set the hovered objects. Will be in <code>Self::hovered</code> on the …","","Sets several objects to be selected, updating history as …","Sets a single selection, updating history as needed.","","","","","","Select currently hovered objects unless already selected …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Where in this 2D space (+ depth)?","","The 3D space with the camera(s)","2D spaces and pixel coordinates (with Z=depth)","Information about one “space”.","Information about all spaces.","","","","","","","","","","","","","Nearest descendants to whom we are not connected with an …","","","","","","All paths in this space (including self and children …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Answers if an entity path (<code>from</code>) is reachable via a …","","","","","","","Do a graph analysis of the transform hierarchy, and create …","","","","","Nearest ancestor to whom we are not connected via an …","","","","","","","","","","","","","","","","","","","","Invokes visitor for <code>self</code> and all descendants that are …","","","","","","","We are looping the entire recording.","Follow the latest available data","","Looping is off.","Time doesn’t move","","Time move steadily","We are looping within the current loop selection.","Controls the global view and progress of the time.","State per timeline.","The time range we are currently zoomed in on.","","","","","The current loop range, iff selection looping is turned on.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Query for latest value at the currently selected time on …","","Pick the timeline that should be the default, prioritizing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If true, we are in “follow” mode (see …","playback fps","Frames Per Second, when playing sequences (they are often …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The full range of times for the current timeline","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the current time in the selection range (if any), or at …","","The selected slice of time that is called the “loop …","Selected time range, if any.","","","","","","","","","","","","","","","Where start of the the range.","Update the current time","","","","","","","","","","","","","","","","","","If true, we are either in <code>PlayState::Playing</code> or …","","Remove the current loop selection.","The range of time we are currently zoomed in on.","","","","","","","","","","","Make sure the selected timeline is a valid one","","","","","","playback fps","Set the current loop selection without enabling looping.","","","playback speed","","The range of time we are currently zoomed in on.","","","playback speed","","","","","","","","","","The current time.","The current time (play marker).","","The current time.","The current time.","How much time the full view covers.","The time type of the currently selected timeline","The range of time we are currently zoomed in on.","The currently selected timeline","Name of the timeline (e.g. “log_time”).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The time range we are currently zoomed in on.","","","","","","","","","","","","","","","","","Exiting out of a space with a pinhole camera that doesn’…","More than one pinhole camera between this and the …","Provides transforms from an entity to a chosen reference …","<code>super::space_info::SpaceInfoCollection</code> is outdated and can…","Unknown transform between this and the reference space.","","","","","","","","","","","","","","","","","","","","","","","","Determines transforms for all entities relative to a space …","","","","","The first parent of reference_path that is no longer …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Retrieves the transform of on entity from its local system …","All reachable entities.","All transforms provided are relative to this reference …","","","","","","","","","","","","","","","All unreachable descendant paths of <code>reference_path</code>.","","","","","","","","","","","","","UI config for the current recording (found in <code>LogDb</code>).","Common things needed by many parts of the viewer.","Global options for the whole viewer.","","","","","","","Things that need caching.","","","","","","","Show a component path and make it selectable.","How to display components","The current time query, based on the current time control.","","","","","","","","","","","","","","Show an entity path and make it selectable.","Show an entity path and make it selectable.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the currently hovered objects.","","","Show an instance id and make it selectable.","Show an instance id and make it selectable.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The current recording","","","","","Show an <code>MsgId</code> and make it selectable","","","","","The look and feel of the UI","UI config for the current recording (found in <code>LogDb</code>).","","","","","","Selects (or toggles selection if modifier is clicked) …","Returns the current selection.","","Selection &amp; hovering state.","","","Set the hovered objects. Will be in <code>Self::hovered</code> on the …","Sets several objects to be selected, updating history as …","Sets a single selection, updating history as needed.","","","","The current time of the time panel, how fast it is moving, …","","","","","","","","","","","","","","","","","","","","","","","","Connects to a server over WebSockets.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","url to rerun server","","","","","","","","","","","","","","","","The url of the remote server.","","","","","","","","","","","","","","","","Code for automatic layout of space views.","","","The <code>DataUi</code> trait and implementations provide methods for …","","","","","","","","","","","","","","","","","The viewport panel.","","","","","","","","","","","","","","","","","Merges class annotation info with keypoint annotation info …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","For each <code>EntityPath</code> in the <code>SceneQuery</code>, walk up the tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Desired aspect ratio, if any.","","","","","","","","","","","","","","","","","","","","","","","","","","","","If we need to pick only one aspect ratio for all these …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Group categories together, i.e. so that 2D stuff is next …","Put spaces with common path prefix close together.","","","","","","","","","","","","","Some path we use to group the views by","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines the layout of the whole Viewer (or will, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","A grouping of several data-blueprints.","","Tree of all data blueprint groups for a single space view.","Data blueprints for all entity paths in a space view.","","","","","Adds an entity path to a group.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns mutable individual entity properties, the …","Returns entity properties with the hierarchy applied.","","","","","","","","","","","","","","","","","","","","","","","","","","Direct child entities of this blueprint group.","List of all entities that we query via this data blueprint …","List of all entities that we query via this data blueprint …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Resolves a data blueprint group handle.","Resolves a data blueprint group handle.","All data blueprint groups.","","Individual settings. Mutate this.","","","","","Adds a list of entity paths to the tree, using grouping as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Should be called on frame start.","","","","","","","","","Parent of this blueprint group. Every data blueprint …","","Mapping from entity paths to blueprints.","","Properties, as inherited from parent. Read from this.","Individual settings. Mutate &amp; display this.","Properties, as inherited from parent. Read from this.","Removes an entity from the data blueprint collection.","Removes a group and all its entities and subgroups from …","","Returns the root data blueprint.","Root group, always exists as a placeholder","Returns a handle to the root data blueprint.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls the visitor function on every entity path in the …","","","","","","","","","","","","","Display everything, as large as you want. Used for …","Types implementing <code>DataUi</code> can draw themselves with a …","At most this height","Display a reduced set, used for hovering.","Keep it small enough to fit on one row.","Controls how mich space we use to show the data in <code>DataUi</code>.","","","","","","","","","","","","","","","If you need to lookup something in the data store, use the …","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","All the values of a specific <code>re_log_types::ComponentPath</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","How to display components in a Ui","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Show a ui for this instance of this component.","","","","","","","Default number of ui points to show a number.","","","","","","<code>meter</code>: iff this is a depth map, how long is one meter?","","","","","","","","An event log, a table of all log messages.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","Note that we purged memory at this time, to show in stats.","","","","","","","","","","","","","","","","Call once per frame","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Iter over all of the currently visible <code>EntityPath</code>s in the …","","","","","","","","","","","","","","","","","","A <code>Selection</code> and its index into the historical stack.","","A stack of <code>Selection</code>s, used to implement “undo/redo”…","","","","","","","","","","","","","","","","","","","","","Index into <code>Self::stack</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Oldest first.","","","","","","","","","","","","","","","","","","","","","","","","","The “Selection View” side-bar.","","What is the blueprint stuff for this item?","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","What is selected? Not the contents, just the short id of …","","","A view of a space.","A unique id for each space view.","Camera position and similar.","","","","Adds a subtree of entities to the blueprint tree and …","","","","","","","","","","","","","We only show data that match this category.","","","","","","","","","","","","","","The data blueprint tree, has blueprint settings for all …","","","","","","","","","","","","","","","","","","True if the user is expected to add entities themselves. …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Removes a subtree of entities from the blueprint tree.","","","","","","","","Selects in <code>Self::state_tensors</code>.","","","","","The “anchor point” of this space view. The transform …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Describes if an entity path can be added to a space view.","","","","Window for adding/removing entities from a space view.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Can be generally added but space view might already have …","Can be added and spaceview doesn’t have it already.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List out all space views we allow the user to create.","","List out all space views we generate by default for the …","","List of entities a space view queries by default for a …","List of entities a space view queries by default for all …","","Whether an entity should be added to a space view at a …","","","A panel that shows entity names to the left, time on the …","","","","","","","","","Show the data density over time for a data stream.","","","","","","","","","Returns the argument unchanged.","","","","Returns a scroll delta","Calls <code>U::from(self)</code>.","A user can drag the time slider to between the timeless …","","","The right side of the entity name column; updated during …","","","Painted behind the data density graph.","","","Visually separate the different time segments","Width of the entity name columns previous frame.","","","","","","","","A vertical line that shows the current time.","egui uses <code>f32</code> precision for all screen-space ui …","The time axis view, regenerated each frame.","","","","","","","","","","Find a nice view of everything.","","","","Higher = slower, but more accurate.","Persistent data for painting the data density graph.","","We need some margin because of the blurring.","","","","","","","","","","We return a float so user can interpolate between buckets.","Number of datapoints per bucket. 0 == min_x, n-1 == max_x.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","The maximum density we’ve seen so far this frame.","Return something in the 0-1 range.","","","","","","The maximum density of the previous frame. This is what we …","","","","","","","Blur the input slightly.","","","","","","","","","","","","","","","","","","","","","","","A piece-wise linear view of a single timeline.","","","","","","","","","","","","Collapse any gaps larger or equals to the given threshold.","","","","","","Returns the argument unchanged.","First determine the threshold for when a gap should be …","","Calls <code>U::from(self)</code>.","","","","","","","","","","Total uncollapsed time.","","","","","","","","","","","How much of the gap use up to expand segments visually to …","The ideal gap between time segments.","","Represents a compressed view of time.","","","","","","","","","","","","","Clamp the time to the valid ranges.","Safe, meaningless default","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Sze of the gap between time segments.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Pan the view, returning the new view.","x distance per time unit inside the segments, and …","","","","","The linear segments.","","Make sure the time is not between segments.","Does NOT match any of the above. Instead this is a tight …","Matches <code>Self::x</code> (linear transform).","","","","The range of time we are viewing.","","","","","","","","","","","","","","","","","","","The range on the x-axis in the ui, in screen coordinates.","","","The total UI x-range we are viewing.","Zoom the view around the given x, returning the new view.","","","Human-readable description of a duration","","","","","","","A bar chart scene, with everything needed to render it.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Bar-chart plots made from 1D tensor data","2D or 3D view","High-dimensional tensor view","Text log view (text over time)","Time series plot (scalar over time)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An eye in a 3D view.","","Note: we use “eye” so we don’t confuse this with …","","","The approximate size of pixels in world coordinates at a …","","","","","","","","","","","","","","","","","Create an <code>OrbitEye</code> from a <code>Eye</code>.","","","","","","","","","","","","","","","","If no angle is present, this is an orthographic camera.","","Returns the argument unchanged.","Returns the argument unchanged.","","Direction we are looking at","","","Returns <code>true</code> if any change","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Listen to WSAD and QE to move the eye.","","","","","","","","","","","","","","Picking ray for a given pointer in the parent space (i.e. …","Only valid if we have an up vector.","","","e.g. up is <code>[0,0,1]</code>, we return things like <code>[x,y,0]</code>","Rotate around forward axis","Rotate based on a certain number of pixel delta.","","","","","","","","","","","","Translate based on a certain number of pixel delta.","","","","","","","","","","","","Zero = no up (3dof rotation)","","","For controlling the eye with WSAD in a smooth way.","","","","","","","","","","","","","","TODO(andreas): Scene should only care about converted …","","","","Labels a given point (in scene coordinates)","A point in space.","Labels a given rect (in scene coordinates)","","","Data necessary to setup the ui <code>SceneSpatial</code> but of no …","Static meshes that are embedded in the player","","","","A thing that provides additional semantic context for your …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Images are a special case of rects where we’re storing …","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","What is hovered if this label is hovered.","","Loads all 3D objects into the scene according to the given …","","","","","","","","","","","","","","","","","","If this is a depth map, how long is a meter?","","Number of 2d primitives logged, used for heuristics.","Number of 3d primitives logged, used for heuristics.","","","","","","","","","","","","","","","","Picking any any of these rects cause the referred instance …","","","Heuristic whether the default way of looking at this scene …","","","","","","","","","","","","","","","","","Responsible for populating <code>SceneSpatialPrimitives</code> and …","All space cameras in this scene. TODO(andreas): Does this …","The shape/position being labeled.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","We hit a egui ui element, meaning that depth information …","No additional picking information.","","","","","","The hit was a textured rect at the given uv coordinates …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Any additional information about the picking hit.","","","","","","What entity or instance got hit by the picking ray.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterates over all hits from far to close.","","","","","","","","","","","","Picking ray hit for an opaque object (if any).","","","","","","","","","","","","","","","The picking ray used. Given in the coordinates of the …","","","","","Where along the picking ray the hit occurred.","","","","","","","","","","","","The space position of a given hit.","Picking ray hits for transparent objects, sorted from far …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Primitives sent off to <code>re_renderer</code>. (Some meta information …","","","","","","bounding box covering the rendered scene","Estimated bounding box of all data in scene coordinates. …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Number of primitives. Rather arbitrary what counts as a …","","","","","","","","","","","","","","","","","","","","","","","","Computes the instance hash that should be used for picking …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Build scene parts for a single box instance","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Determine the view coordinates (i.e.) the axis semantics.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","If the number of points in the batch is &gt; max_labels, don…","","","","","","","","","","","","","","","","","","","A logged camera that connects spaces.","","","","","","","","","","","","","","","Path to the entity which has the projection (pinhole, …","Returns the argument unchanged.","","Projects world coordinates onto 2D image coordinates","","The instance that has the projection.","Calls <code>U::from(self)</code>.","","","","","Optional distance of a picture plane from the camera.","The projection transform of a child-entity.","Where in scene-space is the camera origin?","Returns x, y, and depth in image coordinates.","","","","","","","Unproject a 2D image coordinate as a ray in 3D space","","","","The coordinate system of the camera (“view-space”).","","","Camera “Extrinsics”, i.e. the pose of the camera.","Projects image coordinates into world coordinates","Scene-space from Rerun view-space (RUB).","","","","","Describes how the scene is navigated, determining if it is …","","","","","","","","","","Size of automatically sized objects. None if it wasn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","How the scene is navigated.","","","","","","","","","","","","","","Estimated bounding box of all data for the last scene …","Estimated bounding box of all data. Accumulated over every …","Estimated number of primitives last frame. Used to inform …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sub-state specific to the Zoom/Scale/Pan engine","","","","","","","","","Take the offset from the <code>ScrollArea</code> and apply it back to …","","","","","","","","","","","","","","","","","","Determine the optimal sub-region and size based on the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update our zoom state based on response If nothing else …","Create the outer 2D view, which consists of a scrollable …","Create the real 2D view inside the scrollable area","","","","","","","The zoom and pan state, which is either a zoom/center or …","Whether to allow the state to be updated by the current …","Which scene coordinate will be at the center of the zoomed …","Number of ui points per scene unit","","","","","","","","","","","","","","","","","Camera pose just before we took over another camera via …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Where in world space the mouse is hovering (from previous …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Filled in at the start of each frame","","","","","","","","","","Currently tracked camera.","","","","","","","","","","","","","","","","","","","","","TODO(andreas): Split into smaller parts, more re-use with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tensor scene, with everything needed to render it.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Loads all tensors into the scene according to the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","How we map values to colors.","Scale the texture for the largest possible fit in the UI …","","No scaling, texture size will match the tensor’s …","Should we scale the rendered texture, and if so, how?","Scaling, filtering, aspect ratio, etc for the rendered …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How we map values to colors.","","","","","","","","","","","","","","","","","","","","How we select which dimensions to project the tensor onto.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Should the aspect ratio of the tensor be kept when scaling?","","","","","","","","","","","","Specifies the sampling filter used to render the texture.","","","","","","","","","","","","","","","","","","","","","","","Should we scale the texture when rendering?","","Selected value of every dimension (iff they are in …","","","","","","","","Last viewed tensor, copied each frame. Used for the …","","Scaling, filtering, aspect ratio, etc for the rendered …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A text scene, with everything needed to render it.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Loads all text components into the scene according to the …","","","","","","","","","","","","","","","<code>None</code> for timeless data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Keeps track of the latest time selection made by the user.","","","","","","","","","","","","","","","","","","","","<code>scroll_to_row</code> indicates how far down we want to scroll in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A scene for a time series plot, with everything needed to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Loads all plots into the scene according to the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Describes the layout and contents of the Viewport Panel.","What views are visible?","","","","","Show a single button (<code>add_content</code>), justified, and show a …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Set to <code>true</code> the first time the user messes around with the …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Show one tab as maximized?","Create a default suggested blueprint using some heuristics.","","","","","","","","","","","","","","","","","","","Shown in the right of the tab panel","","","Where the space views are stored.","","","Show the blueprint panel tree view.","The layouts of all the space views.","","","","","","","","","","","","","","","","Which views are visible.","","","","","","","","","","","","","","","","","Deregister a property.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","When we have loaded the start of a new recording.","When the viewer is first started","","","","Register a property that will be included in all …","","","","","","","","","","",""],"i":[0,0,0,0,3,0,3,3,0,3,3,26,0,153,153,0,3,3,3,26,153,3,3,3,3,3,26,26,26,0,3,3,3,3,0,3,3,3,0,3,26,3,3,0,26,3,3,26,26,26,3,3,0,16,26,26,0,0,3,3,26,26,26,153,0,0,0,26,3,3,52,26,153,26,3,26,3,3,3,0,3,3,3,153,0,3,0,0,3,3,297,298,297,298,0,0,30,0,0,0,0,0,0,29,29,0,29,30,0,29,16,30,0,26,31,26,29,16,30,31,26,31,26,29,16,30,31,26,29,16,30,31,26,31,26,29,16,30,31,26,26,29,16,30,31,26,29,16,30,31,26,26,29,16,30,29,16,30,26,26,26,0,16,30,31,26,29,16,30,31,26,29,16,30,31,30,31,26,29,16,30,31,26,29,16,30,31,29,30,29,29,30,30,31,0,29,26,0,26,29,16,30,31,26,29,26,29,26,26,29,16,30,31,0,26,29,16,30,31,26,26,0,0,0,26,26,26,26,26,29,16,30,31,26,29,16,30,31,0,16,26,26,26,0,0,0,0,26,29,16,30,31,26,29,16,30,31,0,0,31,26,26,26,0,31,26,26,26,26,0,31,0,0,26,26,26,26,26,26,29,16,30,31,26,29,16,30,31,0,26,0,0,26,31,31,30,31,26,31,26,26,26,26,31,29,16,30,26,0,0,26,29,16,30,31,26,29,16,30,31,26,29,16,30,31,26,29,16,30,31,26,29,16,30,31,26,29,16,30,31,26,26,29,16,30,31,0,0,26,29,16,30,31,26,29,16,30,31,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,57,57,57,57,57,57,57,57,57,0,0,0,0,0,58,58,58,0,61,61,58,58,58,58,61,58,61,58,61,58,58,58,58,61,61,58,61,58,58,58,61,61,58,61,58,58,61,58,61,58,61,58,58,61,61,61,58,61,58,61,58,58,58,61,58,61,58,0,61,61,58,58,58,61,58,58,58,58,58,58,61,61,58,58,58,61,58,61,58,58,61,58,61,58,61,58,61,58,58,58,61,58,61,58,58,61,58,61,58,61,58,61,58,61,61,58,61,58,58,58,58,58,58,58,0,0,0,61,58,61,58,0,61,58,0,61,58,61,61,58,61,58,0,0,0,0,58,58,58,58,58,58,61,61,58,61,58,61,58,58,58,58,58,58,58,58,58,58,58,61,58,58,61,58,58,58,61,61,61,58,61,61,58,61,58,61,58,61,58,61,58,61,58,61,58,61,61,58,58,61,58,61,58,58,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,77,75,75,77,75,77,75,77,75,77,75,77,75,75,75,77,75,77,75,77,75,77,75,77,75,75,77,75,77,75,77,75,77,75,75,0,77,77,75,77,75,75,77,77,75,77,75,0,0,75,75,77,75,77,75,77,75,77,75,77,75,77,75,77,75,77,75,77,75,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,83,0,0,83,83,0,83,84,83,84,82,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,83,83,83,84,82,82,82,83,84,82,83,84,82,84,83,84,82,83,84,82,84,82,83,84,82,83,84,82,83,82,83,84,82,83,84,82,84,83,84,83,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,299,299,0,0,0,0,88,88,90,0,90,92,88,87,87,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,88,88,88,90,92,87,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,90,88,88,88,88,90,92,88,87,92,87,87,88,87,88,88,87,90,92,88,87,90,92,88,87,90,92,90,92,88,87,90,92,88,87,92,87,90,92,88,87,90,92,88,87,88,87,90,92,90,92,88,87,90,92,88,87,90,88,90,88,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,90,92,88,87,0,95,95,95,95,95,95,95,95,95,95,95,95,95,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,0,99,99,99,0,0,99,99,99,98,98,99,98,99,98,99,98,99,98,99,98,99,98,99,98,99,98,98,99,98,99,98,99,98,99,98,99,98,99,98,99,98,99,99,98,98,98,99,98,99,98,99,99,99,98,99,98,98,98,99,98,98,99,98,99,98,99,98,98,99,98,99,98,98,99,98,99,98,99,98,99,98,98,99,98,99,98,99,98,99,98,99,98,99,98,99,98,99,98,99,98,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,0,111,0,0,109,110,111,0,0,110,0,0,110,0,0,0,109,109,109,110,111,112,113,116,107,115,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,108,109,110,111,112,113,109,110,111,112,113,110,111,108,109,110,111,112,114,115,107,108,109,110,111,112,114,113,115,116,116,107,108,109,110,111,112,114,113,115,116,107,108,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,107,107,109,110,111,112,110,110,111,111,112,112,109,109,110,111,112,114,113,115,116,107,108,108,107,108,108,112,108,108,108,108,108,108,113,115,109,110,111,112,114,113,115,116,107,108,114,115,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,112,108,107,114,115,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,110,111,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,108,108,112,108,108,108,108,108,108,108,109,110,111,112,113,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,109,110,111,112,114,113,115,116,107,108,300,300,301,301,0,0,125,123,125,123,125,123,125,123,125,123,125,123,125,123,125,123,125,123,125,125,123,125,123,125,123,123,125,123,125,123,123,123,125,123,125,123,125,123,125,123,125,123,125,125,0,125,123,125,123,123,125,123,125,123,125,123,125,123,125,123,125,123,125,125,123,125,123,125,123,133,134,0,133,134,0,134,133,0,0,0,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,131,132,133,134,129,129,0,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,133,134,133,133,134,134,131,132,133,134,129,129,129,132,129,131,132,133,134,129,129,133,134,133,134,131,132,133,134,129,131,132,133,134,129,129,129,129,132,129,129,131,132,133,134,129,131,132,133,134,129,0,0,131,129,132,131,132,133,134,129,131,132,133,134,129,129,129,129,129,129,129,129,0,129,129,131,132,133,134,129,131,132,133,134,129,129,131,132,133,134,129,129,129,129,129,129,129,129,129,129,129,129,129,0,0,0,0,129,129,129,129,132,129,129,129,131,129,129,129,129,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,132,131,132,133,134,129,131,132,133,134,129,131,132,133,134,129,0,126,126,0,126,126,0,142,126,142,126,142,126,142,126,142,126,142,126,142,126,142,126,142,126,142,126,142,126,142,142,126,142,126,142,126,142,126,142,142,126,142,126,0,142,126,142,126,142,126,142,126,142,142,142,142,126,142,126,142,126,126,0,142,126,142,126,142,126,142,142,126,142,126,142,126,142,126,142,126,142,126,0,0,100,100,42,100,42,100,42,100,100,42,100,42,100,42,100,100,100,100,100,100,42,100,42,100,42,42,100,42,100,42,100,100,100,42,100,100,42,100,100,100,42,100,100,42,100,42,100,100,42,100,42,100,100,100,100,42,100,42,100,100,100,42,100,42,100,100,100,100,100,100,42,100,100,100,42,100,42,100,42,100,42,100,42,100,42,100,42,100,42,100,42,0,0,0,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,161,0,0,161,0,0,161,159,161,155,162,163,154,154,0,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,159,159,161,155,162,159,161,155,162,155,159,162,154,159,161,155,162,163,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,162,159,162,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,155,162,154,159,161,155,162,163,154,159,161,155,162,163,159,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,159,161,155,162,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,154,159,161,155,162,163,0,166,166,167,0,0,166,167,165,165,166,167,165,166,167,165,166,167,165,166,167,165,165,166,167,165,166,167,165,165,165,166,167,165,166,167,165,0,166,167,165,166,167,165,0,165,166,167,165,0,0,165,166,167,165,166,167,165,0,0,166,167,165,166,167,165,166,167,165,166,167,165,165,166,167,165,166,167,165,0,0,0,165,0,0,166,167,165,166,167,165,166,167,165,166,167,165,166,167,165,166,167,165,166,167,165,166,167,165,166,167,165,302,303,303,303,302,302,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,148,171,172,170,170,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,171,148,171,172,170,148,171,172,170,148,170,148,170,170,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,171,148,171,172,170,148,171,172,170,171,170,170,148,148,148,148,148,148,171,172,170,148,170,170,170,148,172,148,171,172,170,170,148,171,172,170,148,171,172,170,148,171,172,170,170,148,171,172,170,148,171,172,170,171,148,170,0,172,171,171,170,170,170,170,170,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,148,171,172,170,170,148,171,172,170,148,171,172,170,148,171,172,170,101,0,101,101,101,0,101,0,101,101,101,101,101,101,101,101,0,0,0,0,304,101,101,101,101,0,101,0,101,0,101,0,101,0,101,101,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,0,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,0,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,0,180,180,0,180,180,180,0,180,180,180,180,180,180,180,180,180,180,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,183,183,183,183,183,183,183,183,183,183,183,183,0,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,0,0,0,122,185,122,185,122,185,122,185,122,185,122,185,122,185,122,185,122,185,185,185,185,185,122,185,122,185,122,185,122,185,122,185,122,122,185,185,122,122,185,122,185,122,185,122,185,185,185,185,122,185,122,185,185,185,122,185,122,185,185,185,122,185,185,122,185,122,185,122,185,122,185,122,185,122,185,122,185,185,122,185,122,185,122,185,0,0,0,0,187,0,187,187,187,187,187,0,187,187,0,187,187,187,187,187,0,187,0,187,187,0,187,187,187,187,0,187,187,187,187,187,187,187,187,187,187,187,0,187,187,0,0,0,118,151,188,151,118,151,188,118,151,188,118,151,188,118,151,188,151,118,151,188,118,151,188,118,151,188,118,151,188,118,151,188,118,151,188,118,151,188,118,151,188,151,118,151,188,118,151,188,151,118,118,118,118,118,151,188,118,118,151,118,151,188,118,151,188,118,151,188,118,151,188,151,151,118,151,188,118,151,188,118,118,151,118,151,188,118,151,188,151,188,151,118,151,188,151,188,188,188,188,188,118,151,188,118,151,188,118,151,188,118,151,188,188,188,188,188,188,118,151,188,118,151,188,118,151,188,151,118,151,188,118,151,188,118,151,188,0,194,0,194,0,194,0,0,0,196,194,195,196,194,195,196,194,195,195,195,196,194,195,195,196,194,195,196,194,195,194,194,0,194,195,196,194,195,196,194,195,196,194,195,196,194,195,194,194,194,196,194,195,196,194,195,196,194,195,194,194,194,196,194,195,196,194,195,196,194,195,196,194,195,196,194,195,196,194,195,196,0,194,196,194,195,196,194,195,196,194,195,196,196,194,195,196,194,195,196,194,195,196,194,195,196,194,195,196,194,195,305,306,0,0,0,0,0,0,0,0,0,0,0,200,200,200,200,200,200,200,0,0,200,200,200,200,200,200,200,200,200,0,200,0,0,200,0,200,200,200,200,200,0,0,0,0,200,200,200,200,200,200,200,0,0,0,200,0,0,200,200,200,200,200,200,200,0,200,200,200,0,0,0,0,206,206,206,207,207,206,207,206,207,206,206,206,207,206,207,206,207,0,207,206,207,206,207,207,206,207,206,207,206,207,0,206,207,206,207,206,207,206,207,0,206,206,206,207,207,206,207,206,207,206,207,206,207,206,207,207,0,0,206,207,206,207,206,207,206,207,206,207,206,207,206,207,206,207,206,207,206,0,0,0,0,205,205,205,205,205,205,205,205,205,0,0,0,205,205,205,205,205,205,0,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0,0,0,0,212,201,212,201,212,201,212,201,212,201,212,201,201,201,212,201,212,201,212,201,212,201,212,201,212,201,0,212,201,212,201,212,201,212,201,201,212,201,212,201,201,201,212,201,212,201,201,201,201,212,212,201,201,201,201,212,201,212,201,212,201,212,201,212,201,212,201,212,201,212,201,212,201,212,201,201,201,201,0,0,0,0,0,0,0,0,0,0,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,0,0,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,0,215,215,215,152,152,152,152,152,0,0,152,152,152,152,152,152,152,152,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,0,219,0,218,219,218,218,219,218,219,218,219,218,219,218,219,218,219,218,219,218,219,219,218,219,218,219,218,219,218,219,218,219,218,218,218,219,218,218,219,218,219,218,219,218,219,219,218,219,218,219,218,219,218,219,218,219,218,219,219,218,219,218,219,218,219,218,219,0,219,219,218,219,218,219,218,219,219,219,219,218,219,219,218,219,218,219,218,219,218,218,219,218,219,219,218,219,219,218,219,218,219,218,219,218,219,0,190,0,0,79,0,0,0,0,307,307,307,0,0,0,79,0,0,190,308,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,310,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,221,79,309,308,307,310,190,221,309,308,0,79,309,308,307,310,190,221,310,221,190,190,79,309,308,307,310,190,221,79,309,308,307,310,190,221,309,79,308,190,190,190,309,79,309,308,307,310,190,221,79,309,308,307,310,190,221,221,0,190,190,0,190,79,309,308,307,310,190,221,79,309,308,307,310,190,221,0,190,310,308,310,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,190,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,79,309,308,307,310,190,221,309,79,309,308,307,310,190,221,79,309,308,307,310,190,221,0,311,311,0,0,0,0,0,311,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,226,311,227,224,229,226,311,227,224,229,226,226,226,227,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,227,227,311,227,224,229,226,227,311,227,224,229,226,224,311,227,224,229,226,311,227,224,229,226,229,224,311,227,224,229,226,311,227,224,229,226,0,0,0,0,224,0,0,229,229,227,311,227,224,229,226,311,227,224,229,226,226,224,224,226,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,229,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,311,227,224,229,226,0,0,0,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,0,0,0,0,0,0,0,0,0,312,0,0,0,0,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,0,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,0,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,0,242,242,242,242,242,242,242,242,0,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,0,244,244,244,244,244,244,244,244,244,244,244,0,244,244,244,244,244,244,244,244,244,244,0,244,244,244,244,244,244,244,244,244,244,244,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,0,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,0,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,0,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,0,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,0,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,0,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,253,0,0,225,225,253,0,253,225,253,251,251,251,251,0,225,253,251,225,253,251,225,253,251,225,253,251,225,253,251,225,253,251,225,253,251,225,253,251,0,225,251,251,251,225,253,251,225,253,251,225,251,225,253,251,225,253,251,225,253,225,225,253,253,225,253,251,251,225,253,251,225,253,251,225,253,251,225,253,251,251,0,225,253,251,225,253,251,225,253,251,225,253,251,251,251,251,251,225,251,0,251,251,225,253,251,225,253,251,225,253,251,225,253,251,225,253,251,225,253,251,225,253,251,251,251,251,251,225,253,251,225,253,251,225,253,251,258,0,258,0,0,257,258,257,258,257,258,257,258,257,257,258,257,258,257,258,257,258,257,258,257,258,257,258,257,258,257,257,257,258,257,258,257,258,257,258,257,258,257,258,257,258,257,258,257,258,0,257,258,257,258,257,0,0,257,258,257,258,257,258,257,258,257,258,257,258,257,258,257,0,0,257,258,257,258,257,258,257,313,313,313,0,0,0,0,260,261,262,260,261,262,260,261,262,260,261,262,260,260,261,262,260,261,262,260,261,262,260,261,262,260,261,262,260,262,0,260,261,262,260,261,262,260,260,261,262,260,261,262,261,260,0,260,261,262,262,260,260,261,262,260,260,260,261,262,260,260,261,262,260,261,262,260,260,261,262,260,261,262,0,0,260,262,260,261,262,260,261,262,260,260,0,260,260,260,261,261,261,261,261,260,261,262,260,260,261,262,260,261,262,260,261,262,260,261,262,260,261,262,262,260,261,262,260,0,260,261,262,260,261,262,260,261,262,264,264,0,0,0,263,264,263,264,263,264,263,264,263,264,263,264,263,263,263,263,0,0,263,263,264,263,264,263,263,264,263,264,263,263,263,263,263,264,263,263,263,0,263,264,263,264,263,264,263,264,263,264,263,264,263,263,0,264,263,264,263,263,263,264,263,264,263,264,263,264,263,264,263,264,263,264,263,264,263,264,263,0,0,0,0,0,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,0,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,0,268,0,0,268,0,268,268,268,268,268,268,268,268,268,268,268,268,268,268,0,268,268,268,268,268,268,268,268,268,268,268,0,0,274,272,274,0,0,272,0,272,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,273,271,271,273,274,275,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,271,0,271,272,273,274,275,271,272,273,274,275,272,274,275,272,272,271,272,272,273,274,274,275,271,272,273,274,275,273,0,271,272,273,274,275,271,272,273,274,275,0,275,271,272,273,274,275,271,272,273,274,275,273,275,271,272,273,274,275,271,272,273,274,275,0,275,271,272,273,274,275,271,272,273,274,275,275,0,271,0,271,272,273,274,275,0,271,0,271,271,272,273,274,275,272,274,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,271,273,275,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,0,271,272,273,274,275,271,272,273,274,275,271,272,273,274,275,0,0,0,0,280,280,192,280,280,192,280,192,280,192,280,192,280,192,280,280,280,192,280,192,280,192,280,192,280,192,280,280,280,192,280,192,280,192,280,192,280,192,280,192,280,280,192,280,192,280,192,280,192,192,280,280,280,192,280,192,280,192,280,192,280,192,280,192,280,192,280,192,280,192,0,0,282,281,282,281,282,281,282,281,0,282,281,282,281,282,281,282,281,282,281,281,281,281,282,281,282,281,282,281,282,281,282,281,282,281,282,281,282,281,0,282,281,282,281,281,281,282,0,282,281,282,281,282,282,281,282,281,281,281,282,281,282,281,282,282,281,0,282,281,282,281,282,281,282,281,282,281,282,281,282,281,281,0,282,281,282,281,282,281,0,0,287,0,0,0,0,287,0,286,285,287,288,193,193,285,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,286,285,287,288,286,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,286,286,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,288,286,288,193,193,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,288,286,286,285,287,288,193,286,285,287,288,193,286,285,286,285,287,288,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,286,285,287,288,193,285,286,285,287,288,193,288,286,285,287,288,193,286,285,287,288,193,0,0,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,0,289,289,289,289,289,0,289,289,0,289,289,289,289,289,289,289,289,289,289,0,289,289,289,292,0,0,0,292,292,293,292,0,293,292,293,292,293,292,293,292,293,292,293,292,292,293,292,293,292,292,293,292,293,292,0,293,292,292,0,293,292,293,292,0,293,292,293,292,292,292,292,292,293,293,292,293,292,292,293,292,293,292,292,292,292,292,292,292,292,0,0,293,292,292,293,292,292,293,292,293,292,293,292,293,293,292,293,292,293,292,292,0,292,293,292,293,292,293,292,0,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294],"f":[0,0,0,0,0,0,0,0,0,0,[1],0,0,0,0,0,[[]],[[]],[[]],0,0,[[]],[[],2],[[],2],[3,3],[[]],0,0,0,[4,5],[6],[6],[[]],[6],0,[[3,3],7],[[],7],[[],7],0,[[3,8],9],0,[[]],[10,3],[[],11],0,[[],6],[[]],0,0,0,[[],2],[[]],0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,[[[13,[12]]],14],[[15,3,16,[18,[17]]],14],0,[[]],[[]],0,0,0,0,[[]],0,[[],19],[[],19],[[],20],0,[[]],[[]],[[],2],0,0,[[]],[[[22,[21]],23],[[22,[21]]]],[[],24],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[25,15]],0,0,[[]],[[]],[[]],[[]],[[]],[26,27],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[26,23]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[26],[[26,28]],[29,29],[16,16],[30,30],[[]],[[]],[[]],0,0,0,[25],[[],16],[[],30],[[],31],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[],[[19,[30]]]],[[],[[19,[31]]]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[[29,29],7],[[30,30],7],[[],7],[[],7],[[],7],[[],7],0,[[23,26]],[[29,8],9],0,[[25,26]],[[]],[[]],[[]],[[]],[[]],[[15,3,16,5,[2,[32]],[22,[17]]],26],[[],33],[[26,23]],[29],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[25,26]],[[]],[[]],[[]],[[]],[[]],0,0,[[34,35],[[2,[36]]]],[37,[[2,[36]]]],[35,[[38,[36]]]],[26,36],[26,7],0,[26,2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[25,26]],0,0,0,[[26,25,39,40]],[[25,39]],[[41,36],42],[26],[[25,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25],[23],0,0,0,[[26,[44,[34]]],[[2,[45]]]],[23],0,[[26,[44,[34]]],7],[26],0,[[26,23]],[[46,47,41,36],42],0,[[25,26]],[[25,48,26]],[[26,23]],[[26,49,48,23]],[[26,23,48]],[[26,29]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,2]],[[26,32]],[[25,26]],[[36,50,2],12],[26,51],0,0,[30,19],[31,19],[[26,52]],[[31,25,53,36,5,54,41]],[[26,36]],[[26,[56,[55]]],38],0,0,0,[[]],[[]],[[]],0,[[25,48,26,39]],[[25,48,26,39]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[26,23,48]],[[]],[[]],[[]],[[]],[[]],[[25,22]],[[5,25,48]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[57,57],7],[[],7],[[],7],[[]],[[],6],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[],57],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[1],[1],[58,7],[58,59],[58,59],[[]],[[]],[[]],[[]],[[]],[[]],[58,59],[58,59],[58,[[60,[59]]]],[61,59],[[]],[[]],[61,62],[58,63],[58,63],[58,63],[61,59],[[],2],[[],2],[[],2],[[],2],[[58,63],63],[61,61],[58,58],[[]],[[]],[[61,62],7],[[58,63],7],[[58,58],7],[61],[[],61],[6],[6],[6],[6],[[],[[19,[61]]]],[[],[[19,[58]]]],[[58,63],59],[[58,63],59],[[]],[[]],[6],[6],[59,59],[61],[[61,61],7],[[58,58],7],[[],7],[[],7],[[],61],[59,58],[59,58],[59,58],[59,58],[[58,59],58],[[58,64],58],[[61,62],61],[[61,62]],[[58,63]],[[58,59]],[[58,59]],[[61,8],[[19,[65]]]],[[58,8],[[19,[65]]]],[[]],[[]],[[],58],[[62,62],61],[[63,64],58],[[62,62],61],[[63,63],58],[[62,62],61],[[63,64],58],[66,61],[[],58],[[63,63],58],[[[60,[59]],[60,[59]]],58],[61,62],[58,59],[[],6],[[],6],[[58,58],58],[[61,61],61],[[58,58],7],[[]],[[]],[61,7],[58,7],[61,7],[58,7],[61,7],[61,7],[58,7],[61,7],[[],7],[58,59],[58,63],[58,63],[58,59],[58,63],[[58,64],63],[67,59],[62,59],[62,59],[[],2],[[],2],[[]],[[]],[[59,59],59],0,0,[[59,59],59],0,0,[[],61],[[]],[[]],[[]],[[]],[[68,61],59],[68,59],[[60,60]],[[60,60]],[58,59],[58,63],[58,63],[58,59],[58,63],[[58,69],58],[[61,70],61],[[]],[[]],[[]],[[]],[61,19],[58,19],[[58,59]],[[58,63]],[[58,59]],[[58,59]],[[58,59]],[[58,59]],[[58,59]],[[58,59],58],[[58,64],58],[[58,63],59],[61,62],[58,64],[58,64],[[]],[[]],[58,59],[58,59],[[61,71],61],[[61,72],61],[[61,73],61],[[58,64],58],[[61,62],61],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[61,61],61],[[58,58],58],[[]],[[]],[[]],[[]],[[],2],[[],2],[61,59],[[]],[[]],[58,59],[[]],[[]],[[]],[[]],[58,[[60,[59]]]],[58,[[60,[59]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[25,74],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],43],[6],[6],[[],[[19,[43]]]],[[]],[6],[[43,43],7],[[43,8],9],[[]],[[],6],[[]],[[],2],[[]],0,[[]],[[]],[[]],[[]],[43,19],0,0,[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],0,[[]],[[]],0,0,0,0,[[]],[[]],[75],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],0,[[],75],[6],[6],[6],[6],[[]],[[]],[6],[6],[[]],[[]],0,[[],6],[[],6],[[]],[[]],[[],2],[[],2],[[]],[[]],0,0,[76,77],[[]],[[]],[[]],[[]],[75],0,[[]],[[]],[[]],[[]],0,0,[[75,76],77],0,[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],78],[6],[6],[[]],[6],[[]],[[],6],[[]],[[78,34,79,53],[[2,[[81,[80]]]]]],[[],2],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[82,33]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[83,83],[84,84],[[]],[[]],[[],82],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[6],[6],[6],[[83,8],9],[[83,8],9],[[]],[[]],[[]],0,0,[[],6],[[],6],[[],6],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[85],[82],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],55],[[82,76],[[19,[76,83]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[1],0,0,[[76,81],[[38,[86]]]],[[]],[[]],[[]],[[]],[[87,33]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[88,88],[[]],[[88,88],89],0,0,[[],87],[6],[6],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[90,[[2,[91]]]],[[88,88],7],[[],7],[[],7],[[88,8],9],[[]],[[]],[[]],[[]],[[34,76,81],92],0,[[87,76,81],90],[[],33],[[87,76],90],[88],[88,33],0,[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],0,0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[88,88],[[2,[89]]]],[87],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[90,53],[[2,[93]]]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[],[[2,[94]]]],[[]],[[],2],[[]],[[],95],[[]],[[]],[[]],[[]],[95],[[95,55]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[12],[[]],[[]],[96,55],[97,97],0,0,0,0,0,0,0,[1],[1],[98,[[2,[34]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[99,99],[98,98],[[]],[[]],[[98,99],7],[[99,100,25,101,102]],[[],98],[6],[6],[6],[6],[[],[[19,[99]]]],[[],[[19,[98]]]],[[]],[[]],[6],[6],[[99,99],7],[[98,98],7],[[],7],[[],7],[[],7],[[],7],[98,[[2,[99]]]],[[99,8],9],[[98,8],9],[[]],[[]],[[],33],[99],[[],6],[[],6],[[]],[[]],[98,66],[98,7],[[99,36,27],7],0,[98,66],[99,34],[98,6],[[],2],[[],2],[[]],[[]],[66,98],[[]],[[]],[[]],[[]],[[98,36,27]],[[]],[[]],[[]],[[]],[99,19],[98,19],[[]],[[]],[98,[[18,[99]]]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[80,61],0,[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[55,103,53],[[38,[80]]]],[[55,104,53],[[38,[80]]]],[[55,105,53],[[38,[80]]]],[[55,106,53],[[38,[80]]]],[[],2],[[]],0,[80,34],0,[[]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],52],[6],[6],[[]],[6],[[]],[[],6],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],0,[52],[[]],[52],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],0,[107,7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[108],[109,109],[110,110],[111,111],[112,112],[113,113],[[]],[[]],[[]],[[]],[[]],[[110,110],89],[[111,111],89],[108,98],[[],109],[[],110],[[],111],[[],112],[[],114],[[],115],[[],107],[[],108],[6],[6],[6],[6],[6],[6],[6],[116,115],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[],[[19,[108]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[107,117],113],[[107,117],115],[[109,109],7],[[110,110],7],[[111,111],7],[[112,112],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[109,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[108,99],111],0,[[108,118,119],107],0,0,[108,98],0,[108,109],0,0,0,[[113,120],112],[[115,120],121],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[112,112],112],[[108,36,27]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[110,110],[[2,[89]]]],[[111,111],[[2,[89]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,[[2,[122]]]],[108,[[2,[122]]]],0,0,[[108,5,25,27],[[2,[98]]]],[108,19],[[108,66]],[[108,109]],[[108,66],98],[[108,99],98],[[]],[[]],[[]],[[]],[[]],[[108,[18,[99]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],0,[[],123],[6],[6],[6],[6],0,[[]],[[]],[6],[6],[[]],[[]],[[123,124],125],[[],6],[[],6],[[]],[[]],[[123,124,124],[[19,[126]]]],[123,66],[[],2],[[],2],[[]],[[]],[124,125],[127,123],[[]],[[]],[[]],[[]],0,0,[[127,124,102],[[2,[128]]]],[[]],[[]],[[]],[[]],0,[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[125,123]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[129,[[2,[130]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[131,131],[132,132],[133,133],[134,134],[[]],[[]],[[]],[[]],[129,102],[[],129],[66,[[2,[135]]]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[],[[19,[131]]]],[[],[[19,[132]]]],[[],[[19,[133]]]],[[],[[19,[134]]]],[[],[[19,[129]]]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[[133,133],7],[[134,134],7],[[],7],[[],7],[[],7],[[],7],[[131,8],9],[[132,8],9],[[133,8],9],[[134,8],9],[[129,5,25,136]],0,[129,[[2,[59]]]],0,[[129,25]],[[]],[[]],[[]],[[]],[[]],[[129,136],[[2,[137]]]],[[],33],[[],33],[133],[134],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[129,135,138],7],[[129,5,25]],[129,[[2,[130]]]],0,[129,133],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[139,138],[139,138],0,[[129,23,136]],[[[56,[140]]],132],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[129],[[129,5,25]],[[129,5,25,136]],[[129,5,136,25]],[129,134],[[129,25]],0,[139,137],[129],[129],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[129,136]],[131,19],[132,19],[133,19],[134,19],[129,19],[[129,59]],[[129,130]],[[129,133]],[[129,136,134]],[[129,59]],[[129,[56,[140]]]],[[129,131]],[[129,135]],[[129,135,[56,[140]]]],[129,59],0,0,[[140,139],138],[[140,139,130],140],[[140,139],138],[[140,139,130],140],[[129,136]],[[129,5,25,136]],[[129,136]],[129,[[2,[140]]]],0,[[129,5,136,25]],[129,[[2,[97]]]],[129,[[2,[138]]]],0,[129,141],[129,[[2,[131]]]],[129,135],0,[[129,136,25]],[[]],[[]],[[]],[[]],[[129,136]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,55],0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[142,142],[126,126],[[]],[[]],[6],[6],[6],[6],[[127,129,124,143],142],[[]],[[]],[6],[6],0,[[126,8],9],[[]],[[]],[[142,144,127,102,143,145,7]],[[],6],[[],6],[[]],[[]],[[124,127,102,7],[[19,[[2,[145]],126]]]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[142,124],[[2,[145]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],55],[[124,127,143,102,7],[[19,[[2,[145]],126]]]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[100,25,[56,[146]],147],74],0,[100,102],[[100,74,99],74],[[100,25,[56,[146]],118,124],74],[[100,25,[56,[146]],118,148],74],[[],42],[6],[6],[6],[6],[[],[[19,[42]]]],[[]],[[]],[6],[6],[[100,25,[2,[118]],124],74],[[100,25,[2,[118]],124,[56,[146]]],74],[[]],[[]],[100,98],[[],6],[[],6],[[100,25,[2,[118]],149],74],[[100,25,[2,[118]],149,[56,[146]]],74],[[]],[[]],0,[[],2],[[],2],[[]],[[]],[[100,25,150],74],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[100,74]],[100,98],[100,108],0,[100,108],[42,19],[[100,66]],[[100,66],98],[[100,99],98],[[100,25,151],74],[[100,25,[56,[146]],118,152],74],[[100,25,135,138],74],0,[[100,25,135],74],[[100,25,[56,[146]],135],74],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[13,[12]]],14],[[15,3,16,[18,[17]]],14],0,0,0,[[]],[[]],[[]],0,[[]],[[],2],[[],2],[[153,28]],[[153,[2,[32]]]],[6],[6],[[]],[6],[[]],[[],6],[[]],[[],2],[[]],[[15,3,16,5,[2,[32]],55],153],[[]],[[]],0,[[]],[[]],[[153,32]],[[153,52]],0,[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[153,23,48]],0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],0,[154,155],[[154,156],155],[157,158],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[159,[2,[160]]],154],[159,159],[161,161],[155,155],[162,162],[[]],[[]],[[]],[[]],[[155,2,161],158],0,[[],162],[6],[6],[6],[6],[6],[163,81],[6],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[6],[[162,[56,[124]]],[[81,[159]]]],[[159,8],9],[[162,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[155,[2,[55]]],[[2,[55]]]],[[162,100,164]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[165,165],[[]],[6],[6],[6],[6],[6],[6],[[],[[2,[59]]]],[[]],[[]],[[]],[6],[6],[6],[[[18,[[18,[165]]]]]],[[165,8],9],[[]],[[]],[[]],[[],[[18,[[18,[165]]]]]],[[],[[18,[[18,[165]]]]]],0,[[],6],[[],6],[[],6],[[]],[[]],[[]],[64,166],[64,166],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[64,[18,[[18,[165]]]]],166],[[64,6],166],[[64,6],167],[[]],[[64,139,119],[[168,[118]]]],[[168,169,166]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[27,100,25,123]],[[27,100,25]],0,[[]],[[]],[[]],[[],2],[[],2],[[],27],[6],[6],[[],[[19,[27]]]],[[]],[6],[[]],[[],6],[[]],[[],2],[[]],[[]],[[]],[[27,100,25,123]],[[]],[[]],0,[27,19],0,[[27,100,25,123]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],0,[[]],[[]],[[]],0,0,0,0,[1],[1],[1],[1],[[170,148,124]],[[170,148,124,124]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,[148,148],[171,171],[172,172],[170,170],[[]],[[]],[[]],[[]],[[148,148],89],[[170,124],7],[148,173],0,[170,143],[170,143],[[],148],[[],171],[[],172],[[],170],[6],[6],[6],[6],[6],[6],[6],[6],[[],[[19,[148]]]],[[],[[19,[171]]]],[[],[[19,[172]]]],[[],[[19,[170]]]],0,[[]],[[]],[[]],[[]],[6],[6],[6],[6],0,[170,174],0,[[148,148],7],[[],7],[[],7],[[148,8],9],[173,148],[[]],[[]],[[]],[[]],[[],33],[[170,148],[[2,[171]]]],[[170,148],[[2,[171]]]],0,[148],0,[[],6],[[],6],[[],6],[[],6],[[170,66,124]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[170],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[148,148],[[2,[89]]]],0,[124,55],0,0,0,[[170,124]],[[170,148]],[[170,148]],[170,171],0,[170,148],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[148,19],[171,19],[172,19],[170,19],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[170,148]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[1],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[101,101],[[]],0,0,0,0,[[100,25,101,102]],[6],[6],[[]],[6],0,[[101,8],9],[175,55],[[]],0,[[],6],0,[[]],0,[[],2],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[25,66]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],0,[176,177],[[176,100,25,101,102]],[6],[6],[[]],[6],0,[[]],[[],6],[[]],[[],2],[[]],[176,6],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,[54],[[]],[[]],[[]],[[]],[[],2],[[],2],0,[[],54],[6],[6],[[]],[6],[[]],[[],6],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[54,100,25,101,102,178,120]],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,[[],55],[86,[[2,[158]]]],[[25,179],74],[[25,76,91]],[[25,90,[2,[59]]]],[[25,90,58]],[[25,74,90,58,63,[2,[59]]],74],[[5,25,76,[2,[77]]]],[[5,25,76,[2,[77]]]],[50,38],0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],180],[6],[6],[[],[[19,[180]]]],[[]],[6],[[]],[[],6],[[]],[[],2],[[]],[[100,25]],[[]],[[]],[17,59],[[]],[[]],[180,19],[[100,181,17,59]],[[],19],[[],19],[[],20],[[180,100,25]],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[25,182]],[[],183],[6],[6],[[]],[6],[[]],[[25,39]],0,[[],6],[[]],[[25,182,39,40]],[[],2],[[]],0,[183],[[]],[[]],[[183,25,182]],[[]],[[]],[[25,40]],[34,55],[[25,184]],[[],19],[[],19],[[],20],[[183,25,182,39,40]],[[]],[[]],[[],2],[[183,39,40]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],0,0,[[]],[[],6],[[]],[164,66],0,[[],2],[[]],[[]],[[]],[[]],[[]],0,[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[122,122],[185,185],[[]],[[]],[[185,5,25,27],[[2,[122]]]],[185,[[2,[122]]]],0,[[],185],[6],[6],[6],[6],[[]],[[]],[6],[6],[[122,8],9],[[185,8],9],[[]],[[],122],[[]],[[185,27,25,6]],0,[[],6],[[],6],[[]],[[]],[[],2],[[],2],[[]],[[]],[185,[[2,[122]]]],[[185,5,25,27],[[2,[122]]]],[[185,36,27]],[[]],[[]],[[]],[[]],[[185,5,25,27],[[2,[122]]]],[185,[[2,[122]]]],[[]],[[]],[[]],[[]],[185,[[2,[122]]]],[185,[[2,[122]]]],0,[[185,5,25,27],[[2,[98]]]],0,[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[185,98]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,98],55],[[25,99]],[[27,99],55],0,[[]],[[25,100,27,99]],[[]],[[]],[[]],[[],2],[[],2],[[25,186]],[[187,25,100,27]],[[],187],[[100,25,124,186]],[6],[6],[[],[[19,[187]]]],[[]],[6],[[100,25,[2,[124]],186,188]],[[]],[99,7],[[],6],[[]],[[25,100,124,27]],[[],2],[[]],[[]],[[]],[[100,25,124,186]],[[]],[[]],[187,19],[[187,100,25,27]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[25,100,27,99]],[[]],[[]],0,0,0,[1],[1],[1],[[151,144,123,36]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[118,118],[151,151],[188,188],[[]],[[]],[[]],[[118,118],89],0,[[],188],[6],[6],[6],[6],[6],[6],[[],[[19,[118]]]],[[],[[19,[151]]]],[[],[[19,[188]]]],0,[[]],[[]],[[]],[6],[6],[6],0,[[118,118],7],[[],7],[[],7],[[118,8],9],[[]],[[]],[[]],[[],33],[118],0,[[],6],[[],6],[[],6],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[152,124],151],[[151,100,123]],[[]],[[]],[[]],[[]],[[]],[[]],[[118,118],[[2,[89]]]],[[],118],[[151,144]],[[]],[[]],[[]],[[]],[[]],[[]],[[151,100,25,138,107]],0,[[151,100,25]],[118,19],[151,19],[188,19],0,0,0,0,0,0,[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[188,100,25,189]],[[188,100,25,124,190,118,107]],[[188,100,25,191]],[[188,100,25,192]],[[188,100,25,193]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],[[100,25,123,34,144,151,46]],[[100,25,123,34,144,151,46]],[[100,25,151]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[194,194],[[]],[[100,144,151,123],[[46,[124,195]]]],[[],194],[[],195],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[6],[6],[6],[[194,194],7],[[],7],[[],7],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[]],[[]],[[]],[194,7],[194,7],[[194,194],194],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[5,25,34,7]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[196,100,25,151],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[100,123],[[18,[151]]]],[[124,127,102],7],[[100,123],[[18,[151]]]],[[127,[18,[151]]],[[18,[151]]]],[[100,124,123,152],[[18,[124]]]],[[100,124,123],[[197,[152,[18,[124]]]]]],[[124,198,135],7],[[124,124,198,135],7],[[127,151,102],7],[[127,151,199,102],7],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[200,100,25]],[[100,25]],0,0,[[],200],[6],[6],[[],[[19,[200]]]],[[]],[6],[[200,100,27,25]],[[]],[25],[[],6],[[100,[60,[59]],[2,[131]]],201],[[201,129,25,58,58],74],[[]],[[36,135,140],7],[[],2],[[]],0,[[]],[[]],[[100,99,25,58]],0,[[202,59,[60,[59]],203]],[[201,5,25,202,[60,[59]]]],0,[[]],[[]],[200,19],[[200,100,27,74,202,144,25]],[[200,100,27,25]],[[200,100,27,74,202,204,144,25]],0,[[201,129,25,202,58]],0,0,0,[[100,25]],[[200,100,27,74,202,25]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[60,205],131],[[]],[[]],[[]],0,0,0,0,[[206,59,59]],[[206,59]],[[]],[[]],[[207,23]],[[]],[[]],[[]],[[]],[[206,59],59],0,[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[207,100,27,74,202,25,6,208,58,201,99]],[[],207],[6],[6],[6],[6],[[],[[19,[207]]]],[[]],[[]],[6],[6],[[]],[[]],[[100,99,25],158],[[],6],[[],6],[[]],[[]],[[],2],[[],2],[[]],[[]],[158,158],0,0,[[[60,[59]]],206],0,[[207,59],59],[[]],[[]],[[]],[[]],[[206,207,[60,[59]],202,158,[60,[59]]]],0,[[]],[[]],[[]],[[]],[207,19],[[100,27,23,99,137,6]],[[],[[18,[59]]]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[206,6],59],[[23,7,209,58,58,130],[[18,[210]]]],[[25,58,141,130],[[18,[210]]]],[[201,25,202,[60,[59]],141]],0,[1],[[]],[[]],[[]],[[]],[[],2],[[],2],[205,205],[[]],[[208,33,6],[[18,[33]]]],[[208,33,33],[[18,[33]]]],[[208,33],[[211,[137]]]],[6],[6],[[]],[6],[[205,8],9],[[]],[[141,208],33],[[],6],[[]],[[],2],[[]],[205,138],[[141,208],205],[[]],[[]],0,[[]],[[]],[205,33],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[201,140],140],[[],201],[6],[6],[6],[6],[[]],[[]],[6],[6],[[212,8],9],[[201,8],9],[[]],[[]],[60,213],[[],6],[[],6],[[]],[[]],[[],2],[[],2],[[]],[[]],[[[60,[59]],131],201],[[]],[[]],[[]],[[]],[[201,59],[[2,[131]]]],0,[[]],[[]],[[]],[[]],0,[[201,100]],[[201,140],140],0,0,[[201,59],[[2,[140]]]],[[201,213],[[2,[140]]]],[[201,[60,[59]]],137],0,[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,[[201,140],[[2,[213]]]],[[201,140],[[2,[59]]]],0,[[201,59,59],[[2,[131]]]],[[25,201,130,214],2],[[25,201,130,214],2],[[141,140],55],[[201,141],[[2,[130]]]],[[36,129,201,25,202,58]],[[25,201,130],2],[[129,130,25,202,58]],0,0,0,[[]],[[]],[[]],[[]],0,[[],2],[[],2],[[],189],[6],[6],[[]],[6],[[]],[[],6],[[]],[[189,100,164]],[[189,100,164]],[[],2],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,[1],[[]],[[]],[[]],[[]],[[],2],[[],2],[215,215],[[]],[[],215],[6],[6],[[],[[19,[215]]]],[[]],[6],[[]],[[],6],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[215,19],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[100,25,215,189],74],[[]],[[]],[[]],0,0,0,0,0,0,0,[1],[[]],[[152,[56,[[199,[152]]]]]],[[152,[56,[[199,[152]]]]]],[[152,[56,[[199,[152]]]]]],[[]],[[]],[[]],[[135,36,124],[[199,[152]]]],[[],2],[[],2],[152,152],[[]],[[152,152],89],[[],152],[6],[6],[[],[[19,[152]]]],[[]],[6],[216,152],[152,216],[[152,152],7],[[152,199],7],[[],7],[[],7],[[152,8],9],[[152,8],9],[[]],[152,217],[[],6],[[]],[[],2],[[]],[152],[[]],[[]],[[152,152],[[2,[89]]]],[[]],[[]],[152,19],[[152,[56,[[199,[152]]]]]],[[]],[[],55],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[218,62,64],59],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[218,218],[219,219],[[]],[[]],[[219,218]],[6],[6],[6],[6],[[],[[19,[218]]]],[[],[[19,[219]]]],[[]],[[]],[6],[6],[[218,218],7],[218,59],[[218,8],9],[[219,8],9],[218,62],0,0,[[]],[[]],[220,[[2,[218]]]],[219,62],[[],6],[[],6],[[219,74,59],7],[[]],[[]],[218,7],[[219,23]],[[218,218,59],218],[[219,219,59],219],[[],2],[[],2],[[]],[[]],[218,59],0,0,[[]],[[]],[[]],[[]],[[218,58,67],68],[219,[[2,[59]]]],[218,62],[219,62],[[62,62],62],[[219,58,63,64]],[[219,64]],[[]],[[]],[[]],[[]],[218,19],[219,19],[[219,62]],[[219,62]],[219,218],[[]],[[]],[[219,64]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[218,58],145],[[]],[[]],[[]],[[]],0,[[],2],[[],2],0,[[]],[[]],0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,[[],221],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,[[124,7],222],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[190,100,164,142,107]],[[190,124,[119,[[119,[156,62]]]],81,7]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[79,223],0,[53,190],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[190,67,58,218,59],224],[[190,124],225],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[226,59,227,7]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[[]],[[]],[[]],[[]],[[]],[[222,59],227],0,[[],6],[[],6],[[],6],[[],6],[[],6],0,[[]],[[]],[[]],[[]],[[]],[224,66],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[67,58,218,228,221,59],224],[[229,226,230]],[[229,226]],[[229,226,231]],0,[[229,226]],[[229,226,221]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[226],[[224,227],62],0,0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[228,73,222,59]],0,[[]],[[]],[[]],[228,61],0,[[]],[[],2],[[],2],0,[6],[6],[[]],[6],[[]],[[],6],[[]],0,0,[[],2],[[]],[228,[[18,[232]]]],0,[53,228],[228,6],[[]],[[]],0,[228],[[]],[[]],0,0,[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,0,0,0,0,[[124,120,233,186,7],222],0,0,[[190,100,164,142,107]],0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[234,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[190,164,186,233,124,145,107],[[19,[235]]]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[236,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[190,124,145,222,237,[2,[238]],[2,[239]],[2,[240]],[2,[160]],115]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[241,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[190,186,233,124,145,115],[[19,[235]]]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[127,129,124],128],[[]],[6],[[]],[[],6],[[]],[[242,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[190,124,186,142,222,243,128,115]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[190],[[],6],[[]],[[244,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[233,190,100,142,186,124,145,107],[[19,[235]]]],[[190,100,142,186,76,124,115]],[[233,190,100,186,124,145,115,120,76,[2,[238]]]],[[190,100,81,145,222,76,245,121]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[246,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[190,164,186,233,124,145,115],[[19,[235]]]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[247,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[190,164,186,233,124,145,115],[[19,[235]]]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[248,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[190,164,186,233,124,145,100,107],[[19,[235]]]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[249,190,100,164,142,107]],[[],2],[[]],[[]],[[]],[[190,164,186,233,124,145,115],[[19,[235]]]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[]],[6],[[]],[[],6],[[]],[[250,190,100,164,142,107]],[[],2],[[]],0,[[]],[[]],[[164,233,81],[[19,[235]]]],[[233,124],[[19,[66,235]]]],[[250,190,164,186,233,124,145,115],[[19,[235]]]],[[233,145],[[19,[66,235]]]],[233,[[19,[66,235]]]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,[1],[[]],[[]],[[]],[220,73],[[]],[[],2],[[],2],[220,220],[[]],[6],[6],[[]],[6],0,[[]],[128,[[19,[70,55]]]],[220,[[2,[71]]]],[[],6],0,[[]],[[],2],[[]],[[]],[[]],0,0,[220,62],[[220,62],[[2,[62]]]],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[220,67],[[2,[68]]]],[[]],[[]],[[],2],0,[[]],[220,73],0,[220,[[2,[71]]]],[220,[[2,[73]]]],[[]],[[]],0,0,0,0,0,0,0,0,[1],[1],[1],[[251,64],252],0,[251,59],[[[2,[62]]],55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[225,225],[253,253],[251,251],[[]],[[]],[[]],[[221,254,254,218,25,107],[[18,[210]]]],[[],225],[[],251],[251,255],[[251,64],255],[6],[6],[6],[6],[6],[6],[[],[[19,[225]]]],[[],[[19,[251]]]],[[]],[[]],[[]],[6],[6],[6],[[225,225],7],[[253,253],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[251,34],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],0,[23,256],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[251,100,25,170,124,118]],[225,19],[251,19],[[25,59,59,255]],0,0,[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[100,170,102,124,59]],[[251,100,170]],[[100,170,102,124,59]],[[251,100,25,124,190,118,107]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[257,64,64,58]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[257,257],[258,258],[[]],[[]],[[],257],[[],258],[6],[6],[6],[6],[[],[[19,[257]]]],[[257,64,58]],[[]],[[]],[6],[6],[[]],[[]],[[],6],[[],6],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[100,124,74,254,[2,[59]]]],[[]],[[]],[[]],[[]],[257,19],[[202,254,59,34,252,7],[[38,[259]]]],[[100,25,124,254],[[18,[210]]]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[257,74,254,58,64]],[[100,25,251,124,190,58,118,107],74],[[64,64,100,25,251,124,190,58,118,107],74],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[260,260],[261,261],[262,262],[[]],[[]],[[]],[[],260],[[],262],[[61,262],219],[6],[6],[6],[6],[6],[6],[[],[[19,[260]]]],[[]],[[]],[[]],[6],[6],[6],0,0,[222,[[2,[218]]]],[[]],[[]],[[]],[[[2,[128]]],262],0,[[],6],[[],6],[[],6],[[260,218]],[[260,219]],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[25,218,58,190,53,34,252]],[[100,260,124]],[[260,61]],0,[[]],[[]],[[]],[[]],[[]],[[]],[260,19],0,[[100,190,61]],0,0,0,0,0,0,[[218,218],59],0,[[]],[[]],[[]],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[260,74,61],219],[[100,25,251,124,118,190,107]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[263,263],[[]],[[263,263],89],[[53,259,228,264],38],[[53,259,58,228,264],[[38,[265]]]],[263,173],[[],263],[6],[6],[6],[6],[[],[[19,[263]]]],[[]],[[]],[6],[6],[[263,263],7],[[],7],[[],7],[[263,8],9],[[]],[[]],[173,263],[[],33],[[58,59]],[263],[[],6],[[],6],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[263,263],[[2,[89]]]],[[53,266,267,58,59],265],[[]],[[]],[[]],[[]],[263,19],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[[],191],[6],[6],[[]],[6],[[]],[[],6],[[]],[[191,100,164]],[[191,124,186,233],[[19,[235]]]],[[],2],[[]],[[]],[[]],[[]],[[]],0,[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],[[],2],[[],2],[268,268],[[]],[6],[6],[[5,25,269]],[[]],[[25,214,12]],[[214,6],214],[6],[[25,7,12],270],[[268,268],7],[[],7],[[],7],[[]],[[],6],[[]],[268,7],[[],2],[[]],[[]],[[]],[[268,269],[[2,[6]]]],[[]],[[]],[[25,214,7,[2,[6]],268,268,268]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]],[[268,269,[2,[6]]]],0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[271,271],[272,272],[273,273],[274,274],[275,275],[[]],[[]],[[]],[[]],[[]],[[273,59],158],0,[76,271],[[],273],[[],274],[[],275],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[],[[19,[271]]]],[[],[[19,[272]]]],[[],[[19,[273]]]],[[],[[19,[274]]]],[[],[[19,[275]]]],0,[6,55],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[[272,272],7],[[274,274],7],[[275,275],7],[[],7],[[],7],[[271,8],9],[[272,8],9],[[272,8],9],[[273,8],9],[[274,8],9],[[274,8],9],[[275,8],9],[[]],[[]],[[]],[[]],[[]],0,[[25,271,86]],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[276,277],86],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,202,58,209]],[[275,25,64,86]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[271,278],[[278,[279]]]],0,[[25,271,76]],[271,19],[272,19],[273,19],[274,19],[275,19],[[100,25,271,[278,[279]],277]],0,[[100,25,271,76]],0,[[]],[[]],[[]],[[]],[[]],[[],55],[[],55],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[271,100,25]],[[273,5,25]],[[275,5,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[100,25,271,76]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[1],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[280,280],[[]],0,[[],192],[6],[6],[6],[6],[[]],[[]],[6],[6],0,[[280,8],9],[[]],[[]],[[],6],[[],6],[[]],[[]],0,[[192,100,164,281]],[[],2],[[],2],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[280,59],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[282,282],[281,281],[[]],[[]],0,0,0,[[],282],[[],281],[6],[6],[6],[6],[[],[[19,[282]]]],[[],[[19,[281]]]],[[]],[[]],[6],[6],0,[[281,8],9],[[]],[[]],[[100,280],[[2,[283]]]],[[],6],[[],6],[[]],[[]],[[281,124],7],[[281,34],7],0,[[25,34],284],[[],2],[[],2],[[]],[[]],0,[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[282,5,25]],[282,19],[281,19],[[100,25,282,[2,[6]]]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[]],[[]],[[],2],[[],2],[[281,100]],[[100,25,282,192],74],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[193,34,[18,[285]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[286,286],[285,285],[287,287],[288,288],[[]],[[]],[[]],[[]],0,0,[[],193],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[]],[[]],[[]],[[]],[[]],[6],[6],[6],[6],[6],[[286,286],7],[[],7],[[],7],[[286,8],9],[[285,8],9],[[287,8],9],[[288,8],9],[[193,8],9],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[193,100,164]],[[193,100,164]],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1],[[]],[[]],[[]],[[]],[[],2],[[],2],[289,289],[[]],[[],289],[6],[6],[[],[[19,[289]]]],[[]],[6],[[141,97],55],[[]],[[],6],[[]],[[],2],[[]],[[64,290],[[18,[291]]]],[[]],[[]],[97,97],[[]],[[]],[289,19],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[100,25,289,193],74],[[]],[[]],[[]],0,0,0,0,[[292,100,25,123]],[[292,151],118],[[]],[[]],[[5,25,7,7,12,12]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],0,[[100,25,148,151,7]],[[],292],[6],[6],[6],[6],[[],[[19,[292]]]],[[]],[[]],[6],[6],[[168,118]],[[]],[[]],0,[[25,151]],[[],6],[[],6],[[]],[[]],[168,7],[[],2],[[],2],[[]],[[]],[292],0,[[100,123],292],[[292,100,123]],[[293,74]],[[]],[[]],[[]],[[]],[[292,118],[[2,[151]]]],[[]],[[]],[[]],[[]],[292,19],[[292,151],7],[[292,118]],[[292,118],[[2,[151]]]],0,[[292,100,25,118]],[[292,118],[[2,[151]]]],[[100,25,292,58,118,6]],[[100,25,151,107]],0,0,[[292,124],[[18,[118]]]],[293,146],[[292,100,25]],0,[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[293,25]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[292,25,100]],[[5,25,7,7],74],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],2],[[],2],[6],[6],[[294,34]],[[]],[6],[[]],[[],6],[[]],[[],2],[[]],[[],294],[[294,36]],[[294,15,3]],[[]],[[]],[[294,295]],[[294,34,[56,[296]]]],[[]],[[]],[[],19],[[],19],[[],20],[[]],[[]],[[],2],[[]],[[]],[[]]],"p":[[3,"Private"],[4,"Option"],[4,"AppEnvironment"],[3,"CreationContext"],[3,"ReUi"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"RecordingSource"],[4,"HardwareTier"],[8,"FnOnce"],[3,"Box"],[6,"Result"],[3,"BuildInfo"],[3,"StartupOptions"],[4,"LogMsg"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[8,"Send"],[3,"Receiver"],[3,"Context"],[3,"WgpuConfiguration"],[3,"Ui"],[3,"App"],[3,"Blueprint"],[3,"Visuals"],[4,"TimeControlCommand"],[4,"PanelSelection"],[3,"AppState"],[8,"Storage"],[15,"u64"],[15,"str"],[8,"Read"],[3,"LogDb"],[3,"Path"],[6,"Result"],[3,"WgpuResourcePoolStatistics"],[3,"DataStoreStats"],[4,"Source"],[3,"RecordingConfig"],[3,"AppOptions"],[8,"AsRef"],[8,"Any"],[6,"IntMap"],[3,"RecordingId"],[3,"Frame"],[4,"Command"],[3,"PathBuf"],[3,"ApplicationId"],[3,"Profiler"],[3,"RenderContext"],[3,"ComponentUiRegistry"],[3,"String"],[8,"Into"],[4,"AppIconStatus"],[3,"Rect"],[15,"f32"],[3,"RangeInclusive"],[3,"BoundingBox"],[3,"Vec3"],[3,"Pos2"],[3,"Vec2"],[3,"Error"],[8,"Iterator"],[3,"Vec2"],[3,"Ray3"],[3,"Rot2"],[3,"Quat"],[3,"Affine3A"],[3,"Conformal3"],[3,"IsoTransform"],[3,"Response"],[3,"Caches"],[3,"Tensor"],[3,"TensorStats"],[3,"MeshCache"],[4,"MeshSourceData"],[3,"LoadedMesh"],[3,"Arc"],[3,"DecodeCache"],[4,"TensorDecodeError"],[3,"DecodedTensor"],[3,"Demand"],[3,"ColorImage"],[3,"ImageCache"],[3,"ImageCacheKey"],[4,"Ordering"],[3,"ColoredTensorView"],[4,"DynamicImage"],[3,"CachedImage"],[3,"GpuTexture2DHandle"],[3,"Clipboard"],[3,"Clipboard"],[3,"Time"],[15,"i64"],[3,"ItemCollection"],[4,"Item"],[3,"ViewerContext"],[4,"UiVerbosity"],[3,"LatestAtQuery"],[4,"Mesh3D"],[3,"EncodedMesh3D"],[4,"MeshFormat"],[3,"RawMesh3D"],[3,"SpaceViewHighlights"],[3,"SelectionState"],[4,"HoveredSpace"],[4,"SelectionHighlight"],[4,"HoverHighlight"],[3,"InteractionHighlight"],[3,"OptionalSpaceViewEntityHighlight"],[3,"SpaceViewEntityHighlight"],[3,"SpaceViewOutlineMasks"],[3,"SPACEVIEW_OUTLINE_MASK_NONE"],[3,"EntityPathHash"],[3,"SpaceViewId"],[6,"HashMap"],[3,"InstanceKey"],[3,"OutlineMaskPreference"],[3,"HistoricalSelection"],[3,"SpaceInfoCollection"],[3,"EntityPath"],[3,"SpaceInfo"],[4,"UnreachableTransform"],[3,"EntityDb"],[3,"ViewCoordinates"],[3,"TimeControl"],[3,"TimeRangeF"],[3,"TimeView"],[3,"TimeState"],[4,"Looping"],[4,"PlayState"],[3,"Timeline"],[3,"TimesPerTimeline"],[3,"TimeRange"],[3,"TimeInt"],[3,"BTreeSet"],[3,"TimeReal"],[4,"TimeType"],[3,"TransformCache"],[3,"EntityPropertyMap"],[3,"EntityTree"],[3,"Mat4"],[4,"WidgetText"],[3,"ComponentPath"],[3,"DataBlueprintGroupHandle"],[3,"InstancePath"],[3,"MsgId"],[3,"SpaceView"],[4,"ViewCategory"],[3,"RemoteViewerApp"],[3,"ResolvedClassDescription"],[3,"ResolvedAnnotationInfo"],[3,"KeypointId"],[15,"u16"],[3,"Color32"],[3,"Annotations"],[3,"ClassId"],[4,"DefaultColor"],[3,"AnnotationMap"],[3,"MISSING_ANNOTATIONS"],[3,"SceneQuery"],[3,"SpaceMakeInfo"],[4,"LayoutSplit"],[4,"SplitDirection"],[3,"Tree"],[3,"NodeIndex"],[3,"DataBlueprintTree"],[3,"DataBlueprintGroup"],[3,"DataBlueprints"],[3,"KeyData"],[6,"IntSet"],[3,"ComponentBundle"],[3,"EntityComponentWithInstances"],[3,"ComponentName"],[3,"ComponentWithInstances"],[6,"RgbaImage"],[3,"EventLogView"],[3,"TableRow"],[3,"MemoryLimit"],[3,"MemoryPanel"],[3,"TrackingStatistics"],[3,"SelectionHistory"],[3,"EntityProperties"],[3,"SelectionPanel"],[3,"ViewState"],[3,"SceneBarChart"],[3,"SceneSpatial"],[3,"SceneTensor"],[3,"SceneText"],[3,"SceneTimeSeries"],[4,"CanAddToSpaceView"],[3,"EntityAddInfo"],[3,"SpaceViewEntityPicker"],[3,"BTreeMap"],[3,"DataStore"],[3,"EnumSet"],[3,"TimePanel"],[3,"TimeRangesUi"],[3,"Painter"],[3,"Stroke"],[4,"EntityPathPart"],[3,"TimelineAxis"],[3,"DensityGraph"],[3,"DataDensityGraphPainter"],[6,"TimeHistogram"],[3,"FontId"],[4,"Shape"],[3,"Vec1"],[3,"Segment"],[15,"f64"],[3,"Id"],[3,"BarChartState"],[15,"u32"],[3,"Icon"],[3,"Eye"],[3,"OrbitEye"],[3,"SpaceCamera3D"],[3,"SceneSpatialUiData"],[3,"InstancePathHash"],[3,"MeshId"],[3,"PickingResult"],[4,"SpatialNavigationMode"],[3,"PickingState"],[3,"PickingRayHit"],[3,"SceneSpatialPrimitives"],[3,"PickingContext"],[3,"LineStripSeriesBuilder"],[3,"PointCloudBuilder"],[3,"MeshInstance"],[3,"EntityView"],[3,"Arrows3DPart"],[4,"QueryError"],[3,"Boxes2DPart"],[4,"Rect2D"],[3,"ColorRGBA"],[3,"Radius"],[3,"Label"],[3,"Boxes3DPart"],[3,"CamerasPart"],[3,"Pinhole"],[3,"ImagesPart"],[3,"Rgba"],[3,"Lines2DPart"],[3,"Lines3DPart"],[3,"MeshPart"],[3,"Points2DPart"],[3,"Points3DPart"],[3,"ViewSpatialState"],[3,"AutoSizeConfig"],[4,"AutoSizeUnit"],[3,"RectTransform"],[3,"Size"],[3,"OutlineConfig"],[3,"View2DState"],[4,"ZoomState2D"],[3,"TargetConfiguration"],[3,"View3DState"],[3,"EyeInterpolation"],[3,"SpaceSpecs"],[3,"ViewBuilderHandle"],[4,"ScreenBackground"],[3,"PaintCallback"],[3,"CommandBuffer"],[3,"ViewBuilder"],[4,"DragDropAddress"],[3,"DimensionMapping"],[3,"InnerResponse"],[3,"ViewTensorState"],[4,"ColorMap"],[3,"ColorMapping"],[4,"TextureScaling"],[3,"TextureSettings"],[6,"ArrayView2"],[8,"Fn"],[6,"ArrayViewD"],[8,"Copy"],[3,"TextEntry"],[3,"ViewTextFilters"],[3,"ViewTextState"],[3,"TimePoint"],[3,"RichText"],[3,"PlotPoint"],[3,"PlotPointAttrs"],[4,"PlotSeriesKind"],[3,"PlotSeries"],[3,"ViewTimeSeriesState"],[3,"GridInput"],[3,"GridMark"],[3,"Viewport"],[3,"TabViewer"],[3,"ViewerAnalytics"],[3,"Event"],[4,"Property"],[13,"RustSdk"],[13,"RerunCli"],[13,"InvalidMetaData"],[13,"TwoD"],[13,"ThreeD"],[13,"TopBottom"],[13,"LeftRight"],[8,"DataUi"],[13,"Compatible"],[13,"No"],[4,"UiLabelTarget"],[3,"Image"],[3,"MeshSource"],[3,"UiLabel"],[4,"AdditionalPickingInfo"],[8,"ScenePart"],[13,"Scaled"]]},\
"re_web_viewer_server":{"doc":"Serves the web viewer wasm/html.","t":[3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["MakeSvc","Svc","WebViewerServer","analytics","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","call","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","init","init","init","into","into","into","new","new","on_serve_wasm","poll_ready","poll_ready","serve","server","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["re_web_viewer_server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Hosts the Web Viewer Wasm+HTML","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,4,7,1,4,7,1,4,1,4,7,1,4,7,1,4,7,1,4,7,1,4,7,1,4,7,1,7,1,1,4,7,7,1,4,7,1,4,7,1,4,7],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,[3,[2]]]],[4],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[],1],[6,7],[1],[[1,8],[[10,[9]]]],[[4,8],[[10,[9]]]],[7,11],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],12],[[],12],[[],12]],"p":[[3,"Svc"],[3,"Body"],[3,"Request"],[3,"MakeSvc"],[15,"usize"],[15,"u16"],[3,"WebViewerServer"],[3,"Context"],[4,"Result"],[4,"Poll"],[6,"Result"],[3,"TypeId"]]},\
"re_ws_comms":{"doc":"Communications between server and viewer.","t":[3,17,17,17,6,3,0,5,5,5,12,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11],"n":["Connection","DEFAULT_WS_SERVER_PORT","PREFIX","PROTOCOL","Result","Server","client","decode_log_msg","default_server_url","encode_log_msg","listener","server","Connection","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","drop","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","viewer_to_server","vzip","wrapping_as","wrapping_cast_from","Server","accept_connection","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","drop","from","handle_connection","init","into","listen","listener","lossless_try_into","lossy_into","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_broadcast_stream","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","vzip","wrapping_as","wrapping_cast_from"],"q":["re_ws_comms","","","","","","","","","","","","re_ws_comms::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","re_ws_comms::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a connection to the server. Disconnects on drop.","","","","","","","","","","","The server is a pub-sub architecture.","Represents a connection to the server. Disconnects on drop.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Connect viewer to server","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Accept new connections forever","","","","Start a pub-sub server listening on the given port","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,19,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,19,19,19,19,19,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,0,19,19,19,19,19,19,19,19],"f":[0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],3],[1,[[5,[4]]]],0,0,0,[[]],[[]],[[]],[[]],[[],6],[[],6],[7],[7],[7],[[]],[[],7],[[]],[[],6],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],9],[[]],[[]],[[3,[0,[10,11]]],[[2,[12]]]],[[]],[[]],[[]],0,[[[14,[13]],15,16,[13,[[17,[[5,[13]]]]]]]],[[]],[[]],[[]],[[]],[[],6],[[],6],[7],[7],[7],[[]],[[[14,[13]],16,[13,[[17,[[5,[13]]]]]]],18],[[],7],[[]],[[19,[20,[1]]],21],0,[[],6],[[]],[22,[[21,[19]]]],[[]],[[]],[[]],[[]],[[[20,[1]],[13,[[17,[[5,[13]]]]]]],[[14,[13]]]],[[],8],[[],8],[[],9],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"LogMsg"],[6,"Result"],[3,"String"],[15,"u8"],[3,"Vec"],[4,"Option"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"Fn"],[8,"Send"],[3,"Connection"],[3,"Arc"],[3,"Sender"],[4,"SocketAddr"],[3,"TcpStream"],[6,"Mutex"],[6,"Result"],[3,"Server"],[3,"Receiver"],[6,"Result"],[15,"u16"]]},\
"rerun":{"doc":"Rerun - log point clouds, images, etc and visualize them …","tn":["ApplicationId","CallSource","Cli","Component","ComponentName","EntityPath","IllegalInstanceKey","MismatchedRowLengths","MoreThanOneRow","MsgSender","MsgSenderError","PackingError","Python","RecordingId","SerializableComponent","Session","SessionBuilder","SplattedInstanceKeys","ZERO","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","application_id","as_ref","as_ref","as_slice","as_str","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffered","buffered","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clap","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","components","connect","coordinates","crash_handler","decide_logging_enabled","default","default_enabled","default_enabled","default_server_addr","demo_util","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","disabled","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drain_backlog","drop","drop","drop","drop","drop","drop","drop","drop","enabled","enabled","entity_path","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","external","field","finalize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_str","from_uuid","full_name","get_hash","get_hash","get_hash","get_hash","global_session","hash","hash","hash","hash","hash","hash","hash","hash64","init","init","init","init","init","init","init","init","instanced","into","into","into","into","into","into","into","into","into_resettable","is_child_of","is_descendant_of","is_enabled","is_official_example","is_root","iter","join","last","len","log","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","native_viewer","new","new","new","new","new","new_recording_info","num_instances","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","provide","random","recording_id","recording_id","root","run","run","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","save","send","send","send_path_op","serialize","serialize","serialize","serialize","short_name","sink","sink","sink","source","splatted","time","timeless","timepoint","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","web_viewer","with_component","with_splat","with_splat_opt","with_time","with_timeless","with_timepoint","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Connect","RerunArgs","RerunBehavior","Save","Serve","Spawn","__clone_box","__clone_box","augment_args","augment_args_for_update","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","connect","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","equivalent","equivalent","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","group_id","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","run","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","save","serve","spawn","to_behavior","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","AnnotationContext","AnnotationInfo","Arrow3D","Box3D","ClassDescription","ClassId","ClassId","ColorRGBA","Depth","Encoded","EncodedMesh3D","F32","F64","Glb","Gltf","I16","I32","I64","I8","IDENTITY","IDENTITY","InstanceKey","JPEG","KeypointId","Label","LineStrip2D","LineStrip3D","Mat3x3","Mesh3D","MeshFormat","MeshId","Obj","Pinhole","Pinhole","Point2D","Point3D","Quaternion","Radius","Raw","RawMesh3D","Rect2D","Rigid3","Rigid3","SPLAT","Scalar","ScalarPlotProps","Size3D","Tensor","TensorData","TensorDataMeaning","TensorDimension","TensorId","TensorTrait","TextEntry","Transform","U16","U32","U64","U8","Unknown","Unknown","Vec2D","Vec3D","Vec4D","ViewCoordinates","XCYCW2H2","XCYCWH","XYWH","XYXY","YXHW","YXYX","ZERO","ZERO","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","albedo_factor","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","aspect_ratio","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","child_from_parent","class_map","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","color","data","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default","default","default","default","depth","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","describe_short","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dtype","dtype","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","focal_length","focal_length_in_pixels","format","forward","fov_y","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_body","from_dynamic_image","from_image","from_rgb","from_rgba","from_rub","from_str","from_up_and_handedness","from_xywh","get","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","handedness","hash","hash","hash","hash","hash","hash","height","height","id","id","id","image_from_cam","index","index","index","indices","info","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_resettable","is_shaped_like_an_image","is_shaped_like_an_image","is_specific","is_splat","is_vector","is_vector","keypoint_connections","keypoint_map","label","level","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","meaning","meaning","meaning","mesh_id","mesh_id","mesh_id","meter","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","named","new","new","new","new","new","new","new","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_child_from_parent","new_parent_from_child","normals","num_dim","num_dim","num_triangles","origin","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent_from_child","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","positions","principal_point","random","random","resolution","resolution","right","rotation","sanity_check","sanity_check","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scattered","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shape","shape","shape","size","size_in_bytes","size_in_bytes","specific_index","tensor_from_jpeg_bytes","tensor_from_jpeg_file","tensor_id","to_array","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rub","to_string","to_string","to_string","to_string","to_string","to_string","top_left_corner","transform","translation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unnamed","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","up","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vector","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","width","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x","x","x","x","x","x","y","y","y","y","y","y","y","y","z","z","z","z","z","z","Axis3","Handedness","Left","NEGATIVE_X","NEGATIVE_Y","NEGATIVE_Z","Negative","POSITIVE_X","POSITIVE_Y","POSITIVE_Z","Positive","Right","Sign","SignedAxis3","X","Y","Z","__clone_box","__clone_box","__clone_box","__clone_box","as_vec3","axis","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","describe","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_dim","from_right_handed","from_str","init","init","init","init","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","sign","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BUILD_INFO","anonymize_source_file_path","backtrace_to_string","callstack_from","format_backtrace","install_crash_handlers","install_panic_hook","install_signal_handler","bounce_lerp","color_spiral","grid","lerp","linspace","re_viewer","debug","debug_once","error","error_once","info","info_once","setup_native_logging","trace","trace_once","warn","warn_once","AnnotationContext","ApplicationId","Arrow3D","ArrowMsg","ArrowMsg","BBox2D","BadEscape","BatchIndex","BeginRecordingMsg","BeginRecordingMsg","Box3","ClearComponents","ClearRecursive","ComponentName","ComponentPath","DTYPE","DoubleSlash","Duration","EMPTY","EmptyString","Encoded","EncodedMesh3D","EntityPath","EntityPathHash","EntityPathImpl","EntityPathOpMsg","EntityPathOpMsg","EntityPathPart","F16","F16","F32","F32","F64","F64","FullIndex","Glb","Gltf","Goodbye","I16","I16","I32","I32","I64","I64","I8","I8","Index","Index","IndexHash","Integer","InvalidSequence","LeadingSlash","LogMsg","MAX","Mesh3D","MeshFormat","MeshId","MissingSlash","MsgId","NONE","NONE","Name","Obj","Other","PathOp","PathParseError","Pinhole","Pinhole","Pixel","PythonSdk","PythonVersion","Quaternion","Raw","RawMesh3D","RecordingId","RecordingInfo","RecordingSource","Rigid3","Rigid3","RustSdk","Sequence","Sequence","SequentialIndex","String","TensorDataType","TensorDataTypeTrait","TensorElement","Time","Time","TimeInt","TimePoint","TimeRange","TimeRangeF","TimeReal","TimeType","Timeline","TimelineName","Transform","U16","U16","U32","U32","U64","U64","U8","U8","Unknown","Unknown","UnterminatedString","Uuid","ViewCoordinates","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","abs","abs_length","add","add","add_assign","albedo_factor","application_id","arrow_msg","as_f32","as_f64","as_f64","as_nanos","as_ref","as_secs_f32","as_secs_f64","as_slice","as_str","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","ceil","center","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","chunk","class_map","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","component_name","component_name","component_types","contains","contains","datagen","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encoding","entity_path","entity_path","entity_path","entity_path_vec","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exact_format","external","first64","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_millis","from_nanos","from_secs","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","half_size","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash64","hash64","image_from_cam","impl_into_enum","impl_into_enum","indices","info","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inverse_lerp","is_empty","is_empty","is_none","is_none","is_official_example","is_root","is_some","is_some","iter","last","len","len","length","lerp","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","major","max","max","max","mesh_id","mesh_id","min","min","min","minor","msg_bundle","msg_id","msg_id","msg_id","mul","name","neg","neg","new","new","new","new","new","normals","origin","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent","parse_entity_path","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","parts","patch","path","path","path_op","point","point","positions","provide","push","recording_id","recording_source","resolution","root","rotation","rotation","round","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","schema","second64","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","started","sub","sub","sub_assign","suffix","sum","time_point","time_point","time_point","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform","translation","translation","try_as_u16","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vector","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","details","llvm_version","rustc_version","ArrowMsg","chunk","msg_id","schema","AnnotationContext","AnnotationInfo","Arrow3D","BadSlice","BadTensorShape","BadValue","Box3D","ClassDescription","ClassId","ClassId","ColorRGBA","Depth","Encoded","EncodedMesh3D","F16NotSupported","F32","F64","FastFixedSizeArrayIter","FastFixedSizeListArray","FieldError","FixedSizeArrayField","Glb","Gltf","I16","I32","I64","I8","Image","InstanceKey","JPEG","KeypointId","Label","LineStrip2D","LineStrip3D","Mat3x3","Mesh3D","MeshFormat","MeshId","MsgId","NotContiguousStdOrder","Obj","Pinhole","Pinhole","Point2D","Point3D","Quaternion","Radius","Raw","RawMesh3D","ReadError","Rect2D","Result","Rigid3","Rigid3","Scalar","ScalarPlotProps","Size3D","Tensor","TensorCastError","TensorData","TensorDataMeaning","TensorDimension","TensorId","TensorImageError","TensorTrait","TextEntry","Transform","TypeMismatch","U16","U32","U64","U8","Unknown","Unknown","UnsupportedImageColorType","UnsupportedJpegColorType","Vec2D","Vec3D","Vec4D","ViewCoordinates","XCYCW2H2","XCYCWH","XYWH","XYXY","YXHW","YXYX","albedo_factor","array","arrow_deserialize","arrow_serialize","az","az","az","az","az","az","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","class_map","color","context","coordinates","data","data_type","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","dtype","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","get","id","id","image_from_cam","indices","info","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","into_iter","is_shaped_like_an_image","is_vector","iter_registered_field_types","keypoint_connections","keypoint_map","label","level","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","meaning","meaning","mesh_id","mesh_id","meter","name","new_array","next","normals","num_dim","offset","origin","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","positions","provide","provide","provide","resolution","rotation","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scattered","shape","shape","size","size_in_bytes","source","source","source","tensor_id","to_string","to_string","to_string","transform","translation","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","values","vector","vzip","vzip","vzip","vzip","vzip","vzip","w","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x","x","x","y","y","y","y","y","z","z","z","z","source","AnnotationContext","AnnotationInfo","AnnotationInfoArray","AnnotationInfoArrayIterator","ClassDescription","ClassMapElemArrow","ClassMapElemArrowArray","ClassMapElemArrowArrayIterator","MutableAnnotationInfoArray","MutableClassMapElemArrowArray","arrow_deserialize","arrow_serialize","as_any","as_any","as_arc","as_arc","as_box","as_box","as_mut_any","as_mut_any","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","class_description","class_id","class_map","color","data_type","data_type","data_type","data_type","data_type","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","field_class_description","field_class_description","field_class_id","field_class_id","field_color","field_color","field_id","field_id","field_label","field_label","fmt","fmt","from","from","from","from","from","from","from","has_validity","has_validity","id","info","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","keypoint_connections","keypoint_map","label","len","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","new","new","new_array","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","push_null","push_null","reserve","reserve","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","shrink_to_fit","shrink_to_fit","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","validity","validity","validity","validity","validity_iter","validity_iter","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Axis3","Back","Down","Forward","Handedness","Left","Left","Negative","Positive","Right","Right","Sign","SignedAxis3","Up","ViewCoordinates","ViewDir","X","Y","Z","__clone_box","axis","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","deref","deref_mut","deserialize","downcast","drop","eq","equivalent","equivalent","fmt","from","init","into","long","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","serialize","short","sign","to_owned","try_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","build_frame_nr","build_log_time","build_some_colors","build_some_instances","build_some_instances_from","build_some_labels","build_some_point2d","build_some_rects","build_some_vec3d","DecodeError","Decoder","EncodeError","Encoder","MsgPack","MsgPack","NotAnRrd","Read","Write","Zstd","Zstd","append","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","drop","drop","drop","drop","encode","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","into","into","into","into","into_iter","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","new","new","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","provide","provide","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","source","source","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","zdecoder","zstd_encoder","AHashMap","Either","Left","Right","__clone_box","__clone_box","all","any","array","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","az","az","bitmap","borrow","borrow","borrow_mut","borrow_mut","buffer","cast_from","cast_from","cause","checked_as","checked_as","checked_cast_from","checked_cast_from","chunk","cjk_compat_variants","clone","clone","clone_from","clone_into","clone_into","cmp","collect","compute","consume","count","datatypes","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","deserialize","downcast","downcast","drive","drive_unindexed","drop","drop","either","either_into","either_with","eq","eq","equivalent","equivalent","equivalent","equivalent","error","expect_left","expect_right","extend","extend","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","ffi","fill_buf","find","find_map","flip","flush","fmt","fmt","fmt","fold","for_each","from","from","from","from","from","from_iter","get","get_hash","get_key_value","get_mut","hash","index","init","init","insert","into","into","into","into","into_future","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_keys","into_par_iter","into_values","into_vec","io","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","len","lossless_try_into","lossless_try_into","lossy_into","lossy_into","map","map_left","map_right","mmap","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","next","next_back","nfc","nfd","nfkc","nfkd","nth","offset","opt_len","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","par_extend","partial_cmp","partition","poll","position","provide","read","read_exact","read_exact_buf","read_line","read_to_end","read_to_string","read_until","remove","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","scalar","seek","serialize","size_hint","source","stream_safe","temporal_conversions","to_owned","to_owned","to_string","trusted_len","try_from","try_from","try_into","try_into","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_poll","type_id","type_id","types","unwrap_left","unwrap_right","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","util","vzip","vzip","with_capacity","with_capacity_and_hasher","with_hasher","with_producer","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","write","write_all","write_bytes","write_fmt","Array","ArrayValuesIter","BinaryArray","BinaryValueIter","BooleanArray","DaysMsArray","DaysMsVec","DictionaryArray","DictionaryKey","FixedSizeBinaryArray","FixedSizeListArray","Float16Array","Float16Vec","Float32Array","Float32Vec","Float64Array","Float64Vec","GenericBinaryArray","Int128Array","Int128Vec","Int16Array","Int16Vec","Int256Array","Int256Vec","Int32Array","Int32Vec","Int64Array","Int64Vec","Int8Array","Int8Vec","KEY_TYPE","ListArray","ListValuesIter","MapArray","MonthsDaysNsArray","MonthsDaysNsVec","MutableArray","MutableBinaryArray","MutableBinaryValuesArray","MutableBooleanArray","MutableDictionaryArray","MutableFixedSizeBinaryArray","MutableFixedSizeListArray","MutableListArray","MutablePrimitiveArray","MutableStructArray","MutableUtf8Array","MutableUtf8ValuesArray","NullArray","PrimitiveArray","StructArray","TryExtend","TryExtendFromSelf","TryPush","UInt16Array","UInt16Vec","UInt32Array","UInt32Vec","UInt64Array","UInt64Vec","UInt8Array","UInt8Vec","UnionArray","Utf8Array","Utf8ValuesIter","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add","always_fits_usize","apply_validity","apply_validity","apply_values","apply_values_mut","arced","arced","arced","arced","arced","arced","arced","arced","arced","arced","arced","arced","array","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_ref","as_usize","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed","boxed_clone","boxed_clone","capacity","capacity","capacity","capacity","capacity","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","check_bounds","check_bounds","checked_add","checked_add","checked_add","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_rem","checked_rem","checked_sub","checked_sub","checked_sub","cjk_compat_variants","clean_for_polars","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default","default","default","default","default_data_type","default_data_type","default_data_type","default_data_type","default_datatype","default_datatype","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","div","div","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","extend","extend","extend","extend","extend","extend","extend_constant","extend_from_slice","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_values","extend_values","field","field","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_data_default","from_data_default","from_data_unchecked_default","from_data_unchecked_default","from_fd","from_filelike","from_into_filelike","from_into_socketlike","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_trusted_length","from_iter_values","from_iter_values","from_iter_values","from_iter_values","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_socketlike","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_values","from_vec","from_vec","get","get","get","get","get","get_child_field","get_child_length","get_child_type","get_display","get_fields","get_fields","get_mut_values","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_value_display","get_values_size","get_values_size","get_values_size","growable","index","index","index_unchecked","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc","into_box","into_box","into_data","into_data","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","into_mut","into_mut","into_mut","into_vec","is_dense","is_empty","is_empty","is_null","is_null_unchecked","is_null_unchecked","is_null_unchecked","is_null_unchecked","is_null_unchecked","is_ordered","is_sorted_and_unique","is_sparse","is_valid","is_valid","is_valid_unchecked","is_valid_unchecked","is_valid_unchecked","is_valid_unchecked","is_valid_unchecked","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter_typed","iter_values","key_value","keys","keys","keys","keys","keys_iter","keys_values_iter","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","length","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","map","map","map","mul","mul","mul","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","mut_values","mut_values","mut_values","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty_array","new_from","new_from","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null_array","new_unchecked","new_unchecked","new_unchecked","new_with_capacity","new_with_field","new_with_field","next","next_back","nfc","nfd","nfkc","nfkd","nth","null_count","offset","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","ord","overflowing_add","overflowing_add","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_mul","overflowing_mul","overflowing_sub","overflowing_sub","pop","pop","pop","pop","pop","pop","pop","push","push","push","push","push","push","push","push","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","rem","rem","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","reserve","saturating_add","saturating_add","saturating_add","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","set","set","set_unchecked","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_validity","set_values","set_values","set_values","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","size","size","size","size","size","size","size","size","size_hint","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","stream_safe","sub","sub","sub","to","to","to","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_boxed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_extend_from_self","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_iter","try_from_iter","try_from_iter","try_from_iter","try_from_keys","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_get_child","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new_unchecked","try_new_unchecked","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push_valid","try_push_valid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","types","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter_typed","values_mut_slice","values_mut_slice","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_capacities","with_capacities","with_capacities","with_capacities","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_from","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_values","with_values","wrapping_add","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_mul","wrapping_sub","Growable","GrowableBinary","GrowableBoolean","GrowableDictionary","GrowableFixedSizeBinary","GrowableFixedSizeList","GrowableList","GrowableNull","GrowablePrimitive","GrowableStruct","GrowableUnion","GrowableUtf8","arrays","arrays","arrays","arrays","arrays","arrays","arrays","arrays","arrays","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","data_type","data_type","data_type","data_type","data_type","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_null_bits","extend_null_bits","extend_null_bits","extend_null_bits","extend_null_bits","extend_null_bits","extend_null_bits","extend_null_bits","extend_null_bits","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","fields","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","key_validity","key_values","keys_values","len","len","len","len","len","len","len","len","len","len","len","len","length","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","make_growable","new","new","new","new","new","new","new","new","new","new","new","offsets","offsets","offsets","offsets","offsets","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","validity","validity","validity","validity","validity","validity","validity","validity","values","values","values","values","values","values","values","values","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","DynComparator","build_compare","total_cmp","total_cmp_f32","total_cmp_f64","Bitmap","IntoIter","MutableBitmap","__clone_box","__clone_box","__clone_box","and","as_slice","as_slice","as_slice_mut","az","az","az","binary","binary_assign","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","bytes","capacity","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","chunk_iter_to_vec","chunks","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","end","eq","eq","extend_constant","extend_from_bitmap","extend_from_slice","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","fmt","fmt","fmt","from","from","from","from","from","from","from_chunk_iter_unchecked","from_iter","from_iter","from_len_set","from_len_zeroed","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_u8_slice","from_u8_vec","from_vec","get","get","get_bit","get_bit_unchecked","index","init","init","init","into","into","into","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","is_empty","iter","iter","len","len","length","length","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","make_mut","new","new","new","new_zeroed","next","next_back","not","not","nth","null_count","null_count","null_count_range","offset","or","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pop","push","push_unchecked","quaternary","reserve","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","set","set_bit_unchecked","set_unchecked","shrink_to_fit","size_hint","slice","slice_unchecked","ternary","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","unary","unary_assign","unset_bits","unset_bits","unset_bits","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","utils","values","vzip","vzip","vzip","with_capacity","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","xor","BitChunk","BitChunkIterExact","BitChunks","BitChunksExact","BitChunksExactMut","BitmapIter","Optional","Required","SlicesIterator","ZipValidity","ZipValidityIter","__clone_box","__clone_box","__clone_box","__clone_box","az","az","az","az","az","az","az","bit_offset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed_clone","boxed_clone","bytes","bytes_for","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","check_bounds","check_bounds","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","chunk_iterator","chunks","cjk_compat_variants","cjk_compat_variants","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","count","count_zeros","current","current_byte","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","end","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ne_bytes","get_bit","get_bit_unchecked","index","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","into_vec","is_empty","is_set","iter","last_chunk","len","len","len","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","marker","mask","max_len","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","new","new","new","new","new","new","new_with_validity","next","next","next","next","next","next","next","next_back","next_back","next_back","nfc","nfc","nfd","nfd","nfkc","nfkc","nfkd","nfkd","nth","nth","nth","on_region","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","phantom","phantom","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder_bytes","remainder_iter","remainder_len","remainder_len","remainder_len","remainder_len","remainder_len","remainder_len","remainder_len","remaining","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","set","set_bit","set_bit_unchecked","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","slots","start","state","stream_safe","stream_safe","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_optional","unwrap_required","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","validity","values","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Buffer","__clone_box","arrow_deserialize","arrow_serialize","arrow_serialize","as_slice","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","data","data_type","data_type","default","deref","deref","deref_mut","downcast","drop","eq","fmt","from","from","from_iter","get_mut","init","into","into_iter","into_vec","is_empty","len","length","lossless_try_into","lossy_into","new","new_array","new_array","offset","offset","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","shared_count_strong","shared_count_weak","slice","slice_unchecked","to_owned","try_from","try_into","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Chunk","__clone_box","arrays","arrays","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","columns","deref","deref","deref_mut","downcast","drop","eq","equivalent","equivalent","flatten","fmt","from","init","into","into_arrays","is_empty","len","lossless_try_into","lossy_into","new","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","try_new","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","aggregate","arithmetics","arity","arity_assign","boolean","boolean_kleene","cast","comparison","concatenate","filter","if_then_else","take","MAX","MIN","SimdOrd","Sum","can_max","can_min","can_sum","estimated_bytes_size","max","max_binary","max_boolean","max_element","max_lane","max_primitive","max_string","min","min_binary","min_boolean","min_element","min_lane","min_primitive","min_string","new_max","new_min","simd_sum","sum","sum_primitive","ArrayAdd","ArrayCheckedAdd","ArrayCheckedDiv","ArrayCheckedMul","ArrayCheckedRem","ArrayCheckedSub","ArrayDiv","ArrayMul","ArrayOverflowingAdd","ArrayOverflowingMul","ArrayOverflowingSub","ArrayRem","ArraySaturatingAdd","ArraySaturatingMul","ArraySaturatingSub","ArraySub","ArrayWrappingAdd","ArrayWrappingMul","ArrayWrappingSub","add","add","add_scalar","basic","can_add","can_div","can_mul","can_neg","can_rem","can_sub","checked_add","checked_div","checked_mul","checked_rem","checked_sub","decimal","div","div","div_scalar","mul","mul","mul_scalar","neg","overflowing_add","overflowing_mul","overflowing_sub","rem","rem","saturating_add","saturating_mul","saturating_sub","sub","sub","sub_scalar","time","wrapping_add","wrapping_mul","wrapping_sub","NativeArithmetics","add","add_scalar","checked_add","checked_add_scalar","checked_div","checked_div_scalar","checked_mul","checked_mul_scalar","checked_negate","checked_powf_scalar","checked_rem","checked_rem_scalar","checked_sub","checked_sub_scalar","div","div_scalar","mul","mul_scalar","negate","overflowing_add","overflowing_add_scalar","overflowing_mul","overflowing_mul_scalar","overflowing_sub","overflowing_sub_scalar","powf_scalar","rem","rem_scalar","saturating_add","saturating_add_scalar","saturating_mul","saturating_mul_scalar","saturating_sub","saturating_sub_scalar","sub","sub_scalar","wrapping_add","wrapping_add_scalar","wrapping_mul","wrapping_mul_scalar","wrapping_negate","wrapping_sub","wrapping_sub_scalar","adaptive_add","adaptive_div","adaptive_mul","adaptive_sub","add","checked_add","checked_div","checked_mul","checked_sub","div","div_scalar","mul","mul_scalar","saturating_add","saturating_div","saturating_mul","saturating_sub","sub","add_duration","add_duration_scalar","add_interval","add_interval_scalar","sub_duration_scalar","sub_timestamps_scalar","subtract_duration","subtract_timestamps","binary","binary_checked","binary_with_bitmap","try_binary","try_unary","unary","unary_checked","unary_with_bitmap","binary","unary","all","and","and_scalar","any","is_not_null","is_null","not","or","or_scalar","all","and","and_scalar","any","or","or_scalar","CastOptions","__clone_box","az","binary_large_to_binary","binary_to_dictionary","binary_to_large_binary","binary_to_large_utf8","binary_to_primitive","binary_to_utf8","boolean_to_binary","boolean_to_primitive","boolean_to_utf8","borrow","borrow_mut","can_cast_types","cast","cast_from","checked_as","checked_cast_from","clone","clone_into","date32_to_date64","date64_to_date32","days_ms_to_months_days_ns","decimal_to_decimal","decimal_to_float","decimal_to_integer","default","deref","deref_mut","dictionary_to_dictionary_keys","dictionary_to_dictionary_values","dictionary_to_values","downcast","drop","f16_to_f32","float_to_decimal","fmt","from","init","integer_to_decimal","into","lossless_try_into","lossy_into","months_to_months_days_ns","naive_timestamp_to_utf8","overflowing_as","overflowing_cast_from","partial","partial_binary_to_primitive","partial_utf8_to_primitive","primitive_as_primitive","primitive_to_binary","primitive_to_boolean","primitive_to_dictionary","primitive_to_primitive","primitive_to_same_primitive","primitive_to_utf8","saturating_as","saturating_cast_from","time32_to_time64","time32ms_to_time32s","time32s_to_time32ms","time64_to_time32","time64ns_to_time64us","time64us_to_time64ns","timestamp_to_date32","timestamp_to_date64","timestamp_to_timestamp","timestamp_to_utf8","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","utf8_large_to_utf8","utf8_to_binary","utf8_to_date32","utf8_to_date64","utf8_to_dictionary","utf8_to_large_utf8","utf8_to_naive_timestamp_ns","utf8_to_primitive","utf8_to_timestamp_ns","vzip","wrapped","wrapping_as","wrapping_cast_from","wrapping_dictionary_to_dictionary_keys","wrapping_dictionary_to_dictionary_values","Simd","Simd8","Simd8Lanes","Simd8PartialEq","Simd8PartialOrd","binary","boolean","can_eq","can_eq_scalar","can_gt","can_gt_eq","can_gt_eq_scalar","can_gt_scalar","can_lt","can_lt_eq","can_lt_eq_scalar","can_lt_scalar","can_neq","can_neq_scalar","eq","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","finish_eq_validities","finish_neq_validities","from_chunk","from_incomplete_chunk","gt","gt","gt_eq","gt_eq","gt_eq_scalar","gt_scalar","lt","lt","lt_eq","lt_eq","lt_eq_scalar","lt_scalar","neq","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","primitive","utf8","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","compare_op_scalar","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","compare_op_scalar","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","concatenate","Filter","build_filter","filter","filter_chunk","if_then_else","can_take","take","Binary","Binary","Boolean","Boolean","DataType","Date32","Date64","DayTime","DaysMs","Decimal","Decimal256","Dense","Dictionary","Dictionary","Duration","Extension","Field","FixedSizeBinary","FixedSizeBinary","FixedSizeList","FixedSizeList","Float16","Float16","Float32","Float32","Float64","Float64","Int128","Int16","Int16","Int16","Int256","Int32","Int32","Int32","Int64","Int64","Int64","Int8","Int8","Int8","IntegerType","Interval","IntervalUnit","LargeBinary","LargeBinary","LargeList","LargeList","LargeUtf8","LargeUtf8","List","List","Map","Map","Metadata","Microsecond","Millisecond","MonthDayNano","MonthDayNano","Nanosecond","Null","Null","PhysicalType","Primitive","PrimitiveType","Schema","SchemaRef","Second","Sparse","Struct","Struct","Time32","Time64","TimeUnit","Timestamp","UInt16","UInt16","UInt16","UInt32","UInt32","UInt32","UInt64","UInt64","UInt64","UInt8","UInt8","UInt8","Union","Union","UnionMode","Utf8","Utf8","YearMonth","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_primitive","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fields","filter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_extension","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","hash","index_of","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","is_dense","is_nullable","is_sparse","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","metadata","metadata","name","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","sparse","to_logical_type","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_metadata","with_metadata","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Error","External","ExternalFormat","InvalidArgumentError","Io","NotYetImplemented","OutOfSpec","Overflow","Result","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","fmt","fmt","from","from","from","from","from","from","from","from","from_external_error","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","provide","saturating_as","saturating_cast_from","to_string","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","ArrowArray","ArrowArrayStream","ArrowArrayStreamReader","ArrowSchema","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","children","children","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dictionary","dictionary","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","empty","empty","empty","export_array_to_c","export_field_to_c","export_iterator","field","field","flags","fmt","fmt","fmt","format","from","from","from","from","get_last_error","get_next","get_schema","import_array_from_c","import_field_from_c","init","init","init","init","into","into","into","into","iter","length","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","metadata","mmap","n_buffers","n_children","n_children","name","next","null_count","offset","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","private_data","private_data","private_data","release","release","release","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","slice","ipc","print","IpcField","IpcSchema","__clone_box","__clone_box","append","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","dictionary_id","downcast","downcast","drop","drop","eq","eq","fields","fields","fmt","fmt","from","from","init","init","into","into","is_little_endian","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","read","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","write","Dictionaries","ExpectedBuffer","FileMetadata","FileReader","InvalidBitmap","InvalidBuffer","InvalidBuffersLength","InvalidFlatbufferBlock","InvalidFlatbufferBodyLength","InvalidFlatbufferBuffers","InvalidFlatbufferCompression","InvalidFlatbufferData","InvalidFlatbufferDictionaries","InvalidFlatbufferFooter","InvalidFlatbufferHeader","InvalidFlatbufferId","InvalidFlatbufferIsDelta","InvalidFlatbufferMessage","InvalidFlatbufferNodes","InvalidFlatbufferRecordBatches","InvalidFlatbufferSchema","InvalidFlatbufferVersion","InvalidFooter","InvalidHeader","InvalidId","InvalidIdDataType","MissingData","MissingFields","MissingMessageBuffers","MissingMessageHeader","MissingMessageNodes","MissingRecordBatches","MissingSchema","NegativeFooterLength","OutOfSpecKind","Some","StreamMetadata","StreamReader","StreamState","UnexpectedMessageType","UnexpectedNegativeInteger","Waiting","__clone_box","__clone_box","az","az","az","az","az","az","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","current_block","data_buffer","data_scratch","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize_schema","dictionaries","dictionaries","dictionaries","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","finished","fmt","fmt","fmt","from","from","from","from","from","from","get_scratches","init","init","init","init","init","init","into","into","into","into","into","into","into_inner","into_iter","into_iter","ipc_schema","ipc_schema","is_finished","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","message_buffer","message_scratch","metadata","metadata","metadata","metadata","new","new","next","next","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","projection","projection","read_batch","read_file_dictionaries","read_file_metadata","read_stream_metadata","reader","reader","remaining","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","schema","schema","schema","schema","scratch","set_scratches","size","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","version","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","buffer_length","buffers_size","file_size","length","length","number_of_bits","requested_id","requested_id","required_number_of_bytes","type_name","Compression","FileWriter","LZ4","Record","StreamWriter","WriteOptions","ZSTD","__clone_box","__clone_box","__clone_box","az","az","az","az","az","block_offsets","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","columns","columns","compression","default","default_ipc_fields","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dictionary_blocks","dictionary_tracker","dictionary_tracker","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","encoded_message","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fields","fields","finish","finish","finished","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_hash","get_hash","get_scratches","hash","hash","init","init","init","init","init","into","into","into","into","into","into_inner","into_inner","ipc_fields","ipc_fields","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","new","new","options","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","record_blocks","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","schema","schema_to_bytes","set_scratches","start","start","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from_file","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write","write","write","write_options","writer","writer","write","mmap_dictionaries_unchecked","mmap_unchecked","IS_LARGE","Offset","Offsets","OffsetsBuffer","__clone_box","__clone_box","as_slice","as_slice","az","az","borrow","borrow","borrow_mut","borrow_mut","buffer","capacity","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","eq","equivalent","equivalent","extend_constant","fmt","fmt","from","from","from","from","from","get_mut","init","init","into","into","into_inner","into_inner","last","last","len","len","len_proxy","lengths","lossless_try_into","lossless_try_into","lossy_into","lossy_into","new","new","new_unchecked","new_unchecked","new_zeroed","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","pop","reserve","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","shrink_to_fit","slice_unchecked","start_end","start_end","start_end_unchecked","start_end_unchecked","to_owned","to_owned","try_extend_from_lengths","try_extend_from_self","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_iter","try_from_lengths","try_into","try_into","try_push","try_push_usize","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","with_capacity","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","BinaryScalar","BooleanScalar","DictionaryScalar","FixedSizeBinaryScalar","FixedSizeListScalar","ListScalar","NullScalar","PrimitiveScalar","Scalar","StructScalar","UnionScalar","Utf8Scalar","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","new","new","new","new","new","new","new","new","new","new","new","new_scalar","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","phantom","phantom","phantom","phantom","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","value","value","value","value","value","value","value","value","value","value","value","value","value","value","values","values","values","values","values","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","EPOCH_DAYS_FROM_CE","MICROSECONDS","MILLISECONDS","MILLISECONDS_IN_DAY","NANOSECONDS","SECONDS_IN_DAY","add_interval","add_naive_interval","date32_to_date","date32_to_datetime","date64_to_date","date64_to_datetime","parse_offset","time32ms_to_time","time32s_to_time","time64ns_to_time","time64us_to_time","timestamp_ms_to_datetime","timestamp_ns_to_datetime","timestamp_s_to_datetime","timestamp_to_datetime","timestamp_to_naive_datetime","timestamp_us_to_datetime","timeunit_scale","utf8_to_naive_timestamp_ns","utf8_to_naive_timestamp_ns_scalar","utf8_to_timestamp_ns","utf8_to_timestamp_ns_scalar","TrustedLen","BitChunk","BitChunkIter","BitChunkOnes","Bytes","DaysMs","EPSILON","Float16","Float32","Float64","IS_LARGE","Index","IndexRange","Int128","Int16","Int256","Int32","Int64","Int8","MonthDayNano","NativeType","Offset","PRIMITIVE","PrimitiveType","UInt16","UInt32","UInt64","UInt8","__clone_box","__clone_box","__clone_box","__clone_box","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","cjk_compat_variants","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","days","days","days_ms","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","end","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","f16","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_as_usize","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_bits","from_f32","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_ne_bytes","from_usize","from_words","get_hash","get_hash","get_hash","hash","hash","hash","i256","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_vec","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","mask","milliseconds","months","months_days_ns","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","neg","neg","neg","new","new","new","new","new","next","next","next","nfc","nfd","nfkc","nfkd","ns","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","range","remaining","remaining","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","simd","size_hint","size_hint","size_hint","start","stream_safe","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_bits","to_f32","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Chunk","FromMaskChunk","LANES","Mask","Native","NativeSimd","Simd","Simd","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","align","align","align","align","align","align","align","align","align","align","align","align","align","align","align","align","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","days_msx8","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","f16x32","f32x16","f64x8","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","i128x8","i16x32","i256x8","i32x16","i64x8","i8x64","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","max_lane","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","min_lane","months_days_nsx8","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u16x32","u32x16","u64x8","u8x64","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","lexical_to_bytes","lexical_to_bytes_mut","lexical_to_string","ArrowDeserialize","ArrowField","ArrowSerialize","arrow_enable_vec_for_type","deserialize","field","serialize","ArrayType","ArrowDeserialize","TryIntoCollection","arrow_array_deserialize_iterator","arrow_array_deserialize_iterator_as_type","arrow_deserialize","try_into_collection","try_into_collection_as_type","ArrowField","FixedSizeBinary","FixedSizeVec","I128","LargeBinary","LargeString","LargeVec","Type","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_enable_vec_for_type","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","d","d","data_type","data_type","data_type","data_type","data_type","data_type","data_type","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","new_array","new_array","new_array","new_array","new_array","new_array","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","ArrowSerialize","FlattenChunk","MutableArrayType","TryIntoArrow","arrow_serialize","arrow_serialize_to_mutable_array","flatten","new_array","try_into_arrow","try_into_arrow_as_type","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","AXES","Affine2","Affine3A","BVec2","BVec3","BVec3A","BVec4","BVec4A","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","EulerRot","FALSE","FALSE","FALSE","FALSE","FALSE","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IDENTITY","IVec2","IVec3","IVec4","Mat2","Mat3","Mat3A","Mat4","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NAN","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_ONE","NEG_W","NEG_W","NEG_W","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_X","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Y","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","NEG_Z","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","Quat","TRUE","TRUE","TRUE","TRUE","TRUE","UVec2","UVec3","UVec4","Vec2","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3","Vec3A","Vec3Swizzles","Vec4","Vec4","Vec4","Vec4Swizzles","W","W","W","W","X","X","X","X","X","X","X","X","X","X","X","X","X","XYZ","XZY","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","YXZ","YZX","Z","Z","Z","Z","Z","Z","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZXY","ZYX","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mat2","add_mat2","add_mat3","add_mat3","add_mat3","add_mat4","add_mat4","all","all","all","all","all","angle","angle_between","angle_between","angle_between","angle_between","angle_between","angle_between","angle_between","any","any","any","any","any","any_orthogonal_vector","any_orthogonal_vector","any_orthogonal_vector","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_pair","any_orthonormal_vector","any_orthonormal_vector","any_orthonormal_vector","as_dmat2","as_dmat3","as_dmat3","as_dmat4","as_dvec2","as_dvec2","as_dvec2","as_dvec3","as_dvec3","as_dvec3","as_dvec3","as_dvec4","as_dvec4","as_dvec4","as_f32","as_f64","as_ivec2","as_ivec2","as_ivec2","as_ivec3","as_ivec3","as_ivec3","as_ivec3","as_ivec4","as_ivec4","as_ivec4","as_mat2","as_mat3","as_mat4","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_uvec2","as_uvec2","as_uvec2","as_uvec3","as_uvec3","as_uvec3","as_uvec3","as_uvec4","as_uvec4","as_uvec4","as_vec2","as_vec2","as_vec2","as_vec3","as_vec3","as_vec3","as_vec3a","as_vec3a","as_vec3a","as_vec4","as_vec4","as_vec4","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","back","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","ceil","ceil","ceil","ceil","ceil","ceil","ceil","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_max","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clamp_length_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpeq","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpge","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmpgt","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmple","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmplt","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","cmpne","col","col","col","col","col","col","col","col_mut","col_mut","col_mut","col_mut","col_mut","col_mut","col_mut","conjugate","conjugate","cross","cross","cross","cross","cross","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","determinant","determinant","determinant","determinant","distance","distance","distance","distance","distance","distance","distance","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","distance_squared","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dmat2","dmat3","dmat4","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","dot_into_vec","down","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","dquat","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dvec2","dvec3","dvec4","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exp","exp","exp","exp","exp","exp","exp","extend","extend","extend","extend","extend","extend","extend","extend","extend","f32","f64","floor","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","fract","fract","fract","fract","fract","fract","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_affine3","from_affine3","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle","from_angle_translation","from_angle_translation","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_array_2d","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_cols_slice","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_diagonal","from_euler","from_euler","from_euler","from_euler","from_euler","from_euler","from_euler","from_mat2","from_mat2","from_mat2","from_mat2","from_mat2","from_mat2_translation","from_mat2_translation","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3","from_mat3_translation","from_mat3_translation","from_mat3a","from_mat3a","from_mat3a","from_mat3a","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_mat4","from_quat","from_quat","from_quat","from_quat","from_quat","from_quat","from_quat","from_rotation_arc","from_rotation_arc","from_rotation_arc_2d","from_rotation_arc_2d","from_rotation_arc_colinear","from_rotation_arc_colinear","from_rotation_translation","from_rotation_translation","from_rotation_translation","from_rotation_translation","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_x","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_y","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_rotation_z","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale","from_scale_angle","from_scale_angle","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_angle_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scale_rotation_translation","from_scaled_axis","from_scaled_axis","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_translation","from_vec4","from_vec4","from_xyzw","from_xyzw","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","has_equal_components","has_equal_components","has_equal_components","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i32","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_nan_mask","is_near_identity","is_near_identity","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_negative_bitmask","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_normalized","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","ivec2","ivec3","ivec4","left","length","length","length","length","length","length","length","length","length","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_recip","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","length_squared","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","ln","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_to_lh","look_to_lh","look_to_lh","look_to_lh","look_to_rh","look_to_rh","look_to_rh","look_to_rh","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","mat2","mat3","mat3a","mat4","matrix2","matrix2","matrix3","matrix3","max","max","max","max","max","max","max","max","max","max","max","max","max","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","mean","mean","mean","min","min","min","min","min","min","min","min","min","min","min","min","min","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_mat2","mul_mat2","mul_mat3","mul_mat3","mul_mat3","mul_mat4","mul_mat4","mul_quat","mul_quat","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_vec2","mul_vec2","mul_vec3","mul_vec3","mul_vec3","mul_vec3","mul_vec3","mul_vec3a","mul_vec3a","mul_vec3a","mul_vec4","mul_vec4","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","normalize_or_zero","not","not","not","not","not","not","not","not","not","not","not","orthographic_lh","orthographic_lh","orthographic_rh","orthographic_rh","orthographic_rh_gl","orthographic_rh_gl","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","perp","perp","perp","perp_dot","perp_dot","perp_dot","perspective_infinite_lh","perspective_infinite_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_lh","perspective_infinite_reverse_rh","perspective_infinite_reverse_rh","perspective_infinite_rh","perspective_infinite_rh","perspective_lh","perspective_lh","perspective_rh","perspective_rh","perspective_rh_gl","perspective_rh_gl","powf","powf","powf","powf","powf","powf","powf","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_onto_normalized","project_point3","project_point3","quat","recip","recip","recip","recip","recip","recip","recip","reflect","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","reject_from_normalized","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","right","rotate","rotate","rotate","rotate_negative_z_towards","rotate_positive_z_towards","round","round","round","round","round","round","round","row","row","row","row","row","row","row","saturate","saturate","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","select","select","select","select","select","select","select","select","select","select","select","select","select","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","slerp","slerp","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","sqrt","sqrt","step","step","step","step_select","step_select","step_select","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_mat2","sub_mat2","sub_mat3","sub_mat3","sub_mat3","sub_mat4","sub_mat4","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swizzles","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_axis_angle","to_axis_angle","to_bits","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_cols_array_2d","to_euler","to_euler","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scale_rotation_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scale_rotation_translation","to_scaled_axis","to_scaled_axis","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transform_point2","transform_point2","transform_point2","transform_point2","transform_point2","transform_point3","transform_point3","transform_point3","transform_point3","transform_point3a","transform_point3a","transform_vector2","transform_vector2","transform_vector2","transform_vector2","transform_vector2","transform_vector3","transform_vector3","transform_vector3","transform_vector3","transform_vector3a","transform_vector3a","translation","translation","translation","translation","transpose","transpose","transpose","transpose","transpose","transpose","transpose","trunc","trunc","trunc","truncate","truncate","truncate","truncate","truncate","truncate","truncate","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","try_normalize","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u32","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","up","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","uvec2","uvec3","uvec4","vec2","vec3","vec3a","vec4","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","w","w","w","w_axis","w_axis","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_cols_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","write_to_slice","ww","ww","ww","ww","ww","www","www","www","www","www","wwww","wwww","wwww","wwww","wwww","wwwx","wwwx","wwwx","wwwx","wwwx","wwwy","wwwy","wwwy","wwwy","wwwy","wwwz","wwwz","wwwz","wwwz","wwwz","wwx","wwx","wwx","wwx","wwx","wwxw","wwxw","wwxw","wwxw","wwxw","wwxx","wwxx","wwxx","wwxx","wwxx","wwxy","wwxy","wwxy","wwxy","wwxy","wwxz","wwxz","wwxz","wwxz","wwxz","wwy","wwy","wwy","wwy","wwy","wwyw","wwyw","wwyw","wwyw","wwyw","wwyx","wwyx","wwyx","wwyx","wwyx","wwyy","wwyy","wwyy","wwyy","wwyy","wwyz","wwyz","wwyz","wwyz","wwyz","wwz","wwz","wwz","wwz","wwz","wwzw","wwzw","wwzw","wwzw","wwzw","wwzx","wwzx","wwzx","wwzx","wwzx","wwzy","wwzy","wwzy","wwzy","wwzy","wwzz","wwzz","wwzz","wwzz","wwzz","wx","wx","wx","wx","wx","wxw","wxw","wxw","wxw","wxw","wxww","wxww","wxww","wxww","wxww","wxwx","wxwx","wxwx","wxwx","wxwx","wxwy","wxwy","wxwy","wxwy","wxwy","wxwz","wxwz","wxwz","wxwz","wxwz","wxx","wxx","wxx","wxx","wxx","wxxw","wxxw","wxxw","wxxw","wxxw","wxxx","wxxx","wxxx","wxxx","wxxx","wxxy","wxxy","wxxy","wxxy","wxxy","wxxz","wxxz","wxxz","wxxz","wxxz","wxy","wxy","wxy","wxy","wxy","wxyw","wxyw","wxyw","wxyw","wxyw","wxyx","wxyx","wxyx","wxyx","wxyx","wxyy","wxyy","wxyy","wxyy","wxyy","wxyz","wxyz","wxyz","wxyz","wxyz","wxz","wxz","wxz","wxz","wxz","wxzw","wxzw","wxzw","wxzw","wxzw","wxzx","wxzx","wxzx","wxzx","wxzx","wxzy","wxzy","wxzy","wxzy","wxzy","wxzz","wxzz","wxzz","wxzz","wxzz","wy","wy","wy","wy","wy","wyw","wyw","wyw","wyw","wyw","wyww","wyww","wyww","wyww","wyww","wywx","wywx","wywx","wywx","wywx","wywy","wywy","wywy","wywy","wywy","wywz","wywz","wywz","wywz","wywz","wyx","wyx","wyx","wyx","wyx","wyxw","wyxw","wyxw","wyxw","wyxw","wyxx","wyxx","wyxx","wyxx","wyxx","wyxy","wyxy","wyxy","wyxy","wyxy","wyxz","wyxz","wyxz","wyxz","wyxz","wyy","wyy","wyy","wyy","wyy","wyyw","wyyw","wyyw","wyyw","wyyw","wyyx","wyyx","wyyx","wyyx","wyyx","wyyy","wyyy","wyyy","wyyy","wyyy","wyyz","wyyz","wyyz","wyyz","wyyz","wyz","wyz","wyz","wyz","wyz","wyzw","wyzw","wyzw","wyzw","wyzw","wyzx","wyzx","wyzx","wyzx","wyzx","wyzy","wyzy","wyzy","wyzy","wyzy","wyzz","wyzz","wyzz","wyzz","wyzz","wz","wz","wz","wz","wz","wzw","wzw","wzw","wzw","wzw","wzww","wzww","wzww","wzww","wzww","wzwx","wzwx","wzwx","wzwx","wzwx","wzwy","wzwy","wzwy","wzwy","wzwy","wzwz","wzwz","wzwz","wzwz","wzwz","wzx","wzx","wzx","wzx","wzx","wzxw","wzxw","wzxw","wzxw","wzxw","wzxx","wzxx","wzxx","wzxx","wzxx","wzxy","wzxy","wzxy","wzxy","wzxy","wzxz","wzxz","wzxz","wzxz","wzxz","wzy","wzy","wzy","wzy","wzy","wzyw","wzyw","wzyw","wzyw","wzyw","wzyx","wzyx","wzyx","wzyx","wzyx","wzyy","wzyy","wzyy","wzyy","wzyy","wzyz","wzyz","wzyz","wzyz","wzyz","wzz","wzz","wzz","wzz","wzz","wzzw","wzzw","wzzw","wzzw","wzzw","wzzx","wzzx","wzzx","wzzx","wzzx","wzzy","wzzy","wzzy","wzzy","wzzy","wzzz","wzzz","wzzz","wzzz","wzzz","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x_axis","x_axis","x_axis","x_axis","x_axis","x_axis","xw","xw","xw","xw","xw","xww","xww","xww","xww","xww","xwww","xwww","xwww","xwww","xwww","xwwx","xwwx","xwwx","xwwx","xwwx","xwwy","xwwy","xwwy","xwwy","xwwy","xwwz","xwwz","xwwz","xwwz","xwwz","xwx","xwx","xwx","xwx","xwx","xwxw","xwxw","xwxw","xwxw","xwxw","xwxx","xwxx","xwxx","xwxx","xwxx","xwxy","xwxy","xwxy","xwxy","xwxy","xwxz","xwxz","xwxz","xwxz","xwxz","xwy","xwy","xwy","xwy","xwy","xwyw","xwyw","xwyw","xwyw","xwyw","xwyx","xwyx","xwyx","xwyx","xwyx","xwyy","xwyy","xwyy","xwyy","xwyy","xwyz","xwyz","xwyz","xwyz","xwyz","xwz","xwz","xwz","xwz","xwz","xwzw","xwzw","xwzw","xwzw","xwzw","xwzx","xwzx","xwzx","xwzx","xwzx","xwzy","xwzy","xwzy","xwzy","xwzy","xwzz","xwzz","xwzz","xwzz","xwzz","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xx","xxw","xxw","xxw","xxw","xxw","xxww","xxww","xxww","xxww","xxww","xxwx","xxwx","xxwx","xxwx","xxwx","xxwy","xxwy","xxwy","xxwy","xxwy","xxwz","xxwz","xxwz","xxwz","xxwz","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxx","xxxw","xxxw","xxxw","xxxw","xxxw","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxy","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxxz","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxy","xxyw","xxyw","xxyw","xxyw","xxyw","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyy","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxyz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxz","xxzw","xxzw","xxzw","xxzw","xxzw","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzx","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzy","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xxzz","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xy","xyw","xyw","xyw","xyw","xyw","xyww","xyww","xyww","xyww","xyww","xywx","xywx","xywx","xywx","xywx","xywy","xywy","xywy","xywy","xywy","xywz","xywz","xywz","xywz","xywz","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyx","xyxw","xyxw","xyxw","xyxw","xyxw","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxy","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyxz","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyy","xyyw","xyyw","xyyw","xyyw","xyyw","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyy","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyz","xyzw","xyzw","xyzw","xyzw","xyzw","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzx","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzy","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xyzz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xz","xzw","xzw","xzw","xzw","xzw","xzww","xzww","xzww","xzww","xzww","xzwx","xzwx","xzwx","xzwx","xzwx","xzwy","xzwy","xzwy","xzwy","xzwy","xzwz","xzwz","xzwz","xzwz","xzwz","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzx","xzxw","xzxw","xzxw","xzxw","xzxw","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxx","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxy","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzxz","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzy","xzyw","xzyw","xzyw","xzyw","xzyw","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyx","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyy","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzyz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzz","xzzw","xzzw","xzzw","xzzw","xzzw","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzx","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzy","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","xzzz","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y","y_axis","y_axis","y_axis","y_axis","y_axis","y_axis","yw","yw","yw","yw","yw","yww","yww","yww","yww","yww","ywww","ywww","ywww","ywww","ywww","ywwx","ywwx","ywwx","ywwx","ywwx","ywwy","ywwy","ywwy","ywwy","ywwy","ywwz","ywwz","ywwz","ywwz","ywwz","ywx","ywx","ywx","ywx","ywx","ywxw","ywxw","ywxw","ywxw","ywxw","ywxx","ywxx","ywxx","ywxx","ywxx","ywxy","ywxy","ywxy","ywxy","ywxy","ywxz","ywxz","ywxz","ywxz","ywxz","ywy","ywy","ywy","ywy","ywy","ywyw","ywyw","ywyw","ywyw","ywyw","ywyx","ywyx","ywyx","ywyx","ywyx","ywyy","ywyy","ywyy","ywyy","ywyy","ywyz","ywyz","ywyz","ywyz","ywyz","ywz","ywz","ywz","ywz","ywz","ywzw","ywzw","ywzw","ywzw","ywzw","ywzx","ywzx","ywzx","ywzx","ywzx","ywzy","ywzy","ywzy","ywzy","ywzy","ywzz","ywzz","ywzz","ywzz","ywzz","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yx","yxw","yxw","yxw","yxw","yxw","yxww","yxww","yxww","yxww","yxww","yxwx","yxwx","yxwx","yxwx","yxwx","yxwy","yxwy","yxwy","yxwy","yxwy","yxwz","yxwz","yxwz","yxwz","yxwz","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxx","yxxw","yxxw","yxxw","yxxw","yxxw","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxy","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxxz","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxy","yxyw","yxyw","yxyw","yxyw","yxyw","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyy","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxyz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxz","yxzw","yxzw","yxzw","yxzw","yxzw","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzx","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzy","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yxzz","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yy","yyw","yyw","yyw","yyw","yyw","yyww","yyww","yyww","yyww","yyww","yywx","yywx","yywx","yywx","yywx","yywy","yywy","yywy","yywy","yywy","yywz","yywz","yywz","yywz","yywz","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyx","yyxw","yyxw","yyxw","yyxw","yyxw","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxy","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyxz","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyy","yyyw","yyyw","yyyw","yyyw","yyyw","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyy","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyz","yyzw","yyzw","yyzw","yyzw","yyzw","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzx","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzy","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yyzz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yz","yzw","yzw","yzw","yzw","yzw","yzww","yzww","yzww","yzww","yzww","yzwx","yzwx","yzwx","yzwx","yzwx","yzwy","yzwy","yzwy","yzwy","yzwy","yzwz","yzwz","yzwz","yzwz","yzwz","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzx","yzxw","yzxw","yzxw","yzxw","yzxw","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxx","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxy","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzxz","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzy","yzyw","yzyw","yzyw","yzyw","yzyw","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyx","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyy","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzyz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzz","yzzw","yzzw","yzzw","yzzw","yzzw","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzx","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzy","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","yzzz","z","z","z","z","z","z","z","z","z","z","z_axis","z_axis","z_axis","z_axis","z_axis","zw","zw","zw","zw","zw","zww","zww","zww","zww","zww","zwww","zwww","zwww","zwww","zwww","zwwx","zwwx","zwwx","zwwx","zwwx","zwwy","zwwy","zwwy","zwwy","zwwy","zwwz","zwwz","zwwz","zwwz","zwwz","zwx","zwx","zwx","zwx","zwx","zwxw","zwxw","zwxw","zwxw","zwxw","zwxx","zwxx","zwxx","zwxx","zwxx","zwxy","zwxy","zwxy","zwxy","zwxy","zwxz","zwxz","zwxz","zwxz","zwxz","zwy","zwy","zwy","zwy","zwy","zwyw","zwyw","zwyw","zwyw","zwyw","zwyx","zwyx","zwyx","zwyx","zwyx","zwyy","zwyy","zwyy","zwyy","zwyy","zwyz","zwyz","zwyz","zwyz","zwyz","zwz","zwz","zwz","zwz","zwz","zwzw","zwzw","zwzw","zwzw","zwzw","zwzx","zwzx","zwzx","zwzx","zwzx","zwzy","zwzy","zwzy","zwzy","zwzy","zwzz","zwzz","zwzz","zwzz","zwzz","zx","zx","zx","zx","zx","zx","zx","zx","zx","zx","zx","zxw","zxw","zxw","zxw","zxw","zxww","zxww","zxww","zxww","zxww","zxwx","zxwx","zxwx","zxwx","zxwx","zxwy","zxwy","zxwy","zxwy","zxwy","zxwz","zxwz","zxwz","zxwz","zxwz","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxx","zxxw","zxxw","zxxw","zxxw","zxxw","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxx","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxy","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxxz","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxy","zxyw","zxyw","zxyw","zxyw","zxyw","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyx","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyy","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxyz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxz","zxzw","zxzw","zxzw","zxzw","zxzw","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzx","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzy","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zxzz","zy","zy","zy","zy","zy","zy","zy","zy","zy","zy","zy","zyw","zyw","zyw","zyw","zyw","zyww","zyww","zyww","zyww","zyww","zywx","zywx","zywx","zywx","zywx","zywy","zywy","zywy","zywy","zywy","zywz","zywz","zywz","zywz","zywz","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyx","zyxw","zyxw","zyxw","zyxw","zyxw","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxx","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxy","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyxz","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyy","zyyw","zyyw","zyyw","zyyw","zyyw","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyx","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyy","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyz","zyzw","zyzw","zyzw","zyzw","zyzw","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzx","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzy","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zyzz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zz","zzw","zzw","zzw","zzw","zzw","zzww","zzww","zzww","zzww","zzww","zzwx","zzwx","zzwx","zzwx","zzwx","zzwy","zzwy","zzwy","zzwy","zzwy","zzwz","zzwz","zzwz","zzwz","zzwz","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzx","zzxw","zzxw","zzxw","zzxw","zzxw","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxx","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxy","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzxz","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzy","zzyw","zzyw","zzyw","zzyw","zzyw","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyx","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyy","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzyz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzz","zzzw","zzzw","zzzw","zzzw","zzzw","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzx","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzy","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","zzzz","BVec2","BVec3","BVec3A","BVec4","BVec4A","w","x","x","x","y","y","y","z","z","Affine2","Affine3A","Mat2","Mat3","Mat3A","Mat4","Quat","Vec2","Vec3","Vec3A","Vec4","mat2","mat3","mat3a","mat4","matrix2","matrix3","quat","translation","translation","vec2","vec3","vec3a","vec4","w_axis","x","x","x_axis","x_axis","x_axis","y","y","y_axis","y_axis","y_axis","z","z_axis","z_axis","z_axis","DAffine2","DAffine3","DMat2","DMat3","DMat4","DQuat","DVec2","DVec3","DVec4","dmat2","dmat3","dmat4","dquat","dvec2","dvec3","dvec4","matrix2","matrix3","translation","translation","w","w","w_axis","x","x","x","x","x_axis","x_axis","x_axis","y","y","y","y","y_axis","y_axis","y_axis","z","z","z","z_axis","z_axis","IVec2","IVec3","IVec4","ivec2","ivec3","ivec4","w","x","x","x","y","y","y","z","z","Vec2","Vec2","Vec2Swizzles","Vec3","Vec3","Vec3Swizzles","Vec4","Vec4","Vec4Swizzles","ww","www","wwww","wwwx","wwwy","wwwz","wwx","wwxw","wwxx","wwxy","wwxz","wwy","wwyw","wwyx","wwyy","wwyz","wwz","wwzw","wwzx","wwzy","wwzz","wx","wxw","wxww","wxwx","wxwy","wxwz","wxx","wxxw","wxxx","wxxy","wxxz","wxy","wxyw","wxyx","wxyy","wxyz","wxz","wxzw","wxzx","wxzy","wxzz","wy","wyw","wyww","wywx","wywy","wywz","wyx","wyxw","wyxx","wyxy","wyxz","wyy","wyyw","wyyx","wyyy","wyyz","wyz","wyzw","wyzx","wyzy","wyzz","wz","wzw","wzww","wzwx","wzwy","wzwz","wzx","wzxw","wzxx","wzxy","wzxz","wzy","wzyw","wzyx","wzyy","wzyz","wzz","wzzw","wzzx","wzzy","wzzz","xw","xww","xwww","xwwx","xwwy","xwwz","xwx","xwxw","xwxx","xwxy","xwxz","xwy","xwyw","xwyx","xwyy","xwyz","xwz","xwzw","xwzx","xwzy","xwzz","xx","xx","xx","xxw","xxww","xxwx","xxwy","xxwz","xxx","xxx","xxx","xxxw","xxxx","xxxx","xxxx","xxxy","xxxy","xxxy","xxxz","xxxz","xxy","xxy","xxy","xxyw","xxyx","xxyx","xxyx","xxyy","xxyy","xxyy","xxyz","xxyz","xxz","xxz","xxzw","xxzx","xxzx","xxzy","xxzy","xxzz","xxzz","xy","xy","xy","xyw","xyww","xywx","xywy","xywz","xyx","xyx","xyx","xyxw","xyxx","xyxx","xyxx","xyxy","xyxy","xyxy","xyxz","xyxz","xyy","xyy","xyy","xyyw","xyyx","xyyx","xyyx","xyyy","xyyy","xyyy","xyyz","xyyz","xyz","xyz","xyzw","xyzx","xyzx","xyzy","xyzy","xyzz","xyzz","xz","xz","xzw","xzww","xzwx","xzwy","xzwz","xzx","xzx","xzxw","xzxx","xzxx","xzxy","xzxy","xzxz","xzxz","xzy","xzy","xzyw","xzyx","xzyx","xzyy","xzyy","xzyz","xzyz","xzz","xzz","xzzw","xzzx","xzzx","xzzy","xzzy","xzzz","xzzz","yw","yww","ywww","ywwx","ywwy","ywwz","ywx","ywxw","ywxx","ywxy","ywxz","ywy","ywyw","ywyx","ywyy","ywyz","ywz","ywzw","ywzx","ywzy","ywzz","yx","yx","yx","yxw","yxww","yxwx","yxwy","yxwz","yxx","yxx","yxx","yxxw","yxxx","yxxx","yxxx","yxxy","yxxy","yxxy","yxxz","yxxz","yxy","yxy","yxy","yxyw","yxyx","yxyx","yxyx","yxyy","yxyy","yxyy","yxyz","yxyz","yxz","yxz","yxzw","yxzx","yxzx","yxzy","yxzy","yxzz","yxzz","yy","yy","yy","yyw","yyww","yywx","yywy","yywz","yyx","yyx","yyx","yyxw","yyxx","yyxx","yyxx","yyxy","yyxy","yyxy","yyxz","yyxz","yyy","yyy","yyy","yyyw","yyyx","yyyx","yyyx","yyyy","yyyy","yyyy","yyyz","yyyz","yyz","yyz","yyzw","yyzx","yyzx","yyzy","yyzy","yyzz","yyzz","yz","yz","yzw","yzww","yzwx","yzwy","yzwz","yzx","yzx","yzxw","yzxx","yzxx","yzxy","yzxy","yzxz","yzxz","yzy","yzy","yzyw","yzyx","yzyx","yzyy","yzyy","yzyz","yzyz","yzz","yzz","yzzw","yzzx","yzzx","yzzy","yzzy","yzzz","yzzz","zw","zww","zwww","zwwx","zwwy","zwwz","zwx","zwxw","zwxx","zwxy","zwxz","zwy","zwyw","zwyx","zwyy","zwyz","zwz","zwzw","zwzx","zwzy","zwzz","zx","zx","zxw","zxww","zxwx","zxwy","zxwz","zxx","zxx","zxxw","zxxx","zxxx","zxxy","zxxy","zxxz","zxxz","zxy","zxy","zxyw","zxyx","zxyx","zxyy","zxyy","zxyz","zxyz","zxz","zxz","zxzw","zxzx","zxzx","zxzy","zxzy","zxzz","zxzz","zy","zy","zyw","zyww","zywx","zywy","zywz","zyx","zyx","zyxw","zyxx","zyxx","zyxy","zyxy","zyxz","zyxz","zyy","zyy","zyyw","zyyx","zyyx","zyyy","zyyy","zyyz","zyyz","zyz","zyz","zyzw","zyzx","zyzx","zyzy","zyzy","zyzz","zyzz","zz","zz","zzw","zzww","zzwx","zzwy","zzwz","zzx","zzx","zzxw","zzxx","zzxx","zzxy","zzxy","zzxz","zzxz","zzy","zzy","zzyw","zzyx","zzyx","zzyy","zzyy","zzyz","zzyz","zzz","zzz","zzzw","zzzx","zzzx","zzzy","zzzy","zzzz","zzzz","UVec2","UVec3","UVec4","uvec2","uvec3","uvec4","w","x","x","x","y","y","y","z","z","A8","AnimationDecoder","Avif","Bgr8","Bgra8","Bmp","CHANNEL_COUNT","COLOR_MODEL","COLOR_TYPE","ColorType","DEFAULT_MAX_VALUE","DEFAULT_MIN_VALUE","Dds","Decoding","Delay","DynamicImage","EncodableLayout","Encoding","ExtendedColorType","Farbfeld","FlatSamples","Frame","Frames","GenericImage","GenericImageView","Gif","GrayAlphaImage","GrayImage","Hdr","Ico","ImageBuffer","ImageDecoder","ImageDecoderRect","ImageEncoder","ImageError","ImageFormat","ImageLuma16","ImageLuma8","ImageLumaA16","ImageLumaA8","ImageOutputFormat","ImageResult","ImageRgb16","ImageRgb32F","ImageRgb8","ImageRgba16","ImageRgba32F","ImageRgba8","IoError","Jpeg","Jpeg","L1","L16","L16","L2","L4","L8","L8","La1","La16","La16","La2","La4","La8","La8","Limits","Luma","LumaA","OpenExr","Parameter","Pixel","Pixel","PixelWithColorType","Pixels","Png","Png","Pnm","Primitive","Progress","Reader","Rgb","Rgb1","Rgb16","Rgb16","Rgb2","Rgb32F","Rgb32F","Rgb32FImage","Rgb4","Rgb8","Rgb8","RgbImage","Rgba","Rgba1","Rgba16","Rgba16","Rgba2","Rgba32F","Rgba32F","Rgba32FImage","Rgba4","Rgba8","Rgba8","RgbaImage","SubImage","Subpixel","Tga","Tiff","Unknown","Unsupported","Unsupported","WebP","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","_phantom","adjust_contrast","apply","apply","apply","apply","apply","apply2","apply2","apply2","apply2","apply2","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_with_alpha","apply_without_alpha","as_bytes","as_bytes","as_flat_samples","as_flat_samples_f32","as_flat_samples_mut","as_flat_samples_u16","as_flat_samples_u8","as_luma16","as_luma8","as_luma_alpha16","as_luma_alpha8","as_mut","as_mut_luma16","as_mut_luma8","as_mut_luma_alpha16","as_mut_luma_alpha8","as_mut_rgb16","as_mut_rgb32f","as_mut_rgb8","as_mut_rgba16","as_mut_rgba32f","as_mut_rgba8","as_mut_slice","as_raw","as_ref","as_rgb16","as_rgb32f","as_rgb8","as_rgba16","as_rgba32f","as_rgba8","as_slice","as_view","as_view_mut","as_view_with_mut_samples","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","bits_per_pixel","blend","blend","blend","blend","blend","blend_pixel","blend_pixel","blend_pixel","blur","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","bounds","brighten","buffer","buffer","buffer","buffer_mut","bytes_per_pixel","can_read","can_write","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","change_bounds","channel_count","channel_count","channels","channels","channels","channels","channels","channels4","channels4","channels4","channels4","channels4","channels_mut","channels_mut","channels_mut","channels_mut","channels_mut","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codecs","collect_frames","color","color_hint","color_type","convert","copy_from","copy_within","copy_within","crop","crop_imm","current","current","data","default","default","delay","delay","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","dimensions","dimensions","dimensions","dimensions","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enumerate_pixels","enumerate_pixels_mut","enumerate_rows","enumerate_rows_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","expand_palette","extensions_str","extents","filter3x3","fits","flat","fliph","flipv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_channels","from_channels","from_channels","from_channels","from_channels","from_decoder","from_extension","from_fn","from_mime_type","from_numer_denom_ms","from_parts","from_path","from_pixel","from_raw","from_saturating_duration","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_slice_mut","from_vec","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_mut_sample","get_pixel","get_pixel","get_pixel","get_pixel","get_pixel_checked","get_pixel_mut","get_pixel_mut","get_pixel_mut","get_pixel_mut","get_pixel_mut_checked","get_sample","grayscale","guess_format","has_aliased_samples","has_alpha","has_color","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","huerotate","image","image_dimensions","image_mut_slice","image_slice","imageops","in_bounds","in_bounds","in_bounds_index","index","index","index","index","index","index","index","index_ignoring_bounds","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","inner","inner_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_bytes","into_flat_samples","into_frames","into_iter","into_iter","into_luma16","into_luma8","into_luma_alpha16","into_luma_alpha8","into_raw","into_reader","into_rgb16","into_rgb32f","into_rgb8","into_rgba16","into_rgba32f","into_rgba8","into_vec","invert","invert","invert","invert","invert","invert","io","is_normal","iterator","layout","left","left","load","load_from_memory","load_from_memory_with_format","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","map","map","map","map","map","map2","map2","map2","map2","map2","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_with_alpha","map_without_alpha","math","min_length","multiunzip","new","new","new","new","new_luma16","new_luma8","new_luma_a16","new_luma_a8","new_rgb16","new_rgb32f","new_rgb8","new_rgba16","new_rgba32f","new_rgba8","next","next","numer_denom_ms","open","original_color_type","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","pixels","pixels","pixels_mut","provide","put_pixel","put_pixel","put_pixel","put_pixel","ratio","read_image","read_image_with_progress","read_rect","read_rect_with_progress","remaining","resize","resize_exact","resize_to_fill","rotate180","rotate270","rotate90","rows","rows_mut","sample_layout","samples","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","save","save","save_buffer","save_buffer_with_format","save_with_format","save_with_format","scanline_bytes","set_limits","shrink_to","source","strides_cwh","sub_image","sub_image","thumbnail","thumbnail_exact","to_bytes","to_image","to_luma","to_luma","to_luma","to_luma","to_luma","to_luma16","to_luma32f","to_luma8","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha","to_luma_alpha16","to_luma_alpha32f","to_luma_alpha8","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb","to_rgb16","to_rgb32f","to_rgb8","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba","to_rgba16","to_rgba32f","to_rgba8","to_string","to_vec","top","top","total","total","total_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_buffer","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsafe_get_pixel","unsafe_get_pixel","unsafe_put_pixel","unsafe_put_pixel","unsharpen","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","view","view","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","width","width","width","width","width","with_monocolor","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_buffer_with_format","write_image","write_to","write_to","x","y","ConvertBuffer","EnumeratePixels","EnumeratePixelsMut","EnumerateRows","EnumerateRowsMut","Pixels","PixelsMut","Rows","RowsMut","__clone_box","__clone_box","__clone_box","__clone_box","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","chunks","chunks","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","convert","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","into_vec","len","len","len","len","len","len","len","len","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","multiunzip","multiunzip","multiunzip","multiunzip","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pixels","pixels","pixels","pixels","rows","rows","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","try_into_arrow_as_type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","width","width","width","width","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","y","y","y","y","jpeg","png","Centimeters","Inches","JpegDecoder","JpegEncoder","PixelAspectRatio","PixelDensity","PixelDensityUnit","__clone_box","__clone_box","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","chroma_actable","chroma_dctable","clone","clone","clone_into","clone_into","color_type","components","decoder","default","density","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","downcast","downcast","downcast","downcast","dpi","drop","drop","drop","drop","encode","encode_image","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_reader","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","luma_actable","luma_dctable","metadata","new","new","new_with_quality","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pixel_density","read_image","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scale","set_pixel_density","tables","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unit","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_image","writer","Adaptive","ApngDecoder","Avg","Best","CompressionType","Default","Fast","FilterType","Huffman","NoFilter","Paeth","PngDecoder","PngEncoder","PngReader","Rle","Sub","Up","__clone_box","__clone_box","apng","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","color_type","color_type","compression","current","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","dispose","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","encode","eq","eq","equivalent","equivalent","equivalent","equivalent","filter","fmt","fmt","from","from","from","from","from","from","has_thumbnail","index","init","init","init","init","init","init","inner","into","into","into","into","into","into","into_frames","into_reader","is_apng","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","new","new","new_with_quality","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","previous","read","read_exact_buf","read_image","read_to_end","reader","reader","remaining","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scanline_bytes","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","w","with_limits","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","write_image","Color","Decoding","DecodingError","DimensionError","DimensionMismatch","Encoding","EncodingError","Exact","FailedAlready","Format","Generic","GenericFeature","ImageError","ImageFormatHint","ImageResult","InsufficientMemory","IoError","LimitError","LimitErrorKind","Limits","Name","NoMoreData","Parameter","ParameterError","ParameterErrorKind","PathExtension","Unknown","Unsupported","Unsupported","UnsupportedError","UnsupportedErrorKind","__clone_box","__clone_box","__clone_box","__clone_box","az","az","az","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_hint","format_hint","format_hint","from","from","from","from","from","from","from","from","from","from","from","from","from_format_and_kind","from_format_hint","from_format_hint","from_kind","from_kind","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","kind","kind","kind","kind","kind","kind","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","provide","provide","provide","provide","provide","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","source","source","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underlying","underlying","underlying","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","limits","supported","ColumnMajorPacked","Error","FlatSamples","ImagePacked","NormalForm","NormalFormRequired","PixelPacked","RowMajorPacked","SampleLayout","TooLarge","Unaliased","View","ViewMut","WrongColor","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","az","az","az","az","az","blend_pixel","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","bounds","cast_from","cast_from","cast_from","cast_from","cast_from","channel_stride","channels","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","color_hint","column_major_packed","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","dimensions","dimensions","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extents","fits","flat","flat","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_hash","get_hash","get_hash","get_mut_sample","get_mut_sample","get_pixel","get_pixel","get_pixel_mut","get_sample","get_sample","has_aliased_samples","hash","hash","hash","height","height_stride","image_mut_slice","image_mut_slice","image_slice","image_slice","in_bounds","in_bounds","in_bounds","in_bounds_index","index","index_ignoring_bounds","init","init","init","init","init","inner","inner","into","into","into","into","into","into_inner","into_inner","is_normal","layout","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","min_length","min_length","min_length","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","phantom","phantom","provide","put_pixel","row_major_packed","samples","samples","samples","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","shrink_to","shrink_to","shrink_to","strides_cwh","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_upgrade","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","width","width_stride","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BiLevel","CatmullRom","Color","ColorMap","FilterType","Gaussian","Lanczos3","Nearest","Triangle","__clone_box","__clone_box","az","az","blur","borrow","borrow","borrow_mut","borrow_mut","brighten","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","colorops","contrast","crop","crop_imm","deref","deref","deref_mut","deref_mut","dither","downcast","downcast","drop","drop","eq","filter3x3","flip_horizontal","flip_horizontal_in","flip_horizontal_in_place","flip_vertical","flip_vertical_in","flip_vertical_in_place","fmt","from","from","grayscale","grayscale_alpha","grayscale_with_type","grayscale_with_type_alpha","has_lookup","has_lookup","horizontal_gradient","huerotate","index_colors","index_of","index_of","init","init","into","into","invert","lookup","lookup","lossless_try_into","lossless_try_into","lossy_into","lossy_into","map_color","map_color","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overlay","overlay_bounds","replace","resize","rotate180","rotate180_in","rotate180_in_place","rotate270","rotate270_in","rotate90","rotate90_in","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","thumbnail","tile","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unsharpen","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vertical_gradient","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","BiLevel","Color","ColorMap","brighten","brighten_in_place","contrast","contrast_in_place","dither","grayscale","grayscale_alpha","grayscale_with_type","grayscale_with_type_alpha","has_lookup","huerotate","huerotate_in_place","index_colors","index_of","invert","lookup","map_color","LimitSupport","Limits","Reader","__clone_box","__clone_box","_non_exhaustive","_non_exhaustive","az","az","az","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","check_dimensions","check_support","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","clear_format","clone","clone","clone_into","clone_into","decode","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","format","format","free","free_usize","from","from","from","get_hash","get_hash","hash","hash","init","init","init","inner","into","into","into","into_dimensions","into_inner","limits","limits","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","max_alloc","max_image_height","max_image_width","new","no_limits","no_limits","open","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","reserve","reserve_usize","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","set_format","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","vzip","vzip","vzip","with_format","with_guessed_format","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","Rect","__clone_box","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","clone","clone_into","deref","deref_mut","downcast","drop","eq","equivalent","equivalent","fmt","from","get_hash","hash","height","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","to_owned","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","width","wrapping_as","wrapping_cast_from","x","y","HASH_RANDOM_STATE","Hash128","Hash64","ZERO","__clone_box","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","first64","fmt","fmt","from","from","get_hash","get_hash","hash","hash","hash","hash","hash64","hash64","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","second64","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","ArrowSerializationError","BadComponentValues","Component","ComponentBundle","DeserializableComponent","MissingComponentsField","MissingEntityPath","MissingTimelinesField","MsgBundle","MsgBundleError","MultipleTimepoints","NoRowsInTimeline","PathParseError","Result","SerializableComponent","Unreachable","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","components","deref","deref_mut","downcast","drop","entity_path","extract_timelines","field","fmt","fmt","from","from","from","from","init","into","lossless_try_into","lossy_into","msg_id","name","name","overflowing_as","overflowing_cast_from","provide","saturating_as","saturating_cast_from","source","time_point","to_string","try_build_msg_bundle1","try_build_msg_bundle2","try_build_msg_bundle3","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","value","vzip","wrap_in_listarray","wrapping_as","wrapping_cast_from","BadEscape","ComponentName","ComponentPath","DoubleSlash","EmptyString","EntityPath","EntityPathHash","EntityPathImpl","EntityPathPart","Index","InvalidSequence","LeadingSlash","MissingSlash","Name","PathParseError","UnterminatedString","component_name","entity_path","entity_path","entity_path_vec","hash","parse_entity_path","parts","path","details","Sequence","Time","TimeInt","TimePoint","TimeType","Timeline","TimelineName","name","typ","AccountingAllocator","CountAndSize","MemoryHistory","MemoryLimit","MemoryUse","ZERO","__clone_box","__clone_box","__clone_box","accounting_allocator","add","alloc","alloc_zeroed","allocator","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capture","capture","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","count","counted","counted","counted_gpu","counted_store","dealloc","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","get_hash","hash","init","init","init","init","init","into","into","into","into","into","is_empty","is_exceeded_by","limit","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parse","realloc","resident","resident","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","size","sub","sub","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","util","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","AccountingAllocator","TrackingStatistics","allocator","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","fully_tracked","global_allocs","init","into","is_tracking_callstacks","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","overhead","saturating_as","saturating_cast_from","set_tracking_callstacks","stochastically_tracked","top_callstacks","track_size_threshold","tracking_stats","try_from","try_into","turn_on_tracking_if_env_var","type_id","untracked","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","sec_since_start","Client","DEFAULT_SERVER_PORT","PROTOCOL_VERSION","Result","ServerOptions","__clone_box","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","clone","clone_into","decode_log_msg","default","default","default_server_addr","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","drop","drop_if_disconnected","drop_join","drop_quit_tx","encode_join","encode_log_msg","encode_quit_tx","eq","flush","flushed_rx","fmt","from","from","init","init","into","into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","max_latency_sec","msg_tx","new","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","quiet","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","send","send_join","send_quit_tx","serve","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","ArrowMsg","BeginRecordingMsg","ClearComponents","ClearRecursive","ComponentBundle","EntityPathOpMsg","Goodbye","LogMsg","MAX","MsgBundle","MsgId","PathOp","ZERO","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","arrow_deserialize","arrow_serialize","as_u128","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","components","data_type","data_type","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","entity_path","entity_path","eq","eq","equivalent","equivalent","equivalent","equivalent","find_component","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_hash","hash","id","init","init","init","init","init","into","into","into","into","into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","msg_id","name","name","name","new","new","new_array","new_empty","new_from_boxed","num_components","num_instances","num_instances","num_rows","num_rows","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","random","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","short_string","time_point","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_append_component","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","value","value_boxed","value_list","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","NativeViewerSink","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","from","init","into","lossless_try_into","lossy_into","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","send","show","spawn","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","wrapping_as","wrapping_cast_from","Analytics","AnalyticsCommands","Args","CallSource","Clear","Cli","Commands","Config","Details","Disable","Email","Enable","Python","__clone_box","__clone_box","__clone_box","app_env","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands","augment_subcommands_for_update","augment_subcommands_for_update","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone_into","clone_into","clone_into","command","command_for_update","commands","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop_at_latency","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","has_subcommand","host_web_viewer","init","init","init","init","into","into","into","into","is_python","load_file_to_channel","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","memory_limit","native_viewer_connect_to_ws_url","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parse_max_latency","port","profile","profiler","run","run_analytics","run_impl","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","url_or_path","version","vzip","vzip","vzip","vzip","web_viewer","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","email","BufferedSink","CreateFile","FileSink","FileSinkError","LogMsgEncode","LogSink","SpawnThread","TcpSink","az","az","az","az","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","client","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","disabled","downcast","downcast","downcast","downcast","drain_backlog","drain_backlog","drop","drop","drop","drop","drop","drop_msgs_if_disconnected","drop_msgs_if_disconnected","flush","flush","fmt","fmt","from","from","from","from","from","init","init","init","init","into","into","into","into","is_enabled","join_handle","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","new","new","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","provide","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","send","send","send","send","send_all","send_all","source","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","BEGINNING","MAX","MIN","Sequence","Time","Time","TimeInt","TimePoint","TimeType","Timeline","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","abs","add","add","add","add_assign","add_assign","arrow_deserialize","arrow_serialize","as_f32","as_f64","as_i64","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","data_type","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","format","format","format_range","format_time_range","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_iter","from_milliseconds","from_nanos","from_ns_since_epoch","from_seconds","from_seconds_since_epoch","from_sequence","from_u64","from_us_since_epoch","get","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","init","init","init","init","init","insert","into","into","into","into","into","into_iter","into_iter","is_absolute_date","is_empty","is_exactly_midnight","is_timeless","is_timeless","iter","lerp","log_time","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","name","name","nanos_since_epoch","neg","new","new_array","new_sequence","new_temporal","now","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","serialize","serialize","serialize","serialize","serialize","sub","sub","sub","sub","sub_assign","sum","timeless","timelines","times","to_datetime","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","typ","typ","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","RemoteViewerServer","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","deref","deref_mut","downcast","drop","drop","from","init","into","lossless_try_into","lossy_into","new","new_sink","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","send","sender","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","upcast","vzip","web_server_join_handle","wrapping_as","wrapping_cast_from"],"q":["rerunrerun::clap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::componentsrerun::coordinatesrerun::crash_handler","","","","","","","","rerun::demo_util","","","","","rerun::external","rerun::external::re_log","","","","","","","","","","","rerun::external::re_log_typesrerun::external::re_log_types::PathParseError","rerun::external::re_log_types::RecordingSource","","rerun::external::re_log_types::arrow_msg","","","","rerun::external::re_log_types::component_typesrerun::external::re_log_types::component_types::TensorCastError","rerun::external::re_log_types::component_types::contextrerun::external::re_log_types::component_types::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::datagen","","","","","","","","","rerun::external::re_log_types::encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrowrerun::external::re_log_types::external::arrow2::arrayrerun::external::re_log_types::external::arrow2::array::growablererun::external::re_log_types::external::arrow2::array::ord","","","","","rerun::external::re_log_types::external::arrow2::bitmaprerun::external::re_log_types::external::arrow2::bitmap::utilsrerun::external::re_log_types::external::arrow2::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::aggregate","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::arithmetics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::arithmetics::basic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::arithmetics::decimal","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::arithmetics::time","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::arity","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::arity_assign","","rerun::external::re_log_types::external::arrow2::compute::boolean","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::boolean_kleene","","","","","","rerun::external::re_log_types::external::arrow2::compute::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::comparison","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::comparison::binary","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::comparison::boolean","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::comparison::primitive","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::comparison::utf8","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::compute::concatenate","rerun::external::re_log_types::external::arrow2::compute::filter","","","","rerun::external::re_log_types::external::arrow2::compute::if_then_else","rerun::external::re_log_types::external::arrow2::compute::take","","rerun::external::re_log_types::external::arrow2::datatypesrerun::external::re_log_types::external::arrow2::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::ffi::mmap","rerun::external::re_log_types::external::arrow2::io","","rerun::external::re_log_types::external::arrow2::io::ipc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::io::ipc::readrerun::external::re_log_types::external::arrow2::io::ipc::read::OutOfSpecKind","","","","","","","","","","rerun::external::re_log_types::external::arrow2::io::ipc::writererun::external::re_log_types::external::arrow2::io::print","rerun::external::re_log_types::external::arrow2::mmap","","rerun::external::re_log_types::external::arrow2::offset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::scalarrerun::external::re_log_types::external::arrow2::temporal_conversions","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::trusted_len","rerun::external::re_log_types::external::arrow2::typesrerun::external::re_log_types::external::arrow2::types::simd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::arrow2::util","","","rerun::external::re_log_types::external::arrow2_convert","","","","","","","rerun::external::re_log_types::external::arrow2_convert::deserialize","","","","","","","","rerun::external::re_log_types::external::arrow2_convert::fieldrerun::external::re_log_types::external::arrow2_convert::serialize","","","","","","","","","","rerun::external::re_log_types::external::glamrerun::external::re_log_types::external::glam::bool","","","","","","","","","","","","","","rerun::external::re_log_types::external::glam::f32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::glam::f64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::glam::i32","","","","","","","","","","","","","","","rerun::external::re_log_types::external::glam::swizzlesrerun::external::re_log_types::external::glam::u32","","","","","","","","","","","","","","","rerun::external::re_log_types::external::imagererun::external::re_log_types::external::image::bufferrerun::external::re_log_types::external::image::codecs","","rerun::external::re_log_types::external::image::codecs::jpeg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::image::codecs::pngrerun::external::re_log_types::external::image::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::image::error::LimitErrorKind","","rerun::external::re_log_types::external::image::flatrerun::external::re_log_types::external::image::imageops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::image::imageops::colorops","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::image::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::external::image::math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::msg_bundle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::path","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_log_types::path::PathParseError","rerun::external::re_log_types::time_point","","","","","","","","","rerun::external::re_memoryrerun::external::re_memory::accounting_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::external::re_memory::util","rerun::external::re_sdk_comms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::log","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::native_viewer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::runrerun::run::AnalyticsCommands","rerun::sink","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rerun::timererun::web_viewer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The user-chosen name of the application doing the logging.","Where are we calling <code>run</code> from?","Called from a command-line-input (the terminal).","A type that can used as a Component of an Entity.","The name of an entity component, e.g. <code>pos</code> or <code>color</code>.","<code>camera / &quot;left&quot; / points / #42</code>","<code>InstanceKey</code> with a <code>u64::MAX</code> was found, but is reserved for …","Some components had more or less instances than some other.","The same component were put in the same log message …","Facilitates building and sending component payloads with …","Errors that can occur when constructing or sending messages","A message during packing. See <code>MsgBundleError</code>.","Called from the Rerun Python SDK.","A unique id per recording (a stream of <code>LogMsg</code>es).","A <code>Component</code> that fulfils all the conditions required to be …","The main way to do Rerun loggning.","Construct a <code>Session</code>.","Instance keys cannot be splatted","The recording id:s given to recordings that don’t have …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Buffer log messages in RAM.","Buffer log messages in RAM.","","","","","","","","","","","","","","","","","","","","","","","","","Module for integrating with the <code>clap</code> command line argument …","","","","","","","","","","","","","","","These are the different <em>components</em> you can log.","Send log data to a remote viewer/server.","Coordinate system helpers, for use with …","","Checks the <code>RERUN</code> environment variable. If not found, …","","Set whether or not Rerun is enabled by default.","","The default address of a Rerun TCP server which an SDK …","This module contains utilities to support Rerun examples.","","","","","","","","","","","","","","","","","","","","","","Construct a new session with a disabled “dummy” sink …","","","","","","","","","Drain all buffered <code>LogMsg</code>es and return them.","","","","","","","","","Set whether or not Rerun is enabled.","","","","","","","","","","","","","","","","Re-exports of other crates.","Create a <code>Field</code> for this <code>Component</code>.","Returns whether or not logging is enabled, plus a …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Includes namespace, e.g. <code>rerun.color</code> or <code>ext.confidence</code>.","","","","","Access a global <code>Session</code> singleton for convenient logging.","","Precomputed hash of the string.","","","","","","Precomputed 64-bit hash.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Is this a direct child of the other path.","Is this a strict descendant of the given path.","Check if logging is enabled on this <code>Session</code>.","","","","","","Number of parts","Things directly related to logging.","","","","","","","","","","","","","","","","","The name of the component.","Methods for spawning the native viewer and streaming the …","Starts a new <code>MsgSender</code> for the given entity path.","Create a new <code>SessionBuilder</code> with an application id.","Construct a new session with a given <code>RecordingInfo</code> and …","","","Creates a new <code>re_log_types::RecordingInfo</code> which can be …","","","","","","","","","","","","","","","","","","Return <code>None</code> if root.","","","","","","","","Set the <code>RecordingId</code> for this session.","","","","Run the Rerun application and return an exit code.","","","","","","","","","","","","","","","","","Stream all log messages to an <code>.rrd</code> file.","Consumes, packs, sanity checks and finally sends the …","Send a <code>LogMsg</code>.","Send a <code>re_log_types::PathOp</code>.","","","","","Excludes the rerun namespace, so you’ll get <code>color</code> but …","Different destinations for log messages.","Access the underlying log sink to where we send out log …","","","","Time-related types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default <code>ApplicationId</code> if the user hasn’t set one.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Methods for spawning the web viewer and streaming the SDK …","Appends a component collection to the current message.","Appends a splatted component to the current message.","Helper to make it easier to optionally append splatted …","Appends a given <code>timeline</code>/<code>time</code> pair to the current message.","Specifies whether the current message is timeless.","Appends a given <code>timepoint</code> to the current message.","","","","","","","","","","","","","","","","","","This struct implements a <code>clap::Parser</code> that defines all the …","","","","","","","","","","","","","","","","","","","","","","","","","Connects and sends the logged data to a remote Rerun …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Set up Rerun, and run the given code with a <code>Session</code> object …","","","","","Saves the data to an rrd file rather than visualizing it …","Connects and sends the logged data to a web-based Rerun …","Start a viewer and feed it data in real-time.","","","","","","","","","","","","","","","","","","","","","","","","The <code>AnnotationContext</code> provides additional information on …","Information about an Annotation.","A 3D Arrow","A 3D bounding box represented by it’s half-lengths","The description of a semantic Class.","A 16-bit ID representing a type of semantic class.","The data is an annotated <code>crate::component_types::ClassId</code> …","An RGBA color tuple.","Image data interpreted as depth map.","","Compressed/encoded mesh format","","","Binary <code>glTF</code>.","<code>glTF</code>.","","","","","","","A number used to specify a specific instance in an entity.","","A 16-bit ID representing a type of semantic keypoint …","A String label component","A Line Strip of 2D points","A Line Strip of 3D points","A 3x3 column-major Matrix made up of 3 Vecs","A Generic 3D Mesh.","The format of a binary mesh file, e.g. GLTF, GLB, OBJ","A unique id per <code>Mesh3D</code>.","Wavefront .obj.","Camera perspective projection (a.k.a. intrinsics).","The parent is some local camera space, the child an image …","A point in 2D space.","A point in 3D space.","A Quaternion represented by 4 real numbers.","A Radius component","","A raw “triangle soup” mesh.","A rectangle in 2D space.","A proper rigid 3D transform, i.e. a rotation and a …","For example: the parent is a 3D world space, the child a …","A special value indicating that this [<code>InstanceKey]</code> is …","A double-precision scalar.","Additional properties of a scalar when rendered as a plot.","A 3D size, e.g. the size of a 3D box.","A Multi-dimensional Tensor","Flattened <code>Tensor</code> data payload","How to interpret the contents of a tensor.","Flattened <code>Tensor</code> data payload","A unique id per <code>Tensor</code>.","","A text entry component, comprised of a text body and its …","A transform between two spaces.","","","","","Default behavior: guess based on shape","We don’t know the transform, but it is …","A vector in 2D space.","A vector in 3D space.","A vector in 4D space.","How we interpret the coordinate system of an entity/space.","[x_center, y_center, width/2, height/2]","[x_center, y_center, width, height]","[x, y, w, h], with x,y = left,top.","[x0, y0, x1, y1], with x0,y0 = left,top and x1,y1 = …","[y, x, h, w], with x,y = left,top.","[y0, x0, y1, x1], with x0,y0 = left,top and x1,y1 = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Albedo factor applied to the final color of the meshata payloadocal length.","X &amp; Y focal length in pixels.","","","Field of View on the Y axis, i.e. the angle between top …","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Construct a tensor from [<code>image::DynamicImage</code>].","Construct a tensor from something that can be turned into …","","","Returns a matrix that translates RUB to this coordinate …","","Choses a coordinate system based on just an up-axis.","","","","","","","","","","","","","","","","","","","","","<code>ClassId</code> or <code>KeypointId</code> to which this annotation info …","Column-major projection matrix.","","","","Optionally, the flattened indices array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Are we referring to a specific instance of the entity …","Are we referring to all instances of the entity (e.g. all …","","","Semantic connections between two keypoints.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The per-element data meaning Used to indicated if the data …","","","","Reciprocal scale of meter unit for depth images","","","","","","","","","","","","","","","","","","","","","","","","","","Optional name of the dimension, e.g. “color” or “…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optionally, the flattened normals array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The flattened positions array of this mesh.","Principal point of the pinhole camera, i.e. the …","","","","Pixel resolution (usually integers) of child image space. …","","How is the child rotated?","Returns an error if this does not span all three …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dimensionality and length","Number of elements on this dimension. I.e. size-1 is the …","","","Returns <code>None</code> if splat, otherwise the index.","Construct a tensor from the contents of a JPEG file.","Construct a tensor from the contents of a JPEG file on …","Unique identifier for the tensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a matrix that translates this coordinate system to …","","","","","","","","four columns of an affine transformation matrix","Translation to parent from childne of <code>X</code>, <code>Y</code>, <code>Z</code>.","Left or right handedness. Used to describe a coordinate …","","","","","","","","","","","Positive (<code>+</code>) or Negative (<code>-</code>).","One of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Anonymize a path to a Rust source file from a callstack.","","","","Install handlers for panics and signals (crashes) that …","","","A linear interpolator that bounces between <code>a</code> and <code>b</code> as <code>t</code> …","Create a spiral of points with colors along the Z axis.","Given two 3D vectors <code>from</code> and <code>to</code>, linearly interpolates …","Linear interpolator.","Linearly interpolates from <code>a</code> through <code>b</code> in <code>n</code> steps, …","","Constructs an event at the debug level.","Logs a message once at the debug level.","Constructs an event at the error level.","Logs a message once at the error level.","Constructs an event at the info level.","Logs a message once at the info level.","","Constructs an event at the trace level.","Logs a message once at the trace level.","Constructs an event at the warn level.","Logs a message once at the warn level.","The <code>AnnotationContext</code> provides additional information on …","The user-chosen name of the application doing the logging.","A 3D Arrow","Message containing an Arrow payload","Log an entity using an <code>ArrowMsg</code>.","","","","","A new recording has begun.","Oriented 3D box","Clear all the components stored at an <code>EntityPath</code>","Clear all the components of an <code>[EntityPath]</code> and any …","The name of an entity component, e.g. <code>pos</code> or <code>color</code>.","A <code>EntityPath</code> plus a <code>ComponentName</code>.","","","A signed duration represented as nanoseconds since unix …","Contains no time at all.","","","Compressed/encoded mesh format","<code>camera / &quot;left&quot; / points / #42</code>","A 128 bit hash of <code>EntityPath</code> with negligible risk of …","<code>camera / &quot;left&quot; / points / #42</code>","An operation (like a ‘clear’) on an <code>EntityPath</code>.","Server-backed operation on an <code>EntityPath</code>.","The different parts that make up an <code>EntityPath</code>.","16-bit floating point number.","16-bit floating point number.","32-bit floating point number.","32-bit floating point number.","64-bit floating point number.","64-bit floating point number.","Some batches want to provide explicit indices","Binary <code>glTF</code>.","<code>glTF</code>.","Sent when the client shuts down the connection.","Signed 16 bit integer.","Signed 16 bit integer.","Signed 32 bit integer.","Signed 32 bit integer.","Signed 64 bit integer.","Signed 64 bit integer.","Signed 8 bit integer.","Signed 8 bit integer.","The key of a table.","Array/table/map member. Each member must be of the same …","A 128 bit hash of <code>Index</code> with negligible risk of collision.","Any integer, e.g. a hash or an arbitrary identifier.","","","The most general log message sent from the SDK to the …","","A Generic 3D Mesh.","The format of a binary mesh file, e.g. GLTF, GLB, OBJ","A unique id per <code>Mesh3D</code>.","","A unique id per <code>crate::LogMsg</code>.","","Sometimes used as the hash of <code>None</code>.","Struct member. Each member can have a different type.","Wavefront .obj.","Perhaps from some manual data ingestion?","Operation to perform on an <code>EntityPath</code>, e.g. clearing all …","","Camera perspective projection (a.k.a. intrinsics).","The parent is some local camera space, the child an image …","X,Y pixel coordinates, from top left.","The official Rerun Python Logging SDK","","Order: XYZW","","A raw “triangle soup” mesh.","A unique id per recording (a stream of <code>LogMsg</code>es).","","","A proper rigid 3D transform, i.e. a rotation and a …","For example: the parent is a 3D world space, the child a …","The official Rerun Rust Logging SDK","For arrays, assumed to be dense (0, 1, 2, …).","Used e.g. for frames in a film.","Many batches use implicit sequential-indexing","Anything goes.","The data types supported by a …","","The data that can be stored in a …","A date-time represented as nanoseconds since unix epoch","Normal wall time.","A 64-bit number describing either nanoseconds OR sequence …","A point in time on any number of <code>Timeline</code>s.","","Like <code>TimeRange</code>, but using <code>TimeReal</code> for improved precision.","Either nanoseconds or sequence numbers.","The type of a <code>TimeInt</code> or <code>Timeline</code>.","A time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …","The name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …","A transform between two spaces.","Unsigned 16 bit integer.","Unsigned 16 bit integer.","Unsigned 32 bit integer.","Unsigned 32 bit integer.","Unsigned 64 bit integer.","Unsigned 64 bit integer.","Unsigned 8 bit integer.","Unsigned 8 bit integer.","We don’t know the transform, but it is …","","","UUID/GUID","How we interpret the coordinate system of an entity/space.","","","","","","","","","","","","","","","","","","","","","","","","The amount of time or sequences covered by this range.","","","","Albedo factor applied to the final color of the mesh.","The user-chosen name of the application doing the logging.","<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Arrow chunk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","“color”","Potentially user-facing component types.","","Inclusive","Generate random data for tests and benchmarks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encoding/decoding <code>LogMsg</code>:es as <code>.rrd</code> files.","","<code>camera / &quot;left&quot; / points / #42</code>","Build a <code>EntityPath</code>:","Build a <code>Vec&lt;EntityPathPart&gt;</code>:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Precomputed hash of the string.","","","","","Column-major projection matrix.","","","Optionally, the flattened indices array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Where in the range is this value? Returns 0-1 if within …","","","","","True if the recording is one of the official Rerun …","","","","","","","Number of components","The amount of time or sequences covered by this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","e.g. 3","Lower right corner.","","","","","Upper left corner.","","","e.g. 11","Structs and functions used for framing and de-framing a …","A unique id per <code>crate::LogMsg</code>.","","A unique id per <code>EntityPathOpMsg</code>.","","","","","","","","","","Optionally, the flattened normals array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>None</code> if root.","Parses an entity path, e.g. …","","","","","","","","","","e.g. 0","Every logged entity in Rerun is logged to an <code>EntityPath</code>.","","What operation.","","","The flattened positions array of this mesh.","","","Should be unique for each recording.","","Pixel resolution (usually integers) of child image space. …","","How is the child rotated?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Arrow schema","","","","","","","","","","","","","","","","","","","","","","Number of bytes used by the type","When the recording started.","","","","e.g. <code>a0</code> for alpha releases.","","","","Time information (when it was logged, when it was …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","four columns of an affine transformation matrix","Translation to parent from child.","","","","Build a single Arrow log message tuple from this <code>MsgBundle</code>…essage containing an Arrow payload","Arrow chunk","A unique id per <code>crate::LogMsg</code>.","Arrow schema","The <code>AnnotationContext</code> provides additional information on …","Information about an Annotation.","A 3D Arrow","","","","A 3D bounding box represented by it’s half-lengths","The description of a semantic Class.","A 16-bit ID representing a type of semantic class.","The data is an annotated <code>crate::component_types::ClassId</code> …","An RGBA color tuple.","Image data interpreted as depth map.","","Compressed/encoded mesh format","","","","","","","<code>arrow2_convert</code> helper for fields of type <code>[T; SIZE]</code>","Binary <code>glTF</code>.","<code>glTF</code>.","","","","","","A number used to specify a specific instance in an entity.","","A 16-bit ID representing a type of semantic keypoint …","A String label component","A Line Strip of 2D points","A Line Strip of 3D points","A 3x3 column-major Matrix made up of 3 Vecs","A Generic 3D Mesh.","The format of a binary mesh file, e.g. GLTF, GLB, OBJ","A unique id per <code>Mesh3D</code>.","A unique id per <code>crate::LogMsg</code>.","","Wavefront .obj.","Camera perspective projection (a.k.a. intrinsics).","The parent is some local camera space, the child an image …","A point in 2D space.","A point in 3D space.","A Quaternion represented by 4 real numbers.","A Radius component","","A raw “triangle soup” mesh.","","A rectangle in 2D space.","","A proper rigid 3D transform, i.e. a rotation and a …","For example: the parent is a 3D world space, the child a …","A double-precision scalar.","Additional properties of a scalar when rendered as a plot.","A 3D size, e.g. the size of a 3D box.","A Multi-dimensional Tensor","","Flattened <code>Tensor</code> data payload","How to interpret the contents of a tensor.","Flattened <code>Tensor</code> data payload","A unique id per <code>Tensor</code>.","","","A text entry component, comprised of a text body and its …","A transform between two spaces.","","","","","","Default behavior: guess based on shape","We don’t know the transform, but it is …","","","A vector in 2D space.","A vector in 3D space.","A vector in 4D space.","How we interpret the coordinate system of an entity/space.","[x_center, y_center, width/2, height/2]","[x_center, y_center, width, height]","[x, y, w, h], with x,y = left,top.","[x0, y0, x1, y1], with x0,y0 = left,top and x1,y1 = …","[y, x, h, w], with x,y = left,top.","[y0, x0, y1, x1], with x0,y0 = left,top and x1,y1 = …","Albedo factor applied to the final color of the mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data payload","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","<code>ClassId</code> or <code>KeypointId</code> to which this annotation info …","Column-major projection matrix.","Optionally, the flattened indices array for this mesh.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Iterate over the registered field types","Semantic connections between two keypoints.","","","","","","","","","","","","","","","","","The per-element data meaning Used to indicated if the data …","","","Reciprocal scale of meter unit for depth images","Optional name of the dimension, e.g. “color” or “…","","","Optionally, the flattened normals array for this mesh.","","","","","","","","","","","","","","","","The flattened positions array of this mesh.","","","","Pixel resolution (usually integers) of child image space. …","How is the child rotated?","","","","","","","","","","","","","","","Dimensionality and length","Number of elements on this dimension. I.e. size-1 is the …","","","","","Unique identifier for the tensor","","","","four columns of an affine transformation matrix","Translation to parent from child.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>AnnotationContext</code> provides additional information on …","Information about an Annotation.","","","The description of a semantic Class.","Helper struct for converting <code>AnnotationContext</code> to arrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","<code>ClassId</code> or <code>KeypointId</code> to which this annotation info …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Semantic connections between two keypoints.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","One of <code>X</code>, <code>Y</code>, <code>Z</code>.","","","","Left or right handedness. Used to describe a coordinate …","","","","","","","Positive (<code>+</code>) or Negative (<code>-</code>).","One of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …","","How we interpret the coordinate system of an entity/space.","The six cardinal directions for 3D view-space and …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Build a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …","Build a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …","Create <code>len</code> dummy colors","Create <code>len</code> dummy <code>InstanceKey</code> keys. These keys will be …","","Create <code>len</code> dummy labels","Create <code>len</code> dummy <code>Point2D</code>","Create <code>len</code> dummy rectangles","Create <code>len</code> dummy <code>Vec3D</code>","On failure to encode or serialize a <code>LogMsg</code>.","","On failure to encode or serialize a <code>LogMsg</code>.","Encode a stream of <code>LogMsg</code> into an <code>.rrd</code> file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","","","","","Contains the <code>Array</code> and <code>MutableArray</code> trait objects …","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","contains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.","","","","","Contains <code>Buffer</code>, an immutable container for all Arrow …","","","","","","","","Contains <code>Chunk</code>, a container of <code>Array</code> where every array has …","","","","","","","","","contains a wide range of compute operations (e.g. …","","","Contains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","","","","","","Defines <code>Error</code>, representing all errors returned by this …","Returns the left value","Returns the right value","","","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","contains FFI bindings to import and export <code>Array</code> via Arrow…","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","","","","Returns the argument unchanged.","","Examples","Returns the argument unchanged.","This crates a hashmap from the provided iterator using …","Returns a reference to the value corresponding to the key.","","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","","Returns a reference to the value corresponding to the …","","","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","","","","Creates a consuming iterator visiting all the keys in …","","Creates a consuming iterator visiting all the values in …","","Contains modules to interface with other formats such as […","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","","","","","","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Memory maps regions defined on the IPC format into <code>Array</code>.","","","","","","","","","","","","","","This crates a hashmap using RandomState::new which obtains …","","","","","","","","Contains the declaration of <code>Offset</code>","","","","","","","","","","","","","","","","","","","Removes a key from the map, returning the value at the key …","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","","contains the <code>Scalar</code> trait object representing individual …","","","","","","Conversion methods for dates and times.","","","","Declares <code>TrustedLen</code>.","","","","","","","","","","","","","","","","Sealed traits and implementations to handle all <em>physical </em>…","Returns the left value","Returns the right value","","","","","","","Misc utilities used in different places in the crate.","","","This crates a hashmap with the specified capacity using …","","","","","","","","","","","","A trait representing an immutable Arrow array. Arrow …","Iterator of values of an <code>ArrayAccessor</code>.","A <code>BinaryArray</code> is Arrow’s semantically equivalent of an …","Iterator of values of an <code>BinaryArray</code>.","A <code>BooleanArray</code> is Arrow’s semantically equivalent of an …","A type definition <code>PrimitiveArray</code> for <code>days_ms</code>","A type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>","An <code>Array</code> whose values are stored as indices. This <code>Array</code> is …","Trait denoting <code>NativeType</code>s that can be used as keys of a …","The Arrow’s equivalent to an immutable …","The Arrow’s equivalent to an immutable …","A type definition <code>PrimitiveArray</code> for <code>f16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f16</code>","A type definition <code>PrimitiveArray</code> for <code>f32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f32</code>","A type definition <code>PrimitiveArray</code> for <code>f64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f64</code>","Trait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …","A type definition <code>PrimitiveArray</code> for <code>i128</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i128</code>","A type definition <code>PrimitiveArray</code> for <code>i16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i16</code>","A type definition <code>PrimitiveArray</code> for <code>i256</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i256</code>","A type definition <code>PrimitiveArray</code> for <code>i32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i32</code>","A type definition <code>PrimitiveArray</code> for <code>i64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i64</code>","A type definition <code>PrimitiveArray</code> for <code>i8</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i8</code>","The corresponding <code>IntegerType</code> of this key","An <code>Array</code> semantically equivalent to …","Iterator of values of a <code>ListArray</code>.","An array representing a (key, value), both of arbitrary …","A type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>","A type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>","A trait describing a mutable array; i.e. an array whose …","The Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …","A <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …","The Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …","A mutable, strong-typed version of <code>DictionaryArray</code>.","The Arrow’s equivalent to a mutable …","The mutable version of <code>FixedSizeListArray</code>.","The mutable version of <code>ListArray</code>.","The Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …","Converting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.","A <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …","A <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …","The concrete <code>Array</code> of <code>DataType::Null</code>.","A <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …","A <code>StructArray</code> is a nested <code>Array</code> with an optional validity …","A trait describing the ability of a struct to create …","A trait describing the ability of a struct to extend from …","A trait describing the ability of a struct to receive new …","A type definition <code>PrimitiveArray</code> for <code>u16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u16</code>","A type definition <code>PrimitiveArray</code> for <code>u32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u32</code>","A type definition <code>PrimitiveArray</code> for <code>u64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u64</code>","A type definition <code>PrimitiveArray</code> for <code>u8</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u8</code>","<code>UnionArray</code> represents an array whose each slot can contain …","A <code>Utf8Array</code> is arrow’s semantic equivalent of an …","Iterator of values of an <code>Utf8Array</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","If the key type always can be converted to <code>usize</code>.","Applies a function <code>f</code> to the validity of this array.","Applies a function <code>f</code> to the validity of this array.","Applies a function <code>f</code> to the values of this array, cloning …","Applies a function <code>f</code> to the values of this array, cloning …","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","Boxes self into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.","","Converts itself to a reference of <code>Any</code>, which enables …","Convert to <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","","","","","","","","","","","","Converts itself to a mutable reference of <code>Any</code>, which …","","","","","","","","","","","","","Convert itself to an (immutable) atomically reference …","","","","","","","","","","","","Convert itself to an (immutable) <code>Array</code>.","","","","","","","","","","","","Convert to mutable <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","Represents this key as a <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","Boxes self into a <code>Box&lt;dyn Array&gt;</code>.","","","Returns the capacity in number of items","Returns the capacity of this array","Returns the capacity of this <code>MutablePrimitiveArray</code>.","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","Returns the capacity in number of items","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Array</code> which avoids problematic types for …","Clones a dynamic <code>Array</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>DataType</code> of the <code>Array</code>. In combination with …","The <code>DataType</code> of the array.","","","Returns the <code>DataType</code> of this array.","","","Returns the arrays’ <code>DataType</code>.","","","Returns the <code>DataType</code> of this <code>DictionaryArray</code>","","","","","","","","","","","Returns the arrays’ <code>DataType</code>.","","","","","","","Returns the <code>DataType</code> of this array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the default <code>DataType</code> of this container: …","Returns the default <code>DataType</code>, <code>DataType::Binary</code> or …","Returns the default <code>DataType</code> of this container: …","Returns a default <code>DataType</code> of this array, which depends on …","Returns a <code>DataType</code> consistent with <code>FixedSizeListArray</code>.","Returns a default <code>DataType</code>: inner field is named “item”…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logically compares two <code>Array</code>s. Two arrays are logically …","","","","","","","Extends the <code>MutablePrimitiveArray</code> with a constant","Extends the <code>MutablePrimitiveArray</code> from a slice","Extends the <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>","Extends the <code>MutableBinaryArray</code> from an iterator of …","Extends the <code>MutableBooleanArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of trusted …","Extends the <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>","Extends <code>MutableBinaryValuesArray</code> from an iterator of …","Extends the <code>MutableBinaryArray</code> from an iterator of …","Extends the <code>MutableBooleanArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends <code>MutableUtf8Array</code> from an iterator of trusted len.","Extends <code>MutableUtf8ValuesArray</code> from an iterator of trusted …","Extends the <code>MutableBinaryArray</code> from an iterator of trusted …","Extends the <code>MutableBooleanArray</code> from an iterator of values …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of values of …","Extends the <code>MutableBinaryArray</code> from an <code>iterator</code> of values …","Extends the <code>MutableBooleanArray</code> from an iterator of values …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of values of …","Extends the <code>MutableBinaryArray</code> from an iterator of values. …","Extends the <code>MutableUtf8Array</code> from an iterator of values. …","Returns the field (guaranteed to be a <code>Struct</code>)","","Returns the fields of this <code>StructArray</code>.","The fields.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Creates a new <code>MutableBinaryArray</code> from a slice of optional …","Returns the argument unchanged.","","","","Creates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.","Returns the argument unchanged.","Creates a new <code>MutableBooleanArray</code> out of a slice of …","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>MutableFixedSizeBinaryArray</code> from a slice of …","","Returns the argument unchanged.","","Creates a new <code>FixedSizeBinaryArray</code> from a slice of …","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Creates a new <code>MutableUtf8Array</code> from a slice of optional …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","Creates a <code>FixedSizeBinaryArray</code> from an iterator of …","","","","","","","","","","Creates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.","Returns a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.","Creates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.","Creates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.","Creates a new <code>BooleanArray</code> from a slice of <code>bool</code>.","Creates a <code>FixedSizeBinaryArray</code> from a slice of arrays of …","Creates a <code>MutablePrimitiveArray</code> from a slice of values.","Creates a (non-null) <code>PrimitiveArray</code> from a slice of values.","Returns a <code>Utf8Array</code> from a slice of <code>&amp;str</code>.","","Creates a <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>","Creates a <code>MutableBinaryArray</code> from an iterator of trusted …","Creates a <code>BinaryArray</code> from a <code>TrustedLen</code>","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.","Creates a <code>PrimitiveArray</code> from a <code>TrustedLen</code> of optional …","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>","Creates a <code>Utf8Array</code> from an iterator of trusted length.","Returns a new <code>MutableBinaryValuesArray</code> from an iterator of …","Creates a <code>MutableBinaryArray</code> from an iterator of trusted …","Creates a <code>BinaryArray</code> from an iterator of trusted length.","Creates a <code>BooleanArray</code> from an iterator of trusted length. …","Creates a <code>BooleanArray</code> from an iterator of trusted length. …","Creates a <code>MutablePrimitiveArray</code> from an iterator of …","Creates a <code>PrimitiveArray</code> from an iterator of optional …","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Returns a new <code>MutableUtf8ValuesArray</code> from an iterator of …","Creates a <code>Utf8Array</code> from an iterator of trusted length.","Creates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.","Returns a <code>BinaryArray</code> from an iterator of trusted length.","Creates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …","Creates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.","Creates a new <code>MutablePrimitiveArray</code> out an iterator over …","Creates a (non-null) <code>PrimitiveArray</code> from a <code>TrustedLen</code> of …","Creates a new <code>MutableUtf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.","Returns a (non-null) <code>Utf8Array</code> created from a <code>TrustedLen</code> …","Creates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.","Creates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …","Creates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>. Use …","Creates a new <code>MutablePrimitiveArray</code> from an iterator over …","Creates a new <code>PrimitiveArray</code> from an iterator over values","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a (non-null) <code>PrimitiveArray</code> from an iterator of …","Creates a (non-null) <code>MutablePrimitiveArray</code> from a vector …","Creates a (non-null) <code>PrimitiveArray</code> from a vector of …","","","","","","Returns a the inner <code>Field</code>","Return the length of the first child.","Returns a the inner <code>DataType</code>","Returns a function that writes the element of <code>array</code> at …","Returns the fields the <code>DataType::Struct</code>.","Returns all fields from <code>DataType::Union</code>.","Returns an option of a mutable reference to the values of …","","","","","","Returns a function that writes the value of the element of …","","","","Contains the trait <code>Growable</code> and corresponding concreate …","Returns the index and slot of the field to select from …","","Returns the index and slot of the field to select from …","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","converts itself into <code>Arc&lt;dyn Array&gt;</code>","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","converts itself into <code>Box&lt;dyn Array&gt;</code>","converts itself into <code>Box&lt;dyn Array&gt;</code>","Deconstructs the <code>StructArray</code> into its individual …","Extract the low-end APIs from the <code>MutableUtf8Array</code>.","Extract the low-end APIs from the <code>MutableBinaryValuesArray</code>.","Returns its internal representation","Extract the low-end APIs from the <code>MutablePrimitiveArray</code>.","Returns its internal representation","Extract the low-end APIs from the <code>MutableStructArray</code>.","Extract the low-end APIs from the <code>MutableUtf8ValuesArray</code>.","","","","","","","","","","","","","","","","","","","","Try to convert this <code>BinaryArray</code> to a <code>MutableBinaryArray</code>","Try to convert this <code>BooleanArray</code> to a <code>MutableBooleanArray</code>","Try to convert this <code>PrimitiveArray</code> to a …","Try to convert this <code>Utf8Array</code> to a <code>MutableUtf8Array</code>","","","whether the array is empty","Whether the array is empty.","Returns whether slot <code>i</code> is null.","","","","","","Returns whether the values of this <code>DictionaryArray</code> are …","","Returns whether the <code>DataType::Union</code> is sparse or not.","Returns whether slot <code>i</code> is valid.","Whether <code>index</code> is valid / set.","","","","","","Returns an iterator of <code>&amp;[u8]</code>","Returns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>","Returns an iterator of <code>Option&lt;&amp;[u8]&gt;</code> over every element of …","Returns an iterator over the optional values of this …","Returns an iterator over the optional values of this …","Returns an iterator of <code>Option&lt;Box&lt;dyn Scalar&gt;&gt;</code>.","constructs a new iterator","constructs a new iterator","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator over <code>Option&lt;T&gt;</code>","Returns an iterator over the values and validity, …","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","constructs a new iterator","Returns an iterator of <code>Option&lt;&amp;str&gt;</code>","Returns an iterator of <code>&amp;str</code>","Returns an iterator of <code>Option&lt;&amp;str&gt;</code>","Returns an iterator over the the optional values of  …","Returns iterator over the values of …","Returns the keys’ value of the <code>DictionaryArray</code> as <code>usize</code>","Returns the dictionary keys","Returns the keys of the <code>DictionaryArray</code>. These keys can be …","","","Returns an iterator of the keys’ of the <code>DictionaryArray</code> …","Returns an iterator of the keys’ values of the …","The length of the <code>Array</code>. Every array has a length …","The length of the array.","","Returns the length of this array","","","Returns the length of this array","","Returns the length of this array","","","","Returns the length of this array","","Returns the length of this array","Returns the length of this array","","The length of this array","","Returns the length of this array","","Returns the length of this array","","Returns the length of this array","","","Returns the length of this array","","","","Returns the length of this array","","","","Returns the length of this array","","Returns the length of this array","Returns the length of this array","","","Returns the length of this array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the dictionary map","","","","","","","","","","","","","","","","","","","The values as a mutable reference","The values","The mutable values","Returns an empty <code>MutableBinaryValuesArray</code>.","Creates a new empty <code>MutableBinaryArray</code>.","Alias for unwrapping <code>Self::try_new</code>","Creates an new empty <code>MutableBooleanArray</code>.","Alias to <code>Self::try_new().unwrap()</code>","Creates an empty <code>MutableDictionaryArray</code>.","Creates a new empty <code>MutableFixedSizeBinaryArray</code>.","Creates a new <code>FixedSizeBinaryArray</code>.","Creates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…","Alias to <code>Self::try_new(...).unwrap()</code>","Creates a new empty <code>MutableListArray</code>.","Creates a new <code>ListArray</code>.","Creates a new <code>MapArray</code>.","Returns a new <code>NullArray</code>.","Creates a new empty <code>MutablePrimitiveArray</code>.","Alias for <code>Self::try_new(..).unwrap()</code>.","Creates a new <code>MutableStructArray</code>.","Returns a new <code>StructArray</code>","Returns a new <code>UnionArray</code>.","Initializes a new empty <code>MutableUtf8Array</code>.","Returns an empty <code>MutableUtf8ValuesArray</code>.","Creates a new <code>Utf8Array</code>.","Creates a new <code>ArrayValuesIter</code>","Creates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.","Returns a new empty <code>BooleanArray</code>.","Returns a new empty <code>DictionaryArray</code>.","Returns a new empty <code>FixedSizeBinaryArray</code>.","Returns a new empty <code>FixedSizeListArray</code>.","Returns a new empty <code>ListArray</code>.","Returns a new empty <code>MapArray</code>.","Returns a new empty <code>NullArray</code>.","Returns a new empty (zero-length) <code>PrimitiveArray</code>.","Creates an empty <code>StructArray</code>.","Creates a new empty <code>UnionArray</code>.","Returns a new empty <code>Utf8Array</code>.","Creates a new <code>Array</code> with a <code>Array::len</code> of 0.","Creates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …","Creates an null <code>BinaryArray</code>, i.e. whose …","Returns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.","Returns an <code>DictionaryArray</code> whose all elements are null","Returns a new null <code>FixedSizeBinaryArray</code>.","Returns a new null <code>FixedSizeListArray</code>.","Returns a new null <code>ListArray</code>.","Returns a new null <code>MapArray</code> of <code>length</code>.","Returns a new <code>NullArray</code>.","Returns a new <code>PrimitiveArray</code> where all slots are null / …","Creates a null <code>StructArray</code> of length <code>length</code>.","Creates a new null <code>UnionArray</code>.","Returns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.","Creates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …","Create a <code>MutableUtf8Array</code> out of low-end APIs.","Returns a <code>MutableUtf8ValuesArray</code> created from its internal …","Creates a new <code>Utf8Array</code> without checking for offsets …","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …","Creates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code>.","","","","","","","","The number of null slots on this <code>Array</code>.","","The offsets of the array","returns its offsets.","returns its offsets.","","Returns the offsets of this <code>BinaryArray</code>.","The offsets","The offsets [<code>Buffer</code>].","returns the offsets","The optional offsets.","returns its offsets.","returns its offsets.","Returns the offsets of this <code>Utf8Array</code>.","","","","","","","","","","Contains functions and function factories to order values …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pop the last entry from <code>MutableBinaryValuesArray</code>. This …","Pop the last entry from <code>MutableBinaryArray</code>. This function …","Pop an entry from <code>MutableBooleanArray</code>. Note If the values …","Pop the last entry from <code>MutableFixedSizeBinaryArray</code>. This …","Pop a value from the array. Note if the values is empty, …","Pop the last entry from <code>MutableUtf8Array</code>. This function …","Pop the last entry from <code>MutableUtf8ValuesArray</code>. This …","Pushes a new item to the array.","Pushes a new element to the array.","Pushes a new entry to <code>MutableBooleanArray</code>.","pushes a new entry to <code>MutableFixedSizeBinaryArray</code>.","Adds a new value to the array.","Call this once for each “row” of children you push.","Pushes a new element to the array.","Pushes a new item to the array.","Adds a new null element to the array.","","","","pushes a null value","","","","","","","","","","","Reserves additional slots to its capacity.","","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","","Reserves <code>additional</code> slots.","","","Reserves <code>additional</code> slots.","Reserves <code>additional</code> slots.","","","Reserves <code>additional</code> slots.","","Reserves <code>additional</code> slots.","","Reserves <code>additional</code> entries.","Reserves <code>additional</code> entries.","","","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets the validity of this <code>BinaryArray</code>.","Sets the validity of this <code>BooleanArray</code>.","Sets the validity of the keys of this <code>DictionaryArray</code>.","Sets the validity of this <code>FixedSizeBinaryArray</code>.","Sets the validity of this <code>FixedSizeListArray</code>.","Sets the validity of this <code>ListArray</code>.","Sets the validity of this <code>MapArray</code>.","Sets the validity.","Sets the validity of this <code>PrimitiveArray</code>.","Sets the validity of this <code>StructArray</code>.","Sets the validity of this <code>Utf8Array</code>.","Sets the values of this <code>BooleanArray</code>.","Sets values.","Update the values of this <code>PrimitiveArray</code>.","Shrink the array to fit its length.","","Shrinks the capacity of the <code>MutableBinaryValuesArray</code> to …","","Shrinks the capacity of the <code>MutableBinaryArray</code> to fit its …","Shrinks the capacity of the <code>MutableBooleanArray</code> to fit its …","","Shrinks the capacity of the <code>MutableDictionaryArray</code> to fit …","","Shrinks the capacity of the <code>MutableFixedSizeBinaryArray</code> to …","","","Shrinks the capacity of the <code>MutableFixedSizeListArray</code> to …","Shrinks the capacity of the <code>MutableListArray</code> to fit its …","","","Shrinks the capacity of the <code>MutablePrimitiveArray</code> to fit …","","Shrinks the capacity of the <code>MutableStructArray</code> to fit its …","","Shrinks the capacity of the <code>MutableUtf8Array</code> to fit its …","","Shrinks the capacity of the <code>MutableUtf8ValuesArray</code> to fit …","returns the (fixed) size of the <code>MutableFixedSizeBinaryArray</code>…","Returns the size","Returns the size (number of elements per slot) of this …","Returns the size (number of elements per slot) of this …","","","","","","Slices the <code>Array</code>, returning a new <code>Box&lt;dyn Array&gt;</code>.","Creates a new <code>BinaryArray</code> by slicing this <code>BinaryArray</code>.","","","Returns a slice of this <code>BooleanArray</code>.","Creates a new <code>DictionaryArray</code> by slicing the existing …","","Returns a slice of this <code>FixedSizeBinaryArray</code>.","","Returns a slice of this <code>FixedSizeListArray</code>.","","","Returns a slice of this <code>ListArray</code>.","","Returns a slice of this <code>MapArray</code>.","","Returns a slice of the <code>NullArray</code>.","Returns a clone of this <code>PrimitiveArray</code> sliced by an offset …","","","Creates a new <code>StructArray</code> that is a slice of <code>self</code>.","","Returns a slice of this <code>UnionArray</code>.","","Returns a slice of this <code>Utf8Array</code>.","Slices the <code>Array</code>, returning a new <code>Box&lt;dyn Array&gt;</code>.","Creates a new <code>BinaryArray</code> by slicing this <code>BinaryArray</code>.","","Returns a slice of this <code>BooleanArray</code>.","","Creates a new <code>DictionaryArray</code> by slicing the existing …","","","Returns a slice of this <code>FixedSizeBinaryArray</code>.","Returns a slice of this <code>FixedSizeListArray</code>.","","","Returns a slice of this <code>ListArray</code>.","Returns a slice of this <code>MapArray</code>.","","","","Returns a clone of this <code>PrimitiveArray</code> sliced by an offset …","","Creates a new <code>StructArray</code> that is a slice of <code>self</code>.","","Returns a slice of this <code>UnionArray</code>.","Returns a slice of this <code>Utf8Array</code>.","","","","","","Returns a new <code>FixedSizeBinaryArray</code> with a different …","Changes the arrays’ <code>DataType</code>, returning a new …","Returns a new <code>PrimitiveArray</code> with a different logical type.","Clone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fallible version of <code>Extend::extend</code>.","","","This is infalible and is implemented for consistency with …","","","","This is infalible and is implemented for consistency with …","","","Tries to extend itself with elements from <code>other</code>, failing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>MutableBinaryValuesArray</code> from an iterator.","Creates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …","Creates a <code>FixedSizeBinaryArray</code> from an fallible iterator …","Returns a new <code>MutableUtf8ValuesArray</code> from an iterator.","Returns a new <code>DictionaryArray</code>.","Creates a <code>MutableBinaryArray</code> from an falible iterator of …","Creates a <code>BinaryArray</code> from an fallible iterator of trusted …","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>MutablePrimitiveArray</code> from an fallible iterator …","Creates a <code>MutableUtf8Array</code> from an falible iterator of …","Creates a <code>Utf8Array</code> from an fallible iterator of trusted …","Creates a <code>MutableBinaryArray</code> from an falible iterator of …","Creates a <code>BinaryArray</code> from an falible iterator of trusted …","Creates a <code>BooleanArray</code> from an falible iterator of trusted …","Creates a <code>BooleanArray</code> from an falible iterator of trusted …","Creates a <code>MutablePrimitiveArray</code> from an fallible iterator …","Creates a <code>MutableUtf8Array</code> from an falible iterator of …","Creates a <code>Utf8Array</code> from an falible iterator of trusted …","Returns a the inner <code>Field</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>MutableBinaryValuesArray</code> created from its …","Returns a <code>MutableBinaryArray</code> created from its internal …","Returns a <code>BinaryArray</code> created from its internal …","The canonical method to create a <code>MutableBooleanArray</code> out …","The canonical method to create a <code>BooleanArray</code> out of …","Returns a new <code>DictionaryArray</code>.","Creates a new <code>MutableFixedSizeBinaryArray</code>.","Creates a new <code>FixedSizeBinaryArray</code>.","Creates a new <code>FixedSizeListArray</code>.","Creates a new <code>ListArray</code>.","Returns a new <code>MapArray</code>.","Returns a new <code>NullArray</code>.","The canonical method to create a <code>MutablePrimitiveArray</code> out …","The canonical method to create a <code>PrimitiveArray</code> out of its …","Create a <code>MutableStructArray</code> out of low-end APIs.","Returns a new <code>StructArray</code>.","Returns a new <code>UnionArray</code>.","Returns a <code>MutableUtf8Array</code> created from its internal …","Returns a <code>MutableUtf8ValuesArray</code> created from its internal …","Returns a <code>Utf8Array</code> created from its internal …","Returns a new <code>DictionaryArray</code>.","Creates a new <code>Utf8Array</code> without checking for offsets …","Tries to push a new element.","","","This is infalible and is implemented for consistency with …","","tries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.","","","This is infalible and is implemented for consistency with …","","","Needs to be called when a valid value was extended to this …","Needs to be called when a valid value was extended to this …","","","","","","","","","","","","","","","","","","","","","","","","","The types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The validity of the <code>Array</code>: every array has an optional …","The optional validity of the array.","","","","The optional validity.","","","Returns the optional validity.","","","The optional validity. Equivalent to <code>self.keys().validity()</code>…","","The optional validity.","","","","The optional validity.","","","The optional validity.","","","","","Returns the optional validity.","","The optional validity.","","","","","The optional validity.","","","","","","","","","","","","","","","","","","","Returns the value of the element at index <code>i</code>.","Returns the element at index <code>i</code>","Returns the value at index <code>i</code>","Returns the value of the <code>DictionaryArray</code> at position <code>i</code>.","Returns the element at index <code>i</code> as <code>&amp;[u8]</code>","Returns value at position <code>i</code>.","Returns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.","Returns the element at index <code>i</code>","Returns the element at index <code>i</code>.","Returns the value at slot <code>i</code>.","Return the <code>i</code>th child array.","Returns the slot <code>index</code> as a <code>Scalar</code>.","Returns the value of the element at index <code>i</code>, ignoring the …","Returns the value of the element at index <code>i</code>.","Returns the value of the element at index <code>i</code>, ignoring the …","Returns the value of the element at index <code>i</code>.","Returns the element at index <code>i</code>","Returns the element at index <code>i</code> as bool","Returns the element at index <code>i</code> as <code>&amp;[u8]</code>","Returns the element at index <code>i</code> as &amp;str","Returns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.","Returns the element at index <code>i</code> as &amp;str","Returns the element at index <code>i</code>.","Returns the value at index <code>i</code>. The value on null slots is …","Returns the slot <code>index</code> as a <code>Scalar</code>.","Returns the value of the element at index <code>i</code>, ignoring the …","Returns the value of the element at index <code>i</code>.","Returns the value of the element at index <code>i</code>, ignoring the …","The values of the array","returns its values.","returns its values.","Returns the values of this <code>BinaryArray</code>.","","Returns its values.","The values <code>Bitmap</code>. Values on null slots are undetermined …","returns a reference to the inner values.","Returns the values of the <code>DictionaryArray</code>.","Returns its values.","Returns the values allocated on this <code>FixedSizeBinaryArray</code>.","The inner values","Returns the inner array.","The values","The values.","Returns its values.","The values <code>Buffer</code>. Values on null slots are undetermined …","The values","Returns the values of this <code>StructArray</code>.","returns its values.","returns its values.","Returns the values of this <code>Utf8Array</code>.","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the values of this array","Returns an iterator of <code>&amp;[u8]</code> over every element of this …","Returns an iterator over the values of this …","Returns an iterator over the values of this <code>BooleanArray</code>.","Returns an iterator of <code>Box&lt;dyn Scalar&gt;</code>","Returns iterator over the values of <code>FixedSizeBinaryArray</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>T</code>","Returns an iterator of the values, <code>&amp;T</code>, ignoring the arrays…","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>&amp;str</code>","Returns an iterator of <code>&amp;str</code>","Returns an iterator over the the values [<code>V::IterValue</code>].","Returns a mutable slice of values.","Returns a mutable slice of values.","","","","","","","","","","","","","","","","","","","","","","","","","Initializes a new <code>MutableBinaryValuesArray</code> with a …","Initializes a new <code>MutableBinaryArray</code> with a pre-allocated …","Initializes a new <code>MutableUtf8Array</code> with a pre-allocated …","Initializes a new <code>MutableUtf8ValuesArray</code> with a …","Initializes a new <code>MutableBinaryValuesArray</code> with a …","Initializes a new <code>MutableBinaryArray</code> with a pre-allocated …","Creates an new <code>MutableBooleanArray</code> with a capacity of …","Creates a new <code>MutableFixedSizeBinaryArray</code> with capacity …","Creates a new <code>MutableListArray</code> with a capacity.","Creates a new <code>MutablePrimitiveArray</code> with a capacity.","Initializes a new <code>MutableUtf8Array</code> with a pre-allocated …","Initializes a new <code>MutableUtf8ValuesArray</code> with a …","Creates a new <code>MutablePrimitiveArray</code> from a capacity and …","Clones this <code>Array</code> with a new new assigned bitmap.","","Returns this <code>BinaryArray</code> with a new validity.","Returns this <code>BooleanArray</code> with a new validity.","","Returns this <code>DictionaryArray</code> with a new validity.","","Returns this <code>FixedSizeBinaryArray</code> with a new validity.","","","Returns this <code>FixedSizeListArray</code> with a new validity.","","Returns this <code>ListArray</code> with a new validity.","","Returns this <code>MapArray</code> with a new validity.","","Returns this <code>PrimitiveArray</code> with a new validity.","","","Returns this <code>StructArray</code> with a new validity.","","","Returns this <code>Utf8Array</code> with a new validity.","Returns a clone of this <code>BooleanArray</code> with new values.","Returns this <code>PrimitiveArray</code> with new values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Describes a struct that can be extended from slices of …","Concrete <code>Growable</code> for the <code>BinaryArray</code>.","Concrete <code>Growable</code> for the <code>BooleanArray</code>.","Concrete <code>Growable</code> for the <code>DictionaryArray</code>.","Concrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.","Concrete <code>Growable</code> for the <code>FixedSizeListArray</code>.","Concrete <code>Growable</code> for the <code>ListArray</code>.","Concrete <code>Growable</code> for the <code>NullArray</code>.","Concrete <code>Growable</code> for the <code>PrimitiveArray</code>.","Concrete <code>Growable</code> for the <code>StructArray</code>.","Concrete <code>Growable</code> for the <code>UnionArray</code>.","Concrete <code>Growable</code> for the <code>Utf8Array</code>.","","","","","","","","","","","","","","","","","","","","","Converts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …","Converts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extends this <code>Growable</code> with elements from the bounded <code>Array</code> …","","","","","","","","","","","","","","","","","","","","","Extends this <code>Growable</code> with null elements, disregarding the …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The current length of the <code>Growable</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.","Creates a new <code>GrowableBinary</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableUnion</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableBoolean</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableFixedSizeBinary</code> bound to <code>arrays</code> with …","Creates a new <code>GrowableNull</code>.","Creates a new <code>GrowablePrimitive</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableList</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableStruct</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableFixedSizeList</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableUtf8</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableDictionary</code> bound to <code>arrays</code> with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compare the values at two arbitrary indices in two arrays.","returns a comparison function that compares values at two …","Total order of all native types whose Rust implementation …","implements comparison using IEEE 754 total ordering for f32","implements comparison using IEEE 754 total ordering for f64","An immutable container semantically equivalent to …","This crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.","A container of booleans. <code>MutableBitmap</code> is semantically …","","","","Compute bitwise AND operation","Returns the byte slice of this <code>Bitmap</code>.","Returns the slice of bytes of this <code>MutableBitmap</code>. Note …","","","","","Apply a bitwise operation <code>op</code> to two inputs and return the …","Apply a bitwise binary operation to a <code>MutableBitmap</code>.","","","","","","","","","","","","","","","","","","Returns the capacity of <code>MutableBitmap</code> in number of bits.","","","","","","","","","","Creates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.","Returns an iterator over bits in bit chunks <code>BitChunk</code>.","Empties the <code>MutableBitmap</code>.","","","","","","","","","","","","","","","","","","","","","","","","Extends <code>MutableBitmap</code> by <code>additional</code> values of constant …","Extends the <code>MutableBitmap</code> from a <code>Bitmap</code>.","Extends the <code>MutableBitmap</code> from a slice of bytes with …","Extends <code>self</code> from a <code>TrustedLen</code> iterator.","Extends <code>self</code> from an iterator of trusted len.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.","","","Initializes a <code>MutableBitmap</code> with all values set to valid/ …","Initializes a zeroed <code>MutableBitmap</code>.","Creates a new <code>Bitmap</code> from an iterator of booleans.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from an iterator of booleans.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from a slice and length.","Alias for <code>Bitmap::try_new().unwrap()</code> This function is <code>O(1)</code>","Initializes a <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a length. …","Returns whether the bit at position <code>i</code> is set.","Returns whether the position <code>index</code> is set.","Returns whether the bit at position <code>i</code> is set.","Unsafely returns whether the bit at position <code>i</code> is set.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Converts this <code>Bitmap</code> to <code>MutableBitmap</code>, returning itself if …","Returns whether <code>Bitmap</code> is empty","Returns whether <code>MutableBitmap</code> is empty.","Returns a new iterator of <code>bool</code> over this bitmap","constructs a new iterator over the bits of <code>MutableBitmap</code>.","Returns the length of the <code>Bitmap</code>.","Returns the length of the <code>MutableBitmap</code>.","","","","","","","","","Converts this <code>Bitmap</code> into a <code>MutableBitmap</code>, cloning its …","Initializes an empty <code>Bitmap</code>.","Creates a new <code>IntoIter</code> from a <code>Bitmap</code>","Initializes an empty <code>MutableBitmap</code>.","Initializes an new <code>Bitmap</code> filled with unset values.","","","","","","Returns the number of unset bits on this <code>Bitmap</code>.","Returns the number of unset bits on this <code>MutableBitmap</code>.","Counts the nulls (unset bits) starting from <code>offset</code> bits …","","Compute bitwise OR operation","","","","","","","Pop the last bit from the <code>MutableBitmap</code>. Note if the …","Pushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …","Pushes a new bit to the <code>MutableBitmap</code>","Apply a bitwise operation <code>op</code> to four inputs and return the …","Reserves <code>additional</code> bits in the <code>MutableBitmap</code>, potentially …","","","","","","","Sets the position <code>index</code> to <code>value</code>","","Sets the position <code>index</code> to <code>value</code>","Shrinks the capacity of the <code>MutableBitmap</code> to fit its …","","Slices <code>self</code>, offsetting by <code>offset</code> and truncating up to …","Slices <code>self</code>, offseting by <code>offset</code> and truncating up to …","Apply a bitwise operation <code>op</code> to three inputs and return …","","","","","","","Creates a new <code>Bitmap</code> from a fallible iterator of booleans.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from a fallible iterator of booleans.","Creates a new <code>MutableBitmap</code> from an falible iterator of …","","","","Initializes a new <code>Bitmap</code> from vector of bytes and a length.","Initializes a new <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a …","","","","Apply a bitwise operation <code>op</code> to one input and return the …","Applies a function to every bit of this <code>MutableBitmap</code> in …","Returns the number of unset bits on this <code>Bitmap</code>.","Returns the number of unset bits on this <code>MutableBitmap</code>.","","","","","","","","","","","General utilities for bitmaps representing items where LSB …","","","","","Initializes a pre-allocated <code>MutableBitmap</code> with capacity …","","","","","","","Compute bitwise XOR operation","A chunk of bits. This is used to create masks of a given …","Trait representing an exact iterator over bytes in <code>BitChunk</code>…","This struct is used to efficiently iterate over bit masks …","An iterator over a slice of bytes in <code>BitChunk</code>s.","An iterator over mutable slices of bytes of exact size.","An iterator over bits according to the LSB, i.e. the bytes …","There are null values","There are no null values","Iterator over a bitmap that returns slices of set regions …","An <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …","An <code>Iterator</code> over validity and values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of bytes required to hold <code>bits</code> bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of zero bits in the slice offsetted by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Formats <code>bytes</code> taking into account an offset and length of …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","convert itself from bytes.","Returns whether bit at position <code>i</code> in <code>data</code> is set","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns whether there are still elements in this iterator","Returns whether bit at position <code>i</code> in <code>byte</code> is set or not","","","Returns the number of chunks of this iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>BitChunksExact</code>.","Creates a <code>BitChunks</code>.","Returns a new <code>BitChunksExactMut</code>","Creates a new <code>BitmapIter</code>.","Creates a new <code>SlicesIterator</code>","Creates a new <code>ZipValidityIter</code>.","Returns a new <code>ZipValidity</code>","Returns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The remainder of the iterator.","","Returns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…","Returns the remainder <code>BitChunk</code>.","","The remainder slice","","","","An iterator over individual items of the remainder","The number of items in the remainder","","","Returns the remainder bits in <code>BitChunks::remainder</code>.","The length of the remainder slice in bits.","","","","","","","","","","","","","","","","","","Sets bit at position <code>i</code> in <code>byte</code>","Sets bit at position <code>i</code> in <code>data</code>","Sets bit at position <code>i</code> in <code>data</code> without doing bound checks","","","","","","","Returns the total number of slots. It corresponds to the …","","","","","convert itself into bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwrap into an iterator that has null values.","Unwrap into an iterator that has no null values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Buffer</code> is a contiguous memory region that can be shared …","","","","","Returns the byte slice stored in this buffer","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns a mutable reference to its underlying <code>Vec</code>, if …","","Calls <code>U::from(self)</code>.","","","Returns whether the buffer is empty.","Returns the number of bytes in the buffer","","","","Creates an empty <code>Buffer</code>.","","","Returns the offset of this buffer.","","","","","","Get the strong count of underlying <code>Arc</code> data buffer.","Get the weak count of underlying <code>Arc</code> data buffer.","Returns a new <code>Buffer</code> that is a slice of this buffer …","Returns a new <code>Buffer</code> that is a slice of this buffer …","","","","","","","","","","","","","","","","","","","A vector of trait objects of <code>Array</code> where every item has …","","returns the <code>Array</code>s in <code>Chunk</code>","","","","","","","","","","returns the <code>Array</code>s in <code>Chunk</code>","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Consumes <code>Chunk</code> into its underlying arrays. The arrays are …","returns whether the columns have any rows","returns the number of rows of every array","","","Creates a new <code>Chunk</code>.","","","","","","","","Creates a new <code>Chunk</code>.","","","","","","","","Contains different aggregation functions","Defines basic arithmetic kernels for <code>PrimitiveArray</code>s.","Defines kernels suitable to perform operations to …","Defines generics suitable to perform operations to …","null-preserving operators such as <code>and</code>, <code>or</code> and <code>not</code>.","Boolean operators of Kleene logic.","Defines different casting operators such as <code>cast</code> or …","Contains comparison operators","Contains the concatenate kernel","Contains operators to filter arrays such as <code>filter</code>.","Contains the operator <code>if_then_else</code>.","Defines take kernel for <code>Array</code>","The maximum value","The minimum value","Trait describing a type describing multiple lanes with an …","Object that can reduce itself to a number. This is used in …","Whether <code>max</code> supports <code>data_type</code>","Whether <code>min</code> supports <code>data_type</code>","Whether <code>sum</code> supports <code>data_type</code>","Returns the total (heap) allocated size of the array in …","Returns the maximum of <code>Array</code>. The scalar is null when all …","Returns the maximum value in the binary array, according …","Returns the maximum value in the boolean array","reduce itself to the minimum","lane-wise maximum between two instances","Returns the maximum value in the array, according to the …","Returns the maximum value in the string array, according …","Returns the minimum of <code>Array</code>. The scalar is null when all …","Returns the minimum value in the binary array, according …","Returns the minimum value in the boolean array.","reduce itself to the maximum","lane-wise minimum between two instances","Returns the minimum value in the array, according to the …","Returns the minimum value in the string array, according …","returns a new instance with all lanes equal to <code>MAX</code>","returns a new instance with all lanes equal to <code>MIN</code>","Reduces this element to a single value.","Returns the sum of all elements in <code>array</code> as a <code>Scalar</code> of …","Returns the sum of values in the array.","Defines basic addition operation for primitive arrays","Defines checked addition operation for primitive arrays","Defines checked division operation for primitive arrays","Defines checked multiplication operation for primitive …","Defines checked reminder operation for primitive arrays","Defines checked subtraction operation for primitive arrays","Defines basic division operation for primitive arrays","Defines basic multiplication operation for primitive arrays","Defines Overflowing addition operation for primitive arrays","Defines Overflowing multiplication operation for primitive …","Defines Overflowing subtraction operation for primitive …","Defines basic reminder operation for primitive arrays","Defines saturating addition operation for primitive arrays","Defines saturating multiplication operation for primitive …","Defines saturating subtraction operation for primitive …","Defines basic subtraction operation for primitive arrays","Defines wrapping addition operation for primitive arrays","Defines wrapping multiplication operation for primitive …","Defines wrapping subtraction operation for primitive arrays","Adds two <code>Array</code>s.","Adds itself to <code>rhs</code>","Adds an <code>Array</code> and a <code>Scalar</code>.","Contains arithemtic functions for <code>PrimitiveArray</code>s.","Returns whether two <code>DataType</code>s can be added by <code>add</code>.","Returns whether two <code>DataType</code>s can be divided by <code>div</code>.","Returns whether two <code>DataType</code>s can be multiplied by <code>mul</code>.","Whether <code>neg</code> is supported for a given <code>DataType</code>","Returns whether two <code>DataType</code>s “can be remainder” by <code>rem</code>…","Returns whether two <code>DataType</code>s can be subtracted by <code>sub</code>.","Checked add","checked division","checked multiplication","checked remainder","checked subtraction","Defines the arithmetic kernels for Decimal <code>PrimitiveArrays</code>…","Divide of two <code>Array</code>s.","division","Divide an <code>Array</code> with a <code>Scalar</code>.","Multiply two <code>Array</code>s.","multiplication","Multiply an <code>Array</code> with a <code>Scalar</code>.","Negates an <code>Array</code>.","Overflowing add","overflowing multiplication","overflowing subtraction","Remainder of two <code>Array</code>s.","remainder","Saturating add","saturating multiplication","saturarting subtraction","Subtracts two <code>Array</code>s.","subtraction","Adds an <code>Array</code> and a <code>Scalar</code>.","Defines the arithmetic kernels for adding a Duration to a …","Adds itself to <code>rhs</code> using wrapping addition","wrapping multiplication","wrapping subtraction","Trait describing a <code>NativeType</code> whose semantics of …","Adds two primitive arrays with the same type. Panics if …","Adds a scalar T to a primitive array of type T. Panics if …","Checked addition of two primitive arrays. If the result …","Checked addition of a scalar T to a primitive array of …","Checked division of two primitive arrays. If the result …","Checked division of a primitive array of type T by a …","Checked multiplication of two primitive arrays. If the …","Checked multiplication of a scalar T to a primitive array …","Checked negates values from array.","Checked operation of raising an array of primitives to the …","Checked remainder of two primitive arrays. If the result …","Checked remainder of a primitive array of type T by a …","Checked subtraction of two primitive arrays. If the result …","Checked subtraction of a scalar T to a primitive array of …","Divides two primitive arrays with the same type. Panics if …","Divide a primitive array of type T by a scalar T. Panics …","Multiplies two primitive arrays with the same type. Panics …","Multiply a scalar T to a primitive array of type T. Panics …","Negates values from array.","Overflowing addition of two primitive arrays. If the …","Overflowing addition of a scalar T to a primitive array of …","Overflowing multiplication of two primitive arrays. If the …","Overflowing multiplication of a scalar T to a primitive …","Overflowing subtraction of two primitive arrays. If the …","Overflowing subtraction of a scalar T to a primitive array …","Raises an array of primitives to the power of exponent. …","Remainder of two primitive arrays with the same type. …","Remainder a primitive array of type T by a scalar T. …","Saturating addition of two primitive arrays. If the result …","Saturated addition of a scalar T to a primitive array of …","Saturating multiplication of two primitive arrays. If the …","Saturated multiplication of a scalar T to a primitive …","Saturating subtraction of two primitive arrays. If the …","Saturated subtraction of a scalar T to a primitive array …","Subtracts two primitive arrays with the same type. Panics …","Subtract a scalar T to a primitive array of type T. Panics …","Wrapping addition of two <code>PrimitiveArray</code>s. It wraps around …","Wrapping addition of a scalar T to a <code>PrimitiveArray</code> of …","Wrapping multiplication of two <code>PrimitiveArray</code>s. It wraps …","Wrapping multiplication of a scalar T to a <code>PrimitiveArray</code> …","Wrapping negates values from array.","Wrapping subtraction of two <code>PrimitiveArray</code>s. It wraps …","Wrapping subtraction of a scalar T to a <code>PrimitiveArray</code> of …","Adaptive addition of two decimal primitive arrays with …","Adaptive division of two decimal primitive arrays with …","Adaptive multiplication of two decimal primitive arrays …","Adaptive subtract of two decimal primitive arrays with …","Adds two decimal <code>PrimitiveArray</code> with the same precision …","Checked addition of two decimal primitive arrays with the …","Checked division of two decimal primitive arrays with the …","Checked multiplication of two decimal primitive arrays …","Checked subtract of two decimal primitive arrays with the …","Divide two decimal primitive arrays with the same …","Multiply a decimal <code>PrimitiveArray</code> with a <code>PrimitiveScalar</code> …","Multiply two decimal primitive arrays with the same …","Multiply a decimal <code>PrimitiveArray</code> with a <code>PrimitiveScalar</code> …","Saturated addition of two decimal primitive arrays with …","Saturated division of two decimal primitive arrays with …","Saturated multiplication of two decimal primitive arrays …","Saturated subtraction of two decimal primitive arrays with …","Subtract two decimal primitive arrays with the same …","Adds a duration to a time array (Timestamp, Time and …","Adds a duration to a time array (Timestamp, Time and …","Adds an interval to a <code>DataType::Timestamp</code>.","Adds an interval to a <code>DataType::Timestamp</code>.","Subtract a duration to a time array (Timestamp, Time and …","Calculates the difference between two timestamps as …","Subtract a duration to a time array (Timestamp, Time and …","Calculates the difference between two timestamps returning …","Applies a binary operations to two primitive arrays. This …","Version of binary that creates a mutable bitmap that is …","Version of binary that returns an array and bitmap. Used …","Version of binary that checks for errors in the closure …","Version of unary that checks for errors in the closure …","Applies an unary and infallible function to a …","Version of unary that creates a mutable bitmap that is …","Version of unary that returns an array and bitmap. Used …","Applies a binary function to two <code>PrimitiveArray</code>s, …","Applies an unary function to a <code>PrimitiveArray</code>, optionally …","Check if all of the values in the array are <code>true</code>","Performs <code>&amp;&amp;</code> operation on two <code>BooleanArray</code>, combining the …","Performs <code>AND</code> operation on an array and a scalar value. If …","Returns whether any of the values in the array is <code>true</code>","Returns a non-null <code>BooleanArray</code> with whether each value of …","Returns a non-null <code>BooleanArray</code> with whether each value of …","Performs unary <code>NOT</code> operation on an arrays. If value is …","Performs <code>||</code> operation on two <code>BooleanArray</code>, combining the …","Performs <code>OR</code> operation on an array and a scalar value. If …","Returns whether all values in the array are <code>true</code>","Logical ‘and’ operation on two arrays with Kleene logic","Logical ‘and’ operation on an array and a scalar value …","Returns whether any of the values in the array is <code>true</code>","Logical ‘or’ operation on two arrays with Kleene logic","Logical ‘or’ operation on an array and a scalar value …","options defining how Cast kernels behave","","","Conversion of binary","Cast <code>BinaryArray</code> to <code>DictionaryArray</code>, also known as packing.","Conversion of binary","Conversion to utf8","Casts a <code>BinaryArray</code> to a <code>PrimitiveArray</code>, making any …","Conversion to utf8","Casts the <code>BooleanArray</code> to a <code>BinaryArray</code>, casting trues to …","Casts the <code>BooleanArray</code> to a <code>PrimitiveArray</code>.","Casts the <code>BooleanArray</code> to a <code>Utf8Array</code>, casting trues to <code>&quot;1&quot;</code>…","","","Return true if a value of type <code>from_type</code> can be cast into a","Cast <code>array</code> to the provided data type and return a new <code>Array</code>…","","","","","","Conversion of dates","Conversion of dates","Casts <code>days_ms</code>s to <code>months_days_ns</code>. This operation is …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","","","","Casts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> backed by …","Casts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> by …","Casts a <code>DictionaryArray</code> to its values’ <code>DataType</code>, also …","","","Casts f16 into f32","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","","Returns the argument unchanged.","","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Calls <code>U::from(self)</code>.","","","Casts months represented as <code>i32</code>s to <code>months_days_ns</code>. This …","Returns a <code>Utf8Array</code> where every element is the utf8 …","","","default to false whether to cast to an integer at the …","Casts a <code>BinaryArray</code> to a <code>PrimitiveArray</code> at best-effort …","Casts a <code>Utf8Array</code> to a <code>PrimitiveArray</code> at best-effort using …","Cast <code>PrimitiveArray</code> as a <code>PrimitiveArray</code> Same as …","Returns a <code>BinaryArray</code> where every element is the binary …","Returns a <code>BooleanArray</code> where every element is different …","Cast <code>PrimitiveArray</code> to <code>DictionaryArray</code>. Also known as …","Cast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of another …","Cast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of the same …","Returns a <code>Utf8Array</code> where every element is the utf8 …","","","Conversion of time","Conversion of times","Conversion of times","Conversion of time","Conversion of times","Conversion of times","Conversion of timestamp","Conversion of timestamp","Conversion of timestamp","Returns a <code>Utf8Array</code> where every element is the utf8 …","","","","","","","","Conversion of utf8","Conversion to binary","Casts a <code>Utf8Array</code> to a Date32 primitive, making any …","Casts a <code>Utf8Array</code> to a Date64 primitive, making any …","Cast <code>Utf8Array</code> to <code>DictionaryArray</code>, also known as packing.","Conversion of utf8","<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …","Casts a <code>Utf8Array</code> to a <code>PrimitiveArray</code>, making any …","<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …","","default to false whether an overflowing cast should be …","","","Similar to dictionary_to_dictionary_keys, but overflowing …","Similar to dictionary_to_dictionary_values, but …","The 8 lane representation of <code>Self</code>","<code>NativeType</code> that supports a representation of 8 lanes","Trait declaring an 8-lane multi-data.","Trait implemented by implementors of <code>Simd8Lanes</code> whose <code>Simd8</code>…","Trait implemented by implementors of <code>Simd8Lanes</code> whose <code>Simd8</code>…","Comparison functions for <code>BinaryArray</code>","Comparison functions for <code>BooleanArray</code>","Returns whether a <code>DataType</code> is comparable is supported by <code>eq</code>…","Returns whether a <code>DataType</code> is supported by <code>eq_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by <code>gt</code>…","Returns whether a <code>DataType</code> is comparable is supported by …","Returns whether a <code>DataType</code> is supported by <code>gt_eq_scalar</code>.","Returns whether a <code>DataType</code> is supported by <code>gt_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by <code>lt</code>…","Returns whether a <code>DataType</code> is comparable is supported by <code>lt</code>…","Returns whether a <code>DataType</code> is supported by <code>lt_eq_scalar</code>.","Returns whether a <code>DataType</code> is supported by <code>lt_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by …","Returns whether a <code>DataType</code> is supported by <code>neq_scalar</code>.","<code>==</code> between two <code>Array</code>s. Use <code>can_eq</code> to check whether the …","Equal","<code>==</code> between two <code>Array</code>s and includes validities in …","<code>==</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_eq_scalar</code> to …","<code>==</code> between an <code>Array</code> and a <code>Scalar</code> and includes validities …","Utility for low level end users that implement their own …","Utility for low level end users that implement their own …","loads a complete chunk","loads an incomplete chunk, filling the remaining items …","<code>&gt;</code> between two <code>Array</code>s. Use <code>can_gt</code> to check whether the …","Greater than","<code>&gt;=</code> between two <code>Array</code>s. Use <code>can_gt_eq</code> to check whether the …","Greater than or equal to","<code>&gt;=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_gt_eq_scalar</code> to …","<code>&gt;</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_gt_scalar</code> to …","<code>&lt;</code> between two <code>Array</code>s. Use <code>can_lt</code> to check whether the …","Less than","<code>&lt;=</code> between two <code>Array</code>s. Use <code>can_lt_eq</code> to check whether the …","Less than or equal to","<code>&lt;=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_lt_eq_scalar</code> to …","<code>&lt;</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_lt_scalar</code> to …","<code>!=</code> between two <code>Array</code>s. Use <code>can_neq</code> to check whether the …","Not equal","<code>!=</code> between two <code>Array</code>s and includes validities in …","<code>!=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_neq_scalar</code> to …","<code>!=</code> between an <code>Array</code> and a <code>Scalar</code> and includes validities …","Comparison functions for <code>PrimitiveArray</code>","Comparison functions for <code>Utf8Array</code>","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and include …","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and a scalar …","Perform <code>lhs &gt; rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &gt; rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code> and a scalar …","Evaluate <code>op(left, right)</code> for <code>BooleanArray</code> and scalar using …","Perform <code>lhs == rhs</code> operation on two <code>BooleanArray</code>s.","Perform <code>lhs == rhs</code> operation on two <code>BooleanArray</code>s and …","Perform <code>lhs == rhs</code> operation on a <code>BooleanArray</code> and a …","Perform <code>lhs == rhs</code> operation on a <code>BooleanArray</code> and a …","Perform <code>left &gt; right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on an array and a scalar …","<code>lhs != rhs</code> for <code>BooleanArray</code>","<code>lhs != rhs</code> for <code>BooleanArray</code> and include validities in …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on an array and a scalar …","Evaluate <code>op(left, right)</code> for <code>PrimitiveArray</code> and scalar …","Perform <code>lhs == rhs</code> operation on two arrays.","Perform <code>lhs == rhs</code> operation on two arrays and include …","Perform <code>left == right</code> operation on an array and a scalar …","Perform <code>left == right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on two arrays.","Perform <code>left != right</code> operation on two arrays and include …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and include …","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and a scalar. …","Perform <code>lhs &gt; rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &gt; rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and include …","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and a scalar. …","Concatenate multiple Array of the same type into a single …","Function that can filter arbitrary arrays","Returns a prepared function optimized to filter multiple …","Filters an Array, returning elements matching the filter …","Returns a new Chunk with arrays containing only values …","Returns the values from <code>lhs</code> if the predicate is <code>true</code> or …","Checks if an array of type <code>datatype</code> can perform take …","Returns a new <code>Array</code> with only indices at <code>indices</code>. Null …","Opaque binary data of variable length.","Opaque binary data of variable length whose offsets are …","A boolean represented as a single bit.","<code>true</code> and <code>false</code>.","The set of supported logical types in this crate.","An <code>i32</code> representing the elapsed time since UNIX epoch …","An <code>i64</code> representing the elapsed time since UNIX epoch …","The number of elapsed days and milliseconds, stored as 2 …","Two i32 representing days and ms","Decimal value with precision and scale precision is the …","Decimal backed by 256 bits","Dense union","A dictionary encoded array by <code>IntegerType</code>.","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","Measure of elapsed time. This elapsed time is a physical …","Extension type.","Represents Arrow’s metadata of a “column”.","Opaque binary data of fixed size.","Opaque binary data of fixed size. Enum parameter specifies …","A list of some data type with fixed length.","A list of some logical data type with a fixed number of …","A 16-bit floating point number.","An 16-bit float","A 32-bit floating point number.","A <code>f32</code>","A 64-bit floating point number.","A <code>f64</code>","A signed 128-bit integer.","A signed 16-bit integer.","A signed 16-bit integer.","An <code>i16</code>","A signed 256-bit integer.","A signed 32-bit integer.","A signed 32-bit integer.","An <code>i32</code>","A signed 64-bit integer.","A signed 64-bit integer.","An <code>i64</code>","A signed 8-bit integer.","A signed 8-bit integer.","An <code>i8</code>","the set of valid indices types of a dictionary-encoded …","A “calendar” interval modeling elapsed time that takes …","Interval units defined in Arrow","Opaque binary data of variable length and 64-bit offsets.","Opaque binary data of variable length whose offsets are …","A list of some data type with variable length and 64-bit …","A list of some logical data type whose offsets are …","A variable-length string in Unicode with UFT-8 encoding …","A variable-length UTF-8 encoded string whose offsets are …","A list of some data type with variable length.","A list of some logical data type whose offsets are …","A nested type.","A nested type that is represented as","typedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …","Time in microseconds.","Time in milliseconds.","months_days_ns(i32, i32, i64)","The number of elapsed months (i32), days (i32) and …","Time in nanoseconds.","A Null with no allocation.","Null type","The set of physical types: unique in-memory …","An array where each slot has a known compile-time size.","The set of all implementations of the sealed trait …","An ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.","typedef for <code>Arc&lt;Schema&gt;</code>.","Time in seconds.","Sparse union","A nested type that contains an arbitrary number of fields.","A nested <code>DataType</code> with a given number of <code>Field</code>s.","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","The time units defined in Arrow.","A <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …","An unsigned 16-bit integer.","An unsigned 16-bit integer.","An <code>u16</code>","An unsigned 32-bit integer.","An unsigned 32-bit integer.","An <code>u32</code>","An unsigned 64-bit integer.","An unsigned 64-bit integer.","An <code>u64</code>","An unsigned 8-bit integer.","An unsigned 8-bit integer.","An <code>u8</code>","A nested type that represents slots of differing types.","A nested datatype that can represent slots of differing …","Mode of <code>DataType::Union</code>","A variable-length string in Unicode with UTF-8 encoding.","A variable-length UTF-8 encoded string whose offsets are …","The number of elapsed whole months.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Field</code>’s <code>DataType</code>.","Its logical <code>DataType</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether this physical type equals <code>PhysicalType::Primitive</code> …","","","","","","","","","","","","","","","","","","","The fields composing this schema.","Returns a new <code>Schema</code> with a subset of all fields whose …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","support get extension for metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the mode is dense","Its nullability","Returns whether the mode is sparse","","","","","","","","","","","","","","","","","","","Additional custom (opaque) metadata.","Optional metadata.","Its name","Creates a new <code>Field</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a <code>UnionMode::Sparse</code> if the input bool is true, …","Returns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …","","","","","","","","","","the <code>PhysicalType</code> of this <code>DataType</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Field</code> with metadata.","Attaches a <code>Metadata</code> to <code>Schema</code>","","","","","","","","","","","","","","","","","","","Enum with all errors in this crate.","Wrapper for an error triggered by a dependency","Error during import or export to/from a format","When an invalid argument is passed to a function.","Wrapper for IO errors","Returned when functionality is not yet available.","Whenever incoming data from the C data interface, IPC or …","Whenever pushing to a container fails because it does not …","Typedef for a <code>std::result::Result</code> of an <code>Error</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Wraps an external error in an <code>Error</code>.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","ABI-compatible struct for <code>ArrowArray</code>","ABI-compatible struct for <code>ArrowArrayStream</code>.","Implements an iterator of <code>Array</code> consumed from the C stream …","ABI-compatible struct for <code>ArrowSchema</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create an empty ArrowSchema","creates an empty <code>ArrowArray</code>, which can be used to import …","Creates an empty <code>ArrowArrayStream</code> used to import from a …","Exports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.","Exports a <code>Field</code> to the C data interface.","Exports an iterator to the C stream interface","Returns the field provided by the stream","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Imports an <code>Array</code> from the C data interface.","Imports a <code>Field</code> from the C data interface.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Functionality to mmap in-memory data regions.","","","","","Advances this iterator by one array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>ArrowArrayStreamReader</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a (non-null) <code>PrimitiveArray</code> from a slice of values.","APIs to read from and write to Arrow’s IPC format.","APIs to represent <code>Chunk</code> as a formatted table.","Struct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …","Struct containing fields and whether the file is written …","","","A struct adapter of Read+Seek+Write to append to IPC files","","","","","","","","","","","","","","","","","","","","","","dictionary id","","","","","","","optional children","The fields in the schema","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Endianness of the file","","","","","","","","","APIs to read Arrow’s IPC format.","","","","","","","","","","","","","","","","","","","","","","","","","APIs to write to Arrow’s IPC format.","how dictionaries are tracked in this crate","The record contains a number of buffers that does not …","Metadata of an Arrow IPC file, written in the footer of …","An iterator of <code>Chunk</code>s from an Arrow IPC file.","A bitmap’s size is smaller than the required for the …","A buffer’s size is smaller than the required for the …","A buffer’s size is larger than the file size","The block is an invalid flatbuffer","The message’s body length is an invalid flatbuffer","The message’s buffers is an invalid flatbuffer","The compression is an invalid flatbuffer","The message’s data is an invalid flatbuffer","The footer’s dictionaries is an invalid flatbuffer","The footer is an invalid flatbuffer","The message’s header is an invalid flatbuffer","The dictionary id is an invalid flatbuffer","The dictionary is_delta is an invalid flatbuffer","The dictionary message is an invalid flatbuffer","The message’s nodes is an invalid flatbuffer","The footer’s record batches is an invalid flatbuffer","The footer’s schema is an invalid flatbuffer","The version is an invalid flatbuffer","The IPC file does not end with [b’A’, b’R’, b’R…","The IPC file does not start with [b’A’, b’R’, b’R…","Invalid dictionary id","Field id is not a dictionary","The message does not contain data","The file’s schema does not contain fields","RecordBatch messages do not contain buffers","The message does not contain a header","RecordBatch messages does not contain nodes","The file’s footer does not contain record batches","The file’s footer does not contain a schema","The first 4 bytes of the last 10 bytes is &lt; 0","The different types of errors that reading from IPC can …","Next item in the stream","Metadata of an Arrow IPC stream, written at the start of …","Arrow Stream reader.","Encodes the stream’s status after each read.","dictionaries can only contain dictionary messages; record …","Relative positions in the file is &lt; 0","A live stream without data","","","","","","","","","The blocks in the file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserialize an flatbuffers-encoded Schema message into …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the inner memory scratches so they can be reused in a …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this FileReader, returning the underlying reader","","","The files’ <code>IpcSchema</code>","The IPC fields tracking dictionaries","Check if the stream is finished","","","","","","","","","","","","","","","Returns the <code>FileMetadata</code>","Return the schema of the stream","","","Creates a new <code>FileReader</code>. Use <code>projection</code> to only take …","Try to create a new stream reader","","","","","","","","","","","","","","","","","Reads the record batch at position <code>index</code> from the reader.","Reads all file’s dictionaries, if any This function is …","Read the Arrow IPC file’s metadata","Reads the metadata of the stream","","","","","","","","","","","","","","","","Return the schema of the file","Return the schema of the file","The schema that is read from the file footer","The schema that is read from the stream’s first message","","Set the inner memory scratches so they can be reused in a …","The total size of the file in bytes","","","","","","","","","","","","","","","","","","","","","Return the data inside this wrapper.","","","","","","","","","","","","","","","","","","","The IPC version of the stream","","","","","","","","","","","","","","","","","","","The size of the IPC buffer","number of bytes of all buffers in the record","the size of the file","Declared number of elements in the buffer","Declared length of the bitmap","Number of bits on the IPC buffer","The requested dictionary id","The requested dictionary id","Bytes required for the <code>length</code> and <code>type</code>","The name of the <code>NativeType</code>","Compression codec","Arrow file writer","LZ4 (framed)","An array <code>Chunk</code> with optional accompanying IPC fields.","Arrow stream writer","Options declaring the behaviour of writing to IPC","ZSTD","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the Arrow columns in this record.","","Whether the buffers should be compressed and which codec …","","Assigns every dictionary field a unique ID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the IPC fields for this record.","","Write continuation bytes, and mark the stream as done","Write footer and closing tag, then mark the writer as done","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Get the inner memory scratches so they can be reused in a …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes itself, returning the inner writer.","Consumes itself into the inner writer","","","","","","","","","","","","","Creates a new <code>StreamWriter</code>","Creates a new <code>FileWriter</code>.","","","","","","","","","","","","","","","","","","","","","","","","Converts a Schema and IpcFields to a flatbuffers-encoded […","Set the inner memory scratches so they can be reused in a …","Starts the stream by writing a Schema message to it. Use …","Writes the header and first (schema) message to the file.","","","","","","","","","","Creates a new <code>FileWriter</code> from an existing file, seeking to …","","","","","","Creates a new <code>FileWriter</code> and writes the header to <code>writer</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes an <code>Array</code> to <code>arrow_data</code>","Writes <code>Chunk</code> to the stream","Writes <code>Chunk</code> to the file","","","","Returns a visual representation of <code>Chunk</code>","Memory maps dictionaries from an IPC file into","Memory maps an record batch from an IPC file into a <code>Chunk</code>.","Whether it is <code>i32</code> (false) or <code>i64</code> (true).","Sealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …","A wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …","A wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:","","","Returns the byte slice stored in this buffer","Returns the byte slice stored in this buffer","","","","","","","Returns a reference to its internal <code>Buffer</code>.","Returns the capacity of <code>Offsets</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Extends itself with <code>additional</code> elements equal to the last …","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Copy-on-write API to convert <code>OffsetsBuffer</code> into <code>Offsets</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner <code>Vec</code>.","Returns the inner <code>Buffer</code>.","Returns the last offset of this container.","Returns the last offset of this container, which is …","Returns the number of offsets in this container.","Returns the length of this container","Returns the length an array with these offsets would be.","Returns an iterator with the lengths of the offsets","","","","","Returns an empty <code>Offsets</code> (i.e. with a single element, the …","Returns an empty <code>OffsetsBuffer</code> (i.e. with a single …","Returns <code>Offsets</code> assuming that <code>offsets</code> fulfills its …","Safety","Returns an <code>Offsets</code> whose all lengths are zero.","","","","","Pops the last element","Reserves <code>additional</code> entries.","","","","","Shrinks the capacity of self to fit.","Returns a new <code>OffsetsBuffer</code> that is a slice of this buffer …","Returns a range (start, end) corresponding to the position …","Returns a range (start, end) corresponding to the position …","Returns a range (start, end) corresponding to the position …","Returns a range (start, end) corresponding to the position …","","","Try extend from an iterator of lengths","Extends itself from another <code>Offsets</code>","Extends itself from another <code>Offsets</code> sliced by <code>start, length</code>","","","","","","","","Creates a new <code>Offsets</code> from an iterator of lengths","Try to create a new <code>Offsets</code> from a sequence of <code>lengths</code>","","","Pushes a new element with a given length.","Pushes a new element with a given length.","","","","","","","","","","","Returns a new <code>Offsets</code> with a capacity, allocating at least …","","","","","The <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).","The <code>Scalar</code> implementation of a boolean.","The <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.","The <code>Scalar</code> implementation of fixed size binary ([…","The scalar equivalent of <code>FixedSizeListArray</code>. Like …","The scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …","The representation of a single entry of a …","The implementation of <code>Scalar</code> for primitive, semantically …","Trait object declaring an optional value with a <code>DataType</code>. …","A single entry of a <code>crate::array::StructArray</code>.","A single entry of a <code>crate::array::UnionArray</code>.","The implementation of <code>Scalar</code> for utf8, semantically …","","","","","","","","","","","","convert itself to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the logical type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","whether it is valid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","returns a new <code>DictionaryScalar</code>","Returns a new <code>PrimitiveScalar</code>.","Returns a new <code>Utf8Scalar</code>","Returns a new <code>BinaryScalar</code>.","Returns a new <code>BooleanScalar</code>","returns a new <code>ListScalar</code>","A new <code>NullScalar</code>","Returns a new <code>StructScalar</code>","returns a new <code>FixedSizeListScalar</code>","Returns a new <code>FixedSizeBinaryScalar</code>.","Returns a new <code>UnionScalar</code>","creates a new <code>Scalar</code> from an <code>Array</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>PrimitiveScalar</code> with the same value but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the type of the union scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The values of the <code>DictionaryScalar</code>","Returns the optional value.","Returns the value irrespectively of the validity.","Its value","The value","Its value","Returns the inner value","","","","","","","","The values of the <code>ListScalar</code>","Returns the values irrespectively of the validity.","The values of the <code>FixedSizeListScalar</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of days between 0001-01-01 and 1970-01-01","Number of microseconds in a second","Number of milliseconds in a second","Number of milliseconds in a day","Number of nanoseconds in a second","Number of seconds in a day","Adds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …","Adds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>","Parses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …","converts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>","converts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to …","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to …","converts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>","Converts a timestamp in <code>time_unit</code> and <code>timezone</code> into […","Converts a timestamp in <code>time_unit</code> and <code>timezone</code> into […","converts a <code>i64</code> representing a <code>timestamp(us)</code> to …","Calculates the scale factor between two TimeUnits. The …","Parses a <code>Utf8Array</code> to naive timestamp, i.e. …","Parses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …","Parses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …","Parses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …","An iterator of known, fixed size. A trait denoting Rusts’…","A chunk of bits. This is used to create masks of a given …","An [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …","An [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code> returning the …","Type denoting its representation as bytes. This is <code>[u8; N]</code> …","Two i32 representing days and ms","The difference between 1.0 and the next largest …","A 16-bit floating point number.","A 32-bit floating point number.","A 64-bit floating point number.","Whether it is <code>i32</code> (false) or <code>i64</code> (true).","Sealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…","Range of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …","A signed 128-bit integer.","A signed 16-bit integer.","A signed 256-bit integer.","A signed 32-bit integer.","A signed 64-bit integer.","A signed 8-bit integer.","months_days_ns(i32, i32, i64)","Sealed trait implemented by all physical types that can be …","Sealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …","The corresponding variant of <code>PrimitiveType</code>.","The set of all implementations of the sealed trait …","An unsigned 16-bit integer.","An unsigned 32-bit integer.","An unsigned 64-bit integer.","An unsigned 8-bit integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of days","The number of days","The in-memory representation of the DayMillisecond variant …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type representation of the Float16 physical type","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert itself from <code>usize</code>.","From bytes in big endian","","","","","Casts from u16.","Casts an <code>f32</code> into <code>f16</code>","From bytes in little endian","","","","","convert itself from bytes.","Convert itself from <code>usize</code>.","Returns a new <code>i256</code> from two <code>i128</code>.","","","","","","","Physical representation of a decimal","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","The number of milliseconds","The number of months","The in-memory representation of the MonthDayNano variant …","","","","","","","","","","","","","","","","","Creates a new <code>BitChunkIter</code> with <code>len</code> bits.","Creates a new <code>BitChunkOnes</code> with <code>len</code> bits.","Returns a new <code>IndexRange</code>.","A new <code>days_ms</code>.","A new <code>months_days_ns</code>.","","","","","","","","The number of nanoseconds","","","","","","","","","","","","","","","","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","","","","","","","","","","","","","","","","","Contains traits and implementations of multi-data used in …","","","","","","To bytes in big endian","","","","","Casts to u16.","Casts this <code>f16</code> to <code>f32</code>","To bytes in little endian","","","","","convert itself into bytes.","","","","","","","","","Convert itself to <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type holding bits for masks.","Describes the ability to convert itself from a <code>BitChunk</code>.","Number of lanes","Type used for masking.","The <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …","A struct that lends itself well to be compiled leveraging …","Trait implemented by some <code>NativeType</code> that have a SIMD …","The SIMD type associated with this trait. This type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a tuple of 3 items whose middle item is itself, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert itself from a slice.","Convert itself from a slice.","","","","","","","","","","","","","","","","creates a new Self from <code>v</code> by populating items from <code>v</code> up to …","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets values to <code>default</code> based on <code>mask</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>","Derive macro for arrow deserialize","Derive macro for arrow fields","Derive macro for arrow serialize","Enables the blanket implementations of <code>Vec&lt;T&gt;</code> as an Arrow …","Implementation and traits for deserializing from Arrow.","Implementation and traits for mapping rust types to Arrow …","Implementation and traits for serializing to Arrow.","The <code>arrow2::Array</code> type corresponding to this field","Implemented by <code>ArrowField</code> that can be deserialized from …","Top-level API to deserialize from Arrow","Return an iterator that deserializes an <code>Array</code> to an …","Returns a typed iterator to a target type from an …","Deserialize this field from arrow","Convert from a <code>arrow2::Array</code> to any collection that …","Same as <code>try_into_collection</code> except can coerce the …","Trait implemented by all types that can be used as an …","Represents the <code>FixedSizeBinary</code> Arrow type.","Represents the <code>FixedSizeList</code> Arrow type.","Maps a rust i128 to an Arrow Decimal where precision and …","Represents the <code>LargeString</code> Arrow type.","Represents the <code>LargeUtf8</code> Arrow type","Represents the <code>LargeList</code> Arrow type.","This should be <code>Self</code> except when implementing large offset …","","","","","","","Enables the blanket implementations of <code>Vec&lt;T&gt;</code> as an Arrow …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>DataType</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait that is implemented by all types that are …","API to flatten a Chunk consisting of an …","The [<code>arrow2::array::MutableArray</code>] that holds this value","Top-level API to serialize to Arrow","Serialize this field to arrow","Serializes an iterator into an <code>arrow2::MutableArray</code>","Convert an <code>arrow2::chunk::Chunk</code> containing a …","Create a new mutable array","Convert from any iterable collection into an <code>arrow2::Array</code>","Convert from any iterable collection into an <code>arrow2::Array</code> …","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","The unit axes.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2-dimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Euler rotation sequences.","All false.","All false.","All false.","All false.","All false.","The identity transform.","The identity transform.","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","The identity transform.","The identity transform.","A 2x2 identity matrix, where all diagonal elements are <code>1</code>, …","A 3x3 identity matrix, where all diagonal elements are <code>1</code>, …","A 4x4 identity matrix, where all diagonal elements are <code>1</code>, …","The identity quaternion. Corresponds to no rotation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NAN:s.","All NANs.","All NAN.","All NAN.","All NAN.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","All negative ones.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative W axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative X axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Y axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","A unit-length vector pointing along the negative Z axis.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","All ones.","A quaternion representing an orientation.","All true.","All true.","All true.","All true.","All true.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","A 2-dimensional vector.","","","","A 3-dimensional vector.","","","A 3-dimensional vector with SIMD support.","","A 4-dimensional vector with SIMD support.","","","","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive W axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","A unit-length vector pointing along the positive X axis.","Intrinsic three-axis rotation XYZ","Intrinsic three-axis rotation XZY","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","A unit-length vector pointing along the positive Y axis.","Intrinsic three-axis rotation YXZ","Intrinsic three-axis rotation YZX","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","A unit-length vector pointing along the positive Z axis.","The degenerate zero transform.","The degenerate zero transform.","A 3x3 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","The degenerate zero transform.","The degenerate zero transform.","A 2x2 matrix with all elements set to <code>0.0</code>.","A 3x3 matrix with all elements set to <code>0.0</code>.","A 4x4 matrix with all elements set to <code>0.0</code>.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","All zeroes.","Intrinsic three-axis rotation ZXY","Intrinsic three-axis rotation ZYX","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns a vector containing the absolute value of each …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","Returns true if the absolute difference of all elements …","","","","","","","","","Adds two quaternions.","","","","","","","","Adds two quaternions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds two 2x2 matrices.","Adds two 2x2 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 3x3 matrices.","Adds two 4x4 matrices.","Adds two 4x4 matrices.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","Returns true if all the elements are true, false otherwise.","","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between two vectors.","Returns the angle (in radians) for the minimal rotation …","Returns the angle (in radians) between <code>self</code> and <code>rhs</code>.","Returns the angle (in radians) between two vectors.","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns true if any of the elements are true, false …","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Returns some vector that is orthogonal to the given one.","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Given a unit-length vector return two other vectors that …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","Returns any unit-length vector that is orthogonal to the …","","","","","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","Casts all elements of <code>self</code> to <code>f64</code>.","","","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","Casts all elements of <code>self</code> to <code>i32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>u32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","Casts all elements of <code>self</code> to <code>f32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a bitmask with the lowest 2 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","Returns a bitmask with the lowest 3 bits set from the …","Returns a bitmask with the lowest 4 bits set from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>bool</code> vector mask types. ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","Returns a vector containing the smallest integer greater …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f32::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>f64::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>i32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Component-wise clamping of values, similar to <code>u32::clamp</code>.","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no less than <code>min</code> and no …","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no more than <code>max</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","Returns a vector with a length no less than <code>min</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>==</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;=</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&gt;</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;=</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>&lt;</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns a vector mask containing the result of a <code>!=</code> …","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns the matrix column for the given <code>index</code>.","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns a mutable reference to the matrix column for the …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Returns the quaternion conjugate of <code>self</code>. For a unit …","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Computes the cross product of <code>self</code> and <code>rhs</code>.","Default <code>YXZ</code> as yaw (y-axis), pitch (x-axis), roll (z-axis).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Returns the determinant of <code>self</code>.","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Computes the Euclidean distance between two points in …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","Compute the squared euclidean distance between two points …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","Divides a quaternion by a scalar value. The quotient is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>. The dot product …","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Computes the dot product of <code>self</code> and <code>rhs</code>.","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","Returns a vector where every component is the dot product …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Returns a vector containing <code>e^self</code> (the exponential …","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","Creates a 3D vector from <code>self</code> and the given <code>z</code> value.","Creates a 4D vector from <code>self</code> and the given <code>w</code> value.","<code>f32</code> vector, quaternion and matrix types. ","<code>f64</code> vector, quaternion and matrix types. ","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","Returns a vector containing the largest integer less than …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector containing the fractional part of the …","","Returns a vector containing the fractional part of the …","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns a vector containing the fractional part of the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Creates a <code>Vec3A</code> from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code> …","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given rotation <code>angle</code>.","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given rotation <code>angle</code>.","Creates a 2x2 matrix containing a rotation of <code>angle</code> (in …","Creates an affine transformation matrix from the given 2D …","Creates a 2D vector containing <code>[angle.cos(), angle.sin()]</code>. …","Creates an affine transform from the given 2D rotation …","Creates an affine transform from the given 2D rotation …","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a rotation quaternion from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates a new vector from an array.","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from a normalized rotation …","Creates an affine transformation matrix containing a 3D …","Create a quaternion for a normalized rotation <code>axis</code> and …","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from three column vectors.","Creates an affine transform from three column vectors.","Creates a 2x2 matrix from two column vectors.","Creates a 3x3 matrix from two column vectors.","Creates a 4x4 matrix from two column vectors.","Creates an affine transform from a <code>[f32; 6]</code> array stored …","Creates an affine transform from a <code>[f32; 12]</code> array stored …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 2x2 matrix from a <code>[f32; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f32; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f32; 16]</code> array stored in …","Creates an affine transform from a <code>[f64; 6]</code> array stored …","Creates an affine transform from a <code>[f64; 12]</code> array stored …","Creates a 2x2 matrix from a <code>[f64; 4]</code> array stored in …","Creates a 3x3 matrix from a <code>[f64; 9]</code> array stored in …","Creates a 4x4 matrix from a <code>[f64; 16]</code> array stored in …","Creates an affine transform from a <code>[[f32; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f32; 3]; 4]</code> 3D array …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 2x2 matrix from a <code>[[f32; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f32; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f32; 4]; 4]</code> 4D array stored …","Creates an affine transform from a <code>[[f64; 2]; 3]</code> 2D array …","Creates an affine transform from a <code>[[f64; 3]; 4]</code> 3D array …","Creates a 2x2 matrix from a <code>[[f64; 2]; 2]</code> 2D array stored …","Creates a 3x3 matrix from a <code>[[f64; 3]; 3]</code> 3D array stored …","Creates a 4x4 matrix from a <code>[[f64; 4]; 4]</code> 4D array stored …","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates an affine transform from the first 6 values in …","Creates an affine transform from the first 12 values in …","Creates a 2x2 matrix from the first 4 values in <code>slice</code>.","Creates a 3x3 matrix from the first 9 values in <code>slice</code>.","Creates a 4x4 matrix from the first 16 values in <code>slice</code>.","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 2x2 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3x3 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 4x4 matrix with its diagonal set to <code>diagonal</code> and …","Creates a 3D rotation matrix from the given euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates a 3D rotation matrix from the given euler rotation …","Creates a affine transformation matrix containing a …","Creates a quaternion from the given Euler rotation …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transformation matrix from the given 2x2 …","Creates an affine transform from a 2x2 matrix (expressing …","Creates an affine transform from a 2x2 matrix (expressing …","The given <code>Mat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","The given <code>DMat3</code> must be an affine transform,","Creates an affine transform from a 3x3 matrix (expressing …","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 rotation matrix.","Creates an affine transform from a 3x3 matrix (expressing …","Creates an affine transform from a 3x3 matrix (expressing …","The given <code>Mat3A</code> must be an affine transform,","Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd …","Creates an affine transformation matrix from the given 3x3 …","Creates a quaternion from a 3x3 SIMD aligned rotation …","The given <code>Mat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","The given <code>DMat4</code> must be an affine transform, i.e. contain …","Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th …","Creates a quaternion from a 3x3 rotation matrix inside a …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Creates an affine transform from the given <code>rotation</code> …","Creates a 3D rotation matrix from the given quaternion.","Creates an affine transformation matrix from the given …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to <code>to</code>.  …","Gets the minimal rotation for transforming <code>from</code> to either …","Gets the minimal rotation for transforming <code>from</code> to either …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform from the given 3D <code>rotation</code> and …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform containing a 3D rotation …","Creates a 3D rotation matrix from <code>angle</code> (in radians) …","Creates an affine transformation matrix containing a 3D …","Creates a quaternion from the <code>angle</code> (in radians) around …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates an affine transform that changes scale. Note that …","Creates an affine transform that changes scale. Note that …","Creates an affine transformation matrix from the given …","Creates an affine transformation matrix containing the …","Creates a 2x2 matrix containing the combining non-uniform …","Creates a 2x2 matrix containing the combining non-uniform …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 2D <code>scale</code>, …","Creates an affine transformation matrix from the given 2D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Creates an affine transform from the given 3D <code>scale</code>, …","Creates an affine transformation matrix from the given 3D …","Create a quaternion that rotates <code>v.length()</code> radians around …","Create a quaternion that rotates <code>v.length()</code> radians around …","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a rotation quaternion from a slice.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates a vector from the first 2 values in <code>slice</code>.","Creates a vector from the first 3 values in <code>slice</code>.","Creates a vector from the first 4 values in <code>slice</code>.","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates an affine transformation from the given 2D …","Creates an affine transformation from the given 3D …","Creates an affine transformation matrix from the given 2D …","Creates an affine transformation matrix from the given 3D …","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion from a 4D vector.","Creates a new rotation quaternion.","Creates a new rotation quaternion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>i32</code> vector types. ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Return the inverse of this transform.","Return the inverse of this transform.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of <code>self</code>.","Returns the inverse of a normalized quaternion.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite.","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite. If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if, and only if, all elements are finite.  If …","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Returns <code>true</code> if any elements are <code>NaN</code>.","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","Performs <code>is_nan</code> on each element of self, returning a …","","","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns a bitmask with the lowest 2 bits set to the sign …","Returns a bitmask with the lowest 3 bits set to the sign …","Returns a bitmask with the lowest 4 bits set to the sign …","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> of length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","Returns whether <code>self</code> is length <code>1.0</code> or not.","","","","","","","","","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes the length of <code>self</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes <code>1.0 / length()</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Computes the squared length of <code>self</code>.","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","Performs a linear interpolation between <code>self</code> and <code>rhs</code> based …","","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a left-handed view transform using a camera …","Creates a left-handed view matrix using a camera position, …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","Creates a right-handed view transform using a camera …","Creates a right-handed view matrix using a camera …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","","","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns a vector containing the maximum values for each …","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","Returns the horizontal maximum of <code>self</code>.","","","","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns a vector containing the minimum values for each …","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","Returns the horizontal minimum of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","Multiplies a quaternion by a scalar value.","Multiplies a quaternion and a 3D vector, returning the …","","","","","","","","","","","","","","","","","","","","Multiplies a quaternion by a scalar value.","Multiplies two quaternions. If they each represent a …","Multiplies a quaternion and a 3D vector, returning the …","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","Fused multiply-add. Computes <code>(self * a) + b</code> element-wise …","","","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","Multiplies two quaternions. If they each represent a …","","","","","","","","","","","","","","","","","","","Multiplies two 2x2 matrices.","Multiplies two 2x2 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 3x3 matrices.","Multiplies two 4x4 matrices.","Multiplies two 4x4 matrices.","Multiplies two quaternions. If they each represent a …","Multiplies two quaternions. If they each represent a …","Multiplies a 3x3 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Multiplies a 2x2 matrix by a scalar.","Multiplies a 3x3 matrix by a scalar.","Multiplies a 4x4 matrix by a scalar.","Transforms a 2D vector.","Transforms a 2D vector.","Transforms a 3D vector.","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 3D vector.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a <code>Vec3A</code>.","Transforms a <code>Vec3A</code>.","Multiplies a quaternion and a 3D vector, returning the …","Transforms a 4D vector.","Transforms a 4D vector.","","","","","","","","","","","","","","","","","","","","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector mask.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Creates a new vector.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0.","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","Creates a left-handed orthographic projection matrix with …","Creates a left-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","Creates a right-handed orthographic projection matrix with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","Returns a vector that is equal to <code>self</code> rotated by 90 …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","The perpendicular dot product of <code>self</code> and <code>rhs</code>. Also known …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite left-handed perspective projection …","Creates an infinite reverse right-handed perspective …","Creates an infinite reverse right-handed perspective …","Creates an infinite right-handed perspective projection …","Creates an infinite right-handed perspective projection …","Creates a left-handed perspective projection matrix with …","Creates a left-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with …","Creates a right-handed perspective projection matrix with […","Creates a right-handed perspective projection matrix with […","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","Returns a vector containing each element of <code>self</code> raised to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Returns the vector projection of <code>self</code> onto <code>rhs</code>.","Transforms the given 3D vector as a point, applying …","Transforms the given 3D vector as a point, applying …","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","Returns a vector containing the reciprocal <code>1.0/n</code> of each …","","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","Returns the vector rejection of <code>self</code> from <code>rhs</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","Returns <code>rhs</code> rotated by the angle of <code>self</code>. If <code>self</code> is …","","","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns a vector containing the nearest integer to a …","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","Returns the matrix row for the given <code>index</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","Creates a vector from the elements in <code>if_true</code> and <code>if_false</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Returns a vector with elements representing the sign of …","Performs a spherical linear interpolation between <code>self</code> and …","Performs a spherical linear interpolation between <code>self</code> and …","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","Creates a vector with all elements set to <code>v</code>.","","","","","","","","","","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","Subtracts the <code>rhs</code> quaternion from <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtracts two 2x2 matrices.","Subtracts two 2x2 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 3x3 matrices.","Subtracts two 4x4 matrices.","Subtracts two 4x4 matrices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Traits adding swizzle methods to all vector types. ","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","<code>[x, y]</code>","<code>[x, y, z]</code>","<code>[x, y, z, w]</code>","Returns the rotation axis and angle (in radians) of <code>self</code>.","Returns the rotation axis and angle (in radians) of <code>self</code>.","","Creates a <code>[f32; 6]</code> array storing data in column major …","Creates a <code>[f32; 12]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 4]</code> array storing data in column major …","Creates a <code>[f32; 9]</code> array storing data in column major …","Creates a <code>[f32; 16]</code> array storing data in column major …","Creates a <code>[f64; 6]</code> array storing data in column major …","Creates a <code>[f64; 12]</code> array storing data in column major …","Creates a <code>[f64; 4]</code> array storing data in column major …","Creates a <code>[f64; 9]</code> array storing data in column major …","Creates a <code>[f64; 16]</code> array storing data in column major …","Creates a <code>[[f32; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f32; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f32; 4]; 4]</code> 4D array storing data in column …","Creates a <code>[[f64; 2]; 3]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 4]</code> 3D array storing data in column …","Creates a <code>[[f64; 2]; 2]</code> 2D array storing data in column …","Creates a <code>[[f64; 3]; 3]</code> 3D array storing data in column …","Creates a <code>[[f64; 4]; 4]</code> 4D array storing data in column …","Returns the rotation angles for the given euler rotation …","Returns the rotation angles for the given euler rotation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>.","Extracts <code>scale</code>, <code>rotation</code> and <code>translation</code> from <code>self</code>. The …","Returns the rotation axis scaled by the rotation in …","Returns the rotation axis scaled by the rotation in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 2D vector as a point.","Transforms the given 2D point, applying shear, scale, …","Transforms the given 2D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given 3D points, applying shear, scale, …","Transforms the given 3D vector as a point.","Transforms the given <code>Vec3A</code>, applying shear, scale, …","Transforms the given <code>Vec3A</code> as 3D point.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Rotates the given 2D vector.","Transforms the given 2D vector, applying shear, scale and …","Rotates the given 2D vector.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given 3D vector, applying shear, scale and …","Transforms the give 3D vector as a direction.","Transforms the given <code>Vec3A</code>, applying shear, scale and …","Transforms the give <code>Vec3A</code> as 3D vector.","","","","","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","Returns the transpose of <code>self</code>.","","For element <code>i</code> of <code>self</code>, return <code>v[i].trunc()</code>","","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code> and <code>y</code> elements of <code>self</code>, …","Creates a 2D vector from the <code>x</code>, <code>y</code> and <code>z</code> elements of <code>self</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","Returns <code>self</code> normalized to length 1.0 if possible, else …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>u32</code> vector types. ","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the columns of <code>self</code> to the first 6 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 12 elements in …","Writes the columns of <code>self</code> to the first 4 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 9 elements in <code>slice</code>…","Writes the columns of <code>self</code> to the first 16 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the quaternion to an unaligned slice.","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …","Writes the elements of <code>self</code> to the first 2 elements in …","Writes the elements of <code>self</code> to the first 3 elements in …","Writes the elements of <code>self</code> to the first 4 elements in …eturns the vector part of the quaternion.","","","Returns the vector part of the quaterniondimensional <code>bool</code> vector mask.","A 3-dimensional <code>bool</code> vector mask.","A 3-dimensional SIMD vector mask.","A 4-dimensional <code>bool</code> vector mask.","A 4-dimensional SIMD vector mask.","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 3-dimensional vector with SIMD support.","A 4-dimensional vector with SIMD support.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","","","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","","","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","A 2D affine transform, which can represent translation, …","A 3D affine transform, which can represent translation, …","A 2x2 column major matrix.","A 3x3 column major matrix.","A 4x4 column major matrix.","A quaternion representing an orientation.","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2x2 matrix from column vectors.","Creates a 3x3 matrix from column vectors.","Creates a 4x4 matrix from column vectors.","Creates a quaternion from <code>x</code>, <code>y</code>, <code>z</code> and <code>w</code> values.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-dimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vectordimensional vector.","A 3-dimensional vector.","A 4-dimensional vector.","Creates a 2-dimensional vector.","Creates a 3-dimensional vector.","Creates a 4-dimensional vector.","","","","","","","","","","Pixel is 8-bit alpha","AnimationDecoder trait","An Image in AVIF format.","Pixel contains 8-bit B, G and R channels","Pixel is 8-bit BGR with an alpha channel","An Image in BMP Format","The number of channels of this pixel type.","A string that can help to interpret the meaning each …","This pixel has the format of one of the predefined …","An enumeration over supported color types and bit depths","The maximum value for this type of primitive within the …","The minimum value for this type of primitive within the …","An Image in DDS Format","An error was encountered while decoding.","The delay of a frame relative to the previous one.","A Dynamic Image","Types which are safe to treat as an immutable byte slice …","An error was encountered while encoding.","An enumeration of color types encountered in image formats.","An Image in farbfeld Format","A flat buffer over a (multi channel) image.","A single animation frame","An implementation dependent iterator, reading the frames …","A trait for manipulating images.","Trait to inspect an image.","An Image in GIF Format","Sendable grayscale + alpha channel image buffer","Sendable grayscale image buffer","An Image in Radiance HDR Format","An Image in ICO Format","Generic image buffer","The trait that all decoders implement","Specialized image decoding not be supported by all formats","The trait all encoders implement","The generic error type for image operations.","An enumeration of supported image formats. Not all formats …","Each pixel in this image is 16-bit Luma","Each pixel in this image is 8-bit Luma","Each pixel in this image is 16-bit Luma with alpha","Each pixel in this image is 8-bit Luma with alpha","An enumeration of supported image formats for encoding.","Result of an image decoding/encoding process","Each pixel in this image is 16-bit Rgb","Each pixel in this image is 32-bit float Rgb","Each pixel in this image is 8-bit Rgb","Each pixel in this image is 16-bit Rgb with alpha","Each pixel in this image is 32-bit float Rgb with alpha","Each pixel in this image is 8-bit Rgb with alpha","An error occurred while interacting with the environment.","An Image in JPEG Format","An Image in JPEG Format with specified quality","Pixel is 1-bit luminance","Pixel is 16-bit luminance","Pixel is 16-bit luminance","Pixel is 2-bit luminance","Pixel is 4-bit luminance","Pixel is 8-bit luminance","Pixel is 8-bit luminance","Pixel is 1-bit luminance with an alpha channel","Pixel is 16-bit luminance with an alpha channel","Pixel is 16-bit luminance with an alpha channel","Pixel is 2-bit luminance with an alpha channel","Pixel is 4-bit luminance with an alpha channel","Pixel is 8-bit luminance with an alpha channel","Pixel is 8-bit luminance with an alpha channel","Completing the operation would have required more …","Grayscale colors.","Grayscale colors + alpha channel","An Image in OpenEXR Format","An error was encountered in input arguments.","A generalized pixel.","The type of pixel.","The pixel with an associated <code>ColorType</code>. Not all possible …","Immutable pixel iterator","An Image in PNG Format","An Image in PNG Format","An Image in general PNM Format","The type of each channel in a pixel. For example, this can …","Represents the progress of an image operation.","The type of reader produced by <code>into_reader</code>.","RGB colors.","Pixel contains 1-bit R, G and B channels","Pixel is 16-bit RGB","Pixel contains 16-bit R, G and B channels","Pixel contains 2-bit R, G and B channels","Pixel is 32-bit float RGB","Pixel is 32-bit float RGB","An image buffer for 32-bit float RGB pixels, where the …","Pixel contains 4-bit R, G and B channels","Pixel contains 8-bit R, G and B channels","Pixel contains 8-bit R, G and B channels","Sendable Rgb image buffer","RGB colors + alpha channel","Pixel is 1-bit RGB with an alpha channel","Pixel is 16-bit RGBA","Pixel is 16-bit RGB with an alpha channel","Pixel is 2-bit RGB with an alpha channel","Pixel is 32-bit float RGBA","Pixel is 32-bit float RGBA","An image buffer for 32-bit float RGBA pixels, where the …","Pixel is 4-bit RGB with an alpha channel","Pixel is 8-bit RGB with an alpha channel","Pixel is 8-bit RGB with an alpha channel","Sendable Rgb + alpha channel image buffer","A View into another image","The scalar type that is used to store each channel in this …","An Image in TGA Format","An Image in TIFF Format","Pixel is of unknown color type with the specified bits per …","An operation can not be completed by the chosen …","A value for signalling an error: An unsupported format was …","An Image in WEBP Format","","","","","","","","","","","","","","","","","","Adjust the contrast of this image. <code>contrast</code> is the amount …","Apply the function <code>f</code> to each channel of this pixel.","","","","","Apply the function <code>f</code> to each channel of this pixel and …","","","","","Apply the function <code>f</code> to each channel except the alpha …","","","","","Apply the function <code>f</code> to each channel except the alpha …","Get the bytes of this value.","Return this image’s pixels as a native endian byte slice.","Return a view on the raw sample buffer.","Return a view on the raw sample buffer for 32bit per …","Return a mutable view on the raw sample buffer.","Return a view on the raw sample buffer for 16 bit per …","Return a view on the raw sample buffer for 8 bit per …","Return a reference to an 16bit Grayscale image","Return a reference to an 8bit Grayscale image","Return a reference to an 16bit Grayscale image with an …","Return a reference to an 8bit Grayscale image with an …","Get a mutable reference based version.","Return a mutable reference to an 16bit Grayscale image","Return a mutable reference to an 8bit Grayscale image","Return a mutable reference to an 16bit Grayscale image …","Return a mutable reference to an 8bit Grayscale image with …","Return a mutable reference to an 16bit RGB image","Return a mutable reference to an 32bit RGB image","Return a mutable reference to an 8bit RGB image","Return a mutable reference to an 16bit RGBA image","Return a mutable reference to an 16bit RGBA image","Return a mutable reference to an 8bit RGBA image","View the samples as a slice.","Returns the underlying raw buffer","Get a reference based version.","Return a reference to an 16bit RGB image","Return a reference to an 32bit RGB image","Return a reference to an 8bit RGB image","Return a reference to an 16bit RGBA image","Return a reference to an 32bit RGBA image","Return a reference to an 8bit RGBA image","View the samples as a slice.","View this buffer as an image over some type of pixel.","Interpret this buffer as a mutable image.","View this buffer but keep mutability at a sample level.","","","","","","","","","","","","","","","","","","","Returns the number of bits contained in a pixel of …","Blend the color of a given pixel into ourself, taking into …","","","","","Put a pixel at location (x, y), taking into account alpha …","Put a pixel at location (x, y), taking into account alpha …","","Performs a Gaussian blur on this image. <code>sigma</code> is a measure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bounding rectangle of this image.","Tuple of bounds in the order of coordinate inputs.","","","Brighten the pixels of this image. <code>value</code> is the amount to …","Iterators and other auxiliary structure for the <code>ImageBuffer</code>…","Returns the image buffer","","Returns a mutable image buffer","Returns the number of bytes contained in a pixel of …","Return if the ImageFormat can be decoded by the lib.","Return if the ImageFormat can be encoded by the lib.","","","","","","","","","","","","","","","","","","","Change the coordinates of this subimage.","Returns the number of color channels that make up this …","Get the number of channels for colors of this type.","Returns the components as a slice.","","","","","Returns the channels of this pixel as a 4 tuple. If the …","","","","","Returns the components as a mutable slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encoding and decoding for various image file formats.","Steps through the iterator from the current frame until …","Return this image’s color type.","Supplementary color information.","Returns the color type of the image data produced by this …","Examples","Copies all of the pixels from another image into this …","Copies all of the pixels from one part of this image to …","","Return a cut-out of this image delimited by the bounding …","Return a cut-out of this image delimited by the bounding …","A measure of completed decoding.","","","","","Delay of this frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a tuple containing the width and height of the …","The width and height of this image.","The width and height of this image.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enumerates over the pixels of the image. The iterator …","Enumerates over the pixels of the image. The iterator …","Enumerates over the rows of the image. The iterator yields …","Enumerates over the rows of the image. The iterator yields …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains detailed error representation.","Expands a color palette by re-using the existing buffer. …","Return a list of applicable extensions for this format.","Get the dimensions <code>(channels, width, height)</code>.","Filters this image with the specified 3x3 kernel.","Check if a buffer of length <code>len</code> is large enough.","Image representations for ffi.","Flip this image horizontally","Flip this image vertically","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a pixel from the 4 channels a, b, c and d. If …","","","","","Decodes an encoded image into a dynamic image.","Return the image format specified by a path’s file …","Constructs a new ImageBuffer by repeated application of …","Return the image format specified by a MIME type.","Create a delay from a ratio of milliseconds.","Constructs a new frame","Return the image format specified by the path’s file …","Constructs a new ImageBuffer by copying a pixel","Constructs a buffer from a generic container (for example …","Convert from a duration, clamped between 0 and an …","Returns a view into a slice.","","","","","Returns mutable view into a mutable slice.","","","","","Creates an image buffer out of an existing buffer. Returns …","","","","","","","","","Get a mutable reference to a single sample.","Returns the pixel located at (x, y). Indexed from top left.","","Gets a reference to the pixel at location <code>(x, y)</code>","","Gets a reference to the pixel at location <code>(x, y)</code> or …","Gets a reference to the mutable pixel at location <code>(x, y)</code>. …","Gets a reference to the mutable pixel at location <code>(x, y)</code>","","Do not use is function: It is unimplemented!","Gets a reference to the mutable pixel at location <code>(x, y)</code> …","Get a reference to a single sample.","Return a grayscale version of this image. Returns <code>Luma</code> …","Guess image format from memory block","If there are any samples aliasing each other.","Returns if there is an alpha channel.","Returns false if the color scheme is grayscale, true …","","","","","","","","","The height of this image.","The height of this image.","Returns the height of the underlying image","","","Hue rotate the supplied image. <code>value</code> is the degrees to …","","Read a tuple containing the (width, height) of the image …","Mutable portion of the buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Image Processing Functions","Returns true if this x, y coordinate is contained inside …","Check that the pixel and the channel index are in bounds.","Get an index provided it is inbouds.","Return a reference to a single sample at specified …","Resolve the index of a particular sample.","","","","","","Get the theoretical position of sample (x, y, channel).","Return a mutable reference to a single sample at specified …","","","","","","","","","","","","","","","","","","","","","","","","Get a reference to the underlying image.","","Get a mutable reference to the underlying image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the image buffer","Return this image’s pixels as a byte vector. If the …","Return the raw sample buffer with its stride an dimension …","Consume the decoder producing a series of frames.","","","Consume the image and returns a Luma image.","Consume the image and returns a Luma image.","Consume the image and returns a LumaA image.","Consume the image and returns a LumaA image.","Returns the underlying raw buffer","Returns a reader that can be used to obtain the bytes of …","Consume the image and returns a RGB image.","Consume the image and returns a RGB image.","Consume the image and returns a RGB image.","Consume the image and returns a RGBA image.","Consume the image and returns a RGBA image.","Consume the image and returns a RGBA image.","Consumes the image buffer and returns the underlying data …","Invert this pixel","","","","","Invert the colors of this image. This method operates …","Input and output of images.","Check if a buffer fulfills the requirements of a normal …","","A <code>repr(C)</code> description of the layout of buffer samples.","Returns the x offset","","Create a new image from a Reader.","Create a new image from a byte slice","Create a new image from a byte slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply the function <code>f</code> to each channel of this pixel.","","","","","Apply the function <code>f</code> to each channel of this pixel and …","","","","","Apply the function <code>f</code> to each channel except the alpha …","","","","","Apply the function <code>f</code> to each channel except the alpha …","Mathematical helper functions and types.","Get the minimum length of a buffer such that all in-bounds …","","Creates a new <code>Frames</code> from an implementation specific …","Constructs a new frame without any delay.","Creates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.","Construct a new subimage The coordinates set the position …","Creates a dynamic image backed by a buffer of gray pixels.","Creates a dynamic image backed by a buffer of gray pixels.","Creates a dynamic image backed by a buffer of gray pixels …","Creates a dynamic image backed by a buffer of gray pixels …","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGB pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","Creates a dynamic image backed by a buffer of RGBA pixels.","","","The numerator and denominator of the delay in milliseconds.","Open the image located at the path specified. The image’…","Returns the color type of the image file before decoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator over the pixels of this image. The …","Returns an iterator over the pixels of this image. The …","Returns an iterator over the mutable pixels of this image.","","Put a pixel at location (x, y). Indexed from top left.","","Puts a pixel at location <code>(x, y)</code>","","","Returns all the bytes in the image.","Same as <code>read_image</code> but periodically calls the provided …","Decode a rectangular section of the image; see …","Decode a rectangular section of the image, periodically …","Calculate a measure for remaining decoding work.","Resize this image using the specified filter algorithm. …","Resize this image using the specified filter algorithm. …","Resize this image using the specified filter algorithm. …","Rotate this image 180 degrees clockwise.","Rotate this image 270 degrees clockwise.","Rotate this image 90 degrees clockwise.","Returns an iterator over the rows of this image.","Returns an iterator over the mutable rows of this image.","Get the format of the buffer when viewed as a matrix of …","Underlying linear container holding sample values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Saves the buffer to a file at the path specified.","Saves the buffer to a file at the path specified.","Saves the supplied buffer to a file at the path specified.","Saves the supplied buffer to a file at the path specified …","Saves the buffer to a file at the specified path in the …","Saves the buffer to a file at the specified path in the …","Returns the minimum number of bytes that can be …","Set decoding limits for this decoder. See <code>Limits</code> for the …","Shrink the image to the minimum of current and given …","","Get the strides for indexing matrix-like <code>[(c, w, h)]</code>.","Returns a mutable subimage that is a view into this image. …","Create a mutable sub-view of the image.","Scale this image down to fit within a specific size. …","Scale this image down to a specific size. Returns a new …","Return a copy of this image’s pixels as a byte vector. …","Convert this subimage to an ImageBuffer","Convert this pixel to luma","","","","","Returns a copy of this image as a Luma image.","Returns a copy of this image as a Luma image.","Returns a copy of this image as a Luma image.","Convert this pixel to luma with an alpha channel","","","","","Returns a copy of this image as a LumaA image.","Returns a copy of this image as a LumaA image.","Returns a copy of this image as a LumaA image.","","","","","","","","","","","","","","","","","Convert this pixel to RGB","","","","","Returns a copy of this image as an RGB image.","Returns a copy of this image as an RGB image.","Returns a copy of this image as an RGB image.","Convert this pixel to RGB with an alpha channel","","","","","Returns a copy of this image as an RGBA image.","Returns a copy of this image as an RGBA image.","Returns a copy of this image as an RGBA image.","","Copy the data into an owned vector.","Returns the y offset","","A measure of all necessary decoding work.","","Returns the total number of bytes in the decoded image.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Move the data into an image buffer.","","","","","","","","","","","","","","","","","","","Returns the pixel located at (x, y). Indexed from top left.","Returns the pixel located at (x, y), ignoring bounds …","Puts a pixel at location (x, y). Indexed from top left.","Puts a pixel at location (x, y), ignoring bounds checking.","Performs an unsharpen mask on this image. <code>sigma</code> is the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a subimage that is an immutable view into this …","Create a sub-view of the image.","","","","","","","","","","","","","","","","","","","The width of this image.","The width of this image.","Returns the width of the underlying image","","","Create a monocolor image from a single pixel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the supplied buffer to a writer in the specified …","Writes all the bytes in an image to the encoder.","Writes the buffer to a writer in the specified format.","Encode this image and write it to <code>w</code>.","","","Provides color conversions for whole image buffers.","Enumerate the pixels of an image.","Enumerate the pixels of an image.","Enumerate the rows of an image.","Enumerate the rows of an image.","Iterate over pixel refs.","Iterate over mutable pixel refs.","Iterate over rows of an image","Iterate over mutable rows of an image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts <code>self</code> to a buffer of type T","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeecoding and Encoding of JPEG Images","Decoding and Encoding of PNG Images","Pixels per centimeter","Pixels per inch (2.54 cm)","JPEG decoder","The representation of a JPEG encoder","Represents the absence of a unit, the values indicate only …","Represents the pixel density of an image","Represents a unit in which the density of an image is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a pixel density with a pixel aspect ratio of 1","A couple of values for (Xdensity, Ydensity)","","","","","","","","","","","","","","Creates the most common pixel density type: the horizontal …","","","","","Encodes the image stored in the raw byte buffer <code>image</code> that …","Encodes the given image.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Create a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","Create a new encoder that writes its output to <code>w</code>, and has …","","","","","","","","","","","","","","","","","","","Configure the decoder to scale the image during decoding.","Set the pixel density of the images the encoder will …","","","","","","","","","","","","","","","","The unit in which the density is measured","","","","","","","","","","","","","","","","","","","","","","","","","","","Uses a heuristic to select one of the preceding filters …","An <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.","Filters based on the average of left and right neighbor …","High compression level","Compression level of a PNG encoder. The default setting is …","Default compression level","Fast, minimal compression","Filter algorithms used to process image data to improve …","Huffman coding compression","No processing done, best used for low bit depth grayscale …","Algorithm that takes into account the left, upper left, …","PNG decoder","PNG encoder","Png Reader","Run-length encoding compression","Filters based on previous pixel in the same scanline","Filters based on the scanline above","","","Turn this into an iterator over the animation frames.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the image <code>data</code> that has dimensions <code>width</code> and <code>height</code>…","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns if the image contains an animation.","","","","","","","","","","","","","Creates a new decoder that decodes from the stream <code>r</code>","Create a new encoder that writes its output to <code>w</code>","Create a new encoder that writes its output to <code>w</code> with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new decoder that decodes from the stream <code>r</code> with …","","","","","","","","","","","","","Write a PNG image with the specified width, height, and …","The required color type can not be handled.","An error was encountered while decoding.","An error was encountered while decoding an image.","The resulting image exceed dimension limits in either …","The dimensions passed are wrong.","An error was encountered while encoding.","An error was encountered while encoding an image.","The format is known exactly.","Repeated an operation for which error that could not be …","An image format is not supported.","A string describing the parameter. This is discouraged and …","Some feature specified by string. This is discouraged and …","The generic error type for image operations.","A best effort representation for image formats.","Result of an image decoding/encoding process","The operation would have performed an allocation larger …","An error occurred while interacting with the environment.","Completing the operation would have required more …","Indicates the limit that prevented an operation from …","Completing the operation would have required more …","The format can be identified by a name.","The end of the image has been reached.","An error was encountered in input arguments.","An error was encountered in inputs arguments.","Details how a parameter is malformed.","A common path extension for the format is known.","The format is not known or could not be determined.","An operation can not be completed by the chosen …","The specified strict limits are not supported for this …","The implementation for an operation was not provided.","Details what feature is not supported.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the image format associated with this error.","Return the image format associated with this error.","Returns the image format associated with this error.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Create an <code>UnsupportedError</code> for an image with details on …","Create an <code>EncodingError</code> for an image format.","Create a <code>DecodingError</code> for an image format.","Construct a <code>ParameterError</code> directly from a corresponding …","Construct a generic <code>LimitError</code> directly from a …","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the corresponding <code>UnsupportedErrorKind</code> of the …","Returns the corresponding <code>ParameterErrorKind</code> of the error.","Returns the corresponding <code>LimitErrorKind</code> of the error.","","","","","","","","","","","","","","","","","","","","","","Create an <code>EncodingError</code> that stems from an arbitrary error …","Create a <code>DecodingError</code> that stems from an arbitrary error …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The given limits","The supported strict limits","The samples are in column-major form and all samples are …","Denotes invalid flat sample buffers when trying to convert …","A flat buffer over a (multi channel) image.","All samples are packed.","Different normal forms of buffers.","The represented image can not use this representation.","At least pixels are packed.","The samples are in row-major form and all samples are …","A ffi compatible description of a sample buffer.","The represented image was too large.","No pixel aliases another.","A flat buffer that can be used as an image view.","A mutable owning version of a flat buffer.","The color format did not match the channel count.","","","","","","","","","","","","","","","","","","","","","","Tuple of bounds in the order of coordinate inputs.","","","","","","","","Add this to an index to get to the sample in the next …","The number of channels in the color representation of the …","","","","","","","","","","","","","","","","","","","","","Supplementary color information.","Describe a column-major image packed in all directions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the dimensions <code>(channels, width, height)</code>.","Check if a buffer of length <code>len</code> is large enough.","Get a reference on the inner sample descriptor.","Get a reference on the sample buffer descriptor.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Get a mutable reference to a selected subpixel if it is …","Get a mutable reference to a selected sample.","","","","Get a reference to a selected subpixel if it is in-bounds.","Get a reference to a selected subpixel.","If there are any samples aliasing each other.","","","","The height of the represented image.","Add this to an index to get to the next sample in …","Return the mutable portion of the buffer that holds sample …","Return the mutable buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Return the portion of the buffer that holds sample values.","Check that the pixel and the channel index are in bounds.","","","Get an index provided it is inbouds.","Resolve the index of a particular sample.","Get the theoretical position of sample (channel, x, y).","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Take out the sample buffer.","Take out the sample buffer.","Check if a buffer fulfills the requirements of a normal …","A <code>repr(C)</code> description of the layout of buffer samples.","","","","","","","","","","","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","Get the minimum length of a buffer such that all in-bounds …","","","","","","","","","","","Compares the logical preconditions.","","","","","Describe a row-major image packed in all directions.","Get a reference on the inner buffer.","Get a reference on the inner buffer.","Underlying linear container holding sample values.","","","","","","","","","","","Shrink the image to the minimum of current and given …","Shrink the inner image.","Shrink the inner image.","Get the strides for indexing matrix-like <code>[(c, w, h)]</code>.","","","","","","","","","","","","","","","","","Try to convert this into an image with mutable pixels.","","","","","","","","","","","","","","","","","","","","","","","","","","The width of the represented image.","Add this to an index to get to the next sample in …","","","","","","","","","","","A bi-level color map","Cubic Filter","The color type on which the map operates on","A color map","Available Sampling Filters.","Gaussian Filter","Lanczos with window 3","Nearest Neighbor","Linear Filter","","","","","Performs a Gaussian blur on the supplied image. <code>sigma</code> is a …","","","","","Brighten the supplied image. <code>value</code> is the amount to …","","","","","","","","","","","Functions for altering and converting the color of …","Adjust the contrast of the supplied image. <code>contrast</code> is the …","Return a mutable view into an image The coordinates set …","Return an immutable view into an image The coordinates set …","","","","","Reduces the colors of the image using the supplied …","","","","","","Perform a 3x3 box filter on the supplied image. <code>kernel</code> is …","Flip an image horizontally","Flip an image horizontally and put the result into the …","Flip an image horizontally in place.","Flip an image vertically","Flip an image vertically and put the result into the …","Flip an image vertically in place.","","Returns the argument unchanged.","Returns the argument unchanged.","Convert the supplied image to grayscale. Alpha channel is …","Convert the supplied image to grayscale. Alpha channel is …","Convert the supplied image to a grayscale image with the …","Convert the supplied image to a grayscale image with the …","Determine if this implementation of ColorMap overrides the …","Indicate NeuQuant implements <code>lookup</code>.","Fill the image with a linear horizontal gradient","Hue rotate the supplied image. <code>value</code> is the degrees to …","Reduces the colors using the supplied <code>color_map</code> and …","Returns the index of the closest match of <code>color</code> in the …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invert each pixel within the supplied image. This function …","Looks up color by index in the color map.  If <code>idx</code> is out …","","","","","","Maps <code>color</code> to the closest color in the color map.","","","","","","Overlay an image at a given coordinate (x, y)","Calculate the region that can be copied from top to bottom.","Replace the contents of an image at a given coordinate (x, …","Resize the supplied image to the specified dimensions. …","Rotate an image 180 degrees clockwise.","Rotate an image 180 degrees clockwise and put the result …","Rotate an image 180 degrees clockwise in place.","Rotate an image 270 degrees clockwise.","Rotate an image 270 degrees clockwise and put the result …","Rotate an image 90 degrees clockwise.","Rotate an image 90 degrees clockwise and put the result …","","","","","Resize the supplied image to the specific dimensions.","Tile an image by repeating it multiple times","","","","","","","","","Performs an unsharpen mask on the supplied image. <code>sigma</code> is …","","","","","","","Fill the image with a linear vertical gradient","","","","","","","A bi-level color map","The color type on which the map operates on","A color map","Brighten the supplied image. <code>value</code> is the amount to …","Brighten the supplied image in place. <code>value</code> is the amount …","Adjust the contrast of the supplied image. <code>contrast</code> is the …","Adjust the contrast of the supplied image in place. …","Reduces the colors of the image using the supplied …","Convert the supplied image to grayscale. Alpha channel is …","Convert the supplied image to grayscale. Alpha channel is …","Convert the supplied image to a grayscale image with the …","Convert the supplied image to a grayscale image with the …","Determine if this implementation of ColorMap overrides the …","Hue rotate the supplied image. <code>value</code> is the degrees to …","Hue rotate the supplied image in place. <code>value</code> is the …","Reduces the colors using the supplied <code>color_map</code> and …","Returns the index of the closest match of <code>color</code> in the …","Invert each pixel within the supplied image. This function …","Looks up color by index in the color map.  If <code>idx</code> is out …","Maps <code>color</code> to the closest color in the color map.","Set of supported strict limits for a decoder.","Resource limits for decoding.","A multi-format image reader.","","","","","","","","","","","","","","","","","This function checks the <code>max_image_width</code> and …","This function checks that all currently set strict limits …","","","","","","","Remove the current information on the image format.","","","","","Read the image (replaces <code>load</code>).","","","","","","","","","","","","","","","","","","","","","","","Get the currently determined format.","","This function increases the <code>max_alloc</code> limit with amount. …","This function acts identically to [<code>free</code>], but takes a <code>usize</code>…","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Read the image dimensions.","Unwrap the reader.","Set a custom set of decoding limits.","","","","","","","","The maximum allowed sum of allocations allocated by the …","The maximum allowed image height. This limit is strict. …","The maximum allowed image width. This limit is strict. The …","Create a new image reader without a preset format.","Disable all decoding limits.","Disable all limits.","Open a file to read, format will be guessed from path.","","","","","","","This function checks that the current limit allows for …","This function acts identically to [<code>reserve</code>], but takes a …","","","","","","","Supply the format as which to interpret the read image.","","","","","","","","","","","","","","","","","","","","","","","","Construct a reader with specified format.","Make a format guess based on the content, replacing it on …","","","","","","","A Rectangle defined by its top left corner, width and …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","The rectangle’s height.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","The rectangle’s width.","","","The x coordinate of the top left corner.","The y coordinate of the top left corner.","","128-bit hash. Negligible risk for collision.","64-bit hash.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A type that can used as a Component of an Entity.","A <code>ComponentBundle</code> holds an Arrow component column, and its …","A <code>Component</code> that fulfils all the conditions required to be …","","","","A <code>MsgBundle</code> holds data necessary for composing a single …","The errors that can occur when trying to convert between …","","","","","A <code>Component</code> that fulfils all the conditions required to be …","","","","","","","","","","","","","","Extract a <code>TimePoint</code> from the “timelines” column. This …","Create a <code>Field</code> for this <code>Component</code>.","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","A unique id per <code>crate::LogMsg</code>.","The name of the component.","","","","","","","","","","Helper to build a <code>MessageBundle</code> from 1 component","Helper to build a <code>MessageBundle</code> from 2 components","Helper to build a <code>MessageBundle</code> from 3 components","","","","","","","","","Wrap <code>field_array</code> in a single-element <code>ListArray</code>","","","","The name of an entity component, e.g. <code>pos</code> or <code>color</code>.","A <code>EntityPath</code> plus a <code>ComponentName</code>.","","","<code>camera / &quot;left&quot; / points / #42</code>","A 128 bit hash of <code>EntityPath</code> with negligible risk of …","<code>camera / &quot;left&quot; / points / #42</code>","The different parts that make up an <code>EntityPath</code>.","Array/table/map member. Each member must be of the same …","","","","Struct member. Each member can have a different type.","","","“color”","<code>camera / &quot;left&quot; / points / #42</code>","Build a <code>EntityPath</code>:","Build a <code>Vec&lt;EntityPathPart&gt;</code>:","","Parses an entity path, e.g. …","","","","Used e.g. for frames in a film.","Normal wall time.","A 64-bit number describing either nanoseconds OR sequence …","A point in time on any number of <code>Timeline</code>s.","The type of a <code>TimeInt</code> or <code>Timeline</code>.","A time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …","The name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …","","","Install this as the global allocator to get memory usage …","Number of allocation and their total size.","Tracks memory use over time.","","","","","","","Track allocations and memory use.","Add an allocation.","","","","","","","","","","","","","","","","","","","Add data to history","","","","","","","","","","","","","","","","","","","","","","","Number of allocations.","Bytes used by the application according to our own memory …","Bytes used by the application according to our own memory …","VRAM bytes used by the application according to its own …","Bytes used by the datastore according to its own …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns how large fraction of memory we should free to go …","Limit in bytes.","","","","","","","","","","","","","","","","","","","","","","","","Bytes allocated by the application according to operating …","Bytes allocated by the application according to operating …","","","","","","","","","","","Number of bytes.","","Remove an allocation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Install this as the global allocator to get memory usage …","","","","","","","","","","","","","Returns the argument unchanged.","All live largish allocations, fully tracked.","Total number of live allocations, and the number of live …","","Calls <code>U::from(self)</code>.","Are we doing (slightly expensive) tracking of the …","","","","","All live allocations used for internal book-keeping.","","","Should we do (slightly expensive) tracking of the …","All live allocations sampled of medium size, …","The most popular callstacks.","Allocations smaller than these are left untracked.","Gather statistics from the live tracking, if enabled.","","","Turn on callstack tracking (slightly expensive) if a given …","","All live allocations that we are NOT tracking (because …","","","","","","","Returns monotonically increasing time in seconds.","Send <code>LogMsg</code>es to a server over TCP.","","","","","","","","","","","","","","","","","","","","","","","The default address of a Rerun TCP server which an SDK …","","","","","","","Wait until everything has been sent.","","","Switch to a mode where we drop messages if disconnected.","","","","","","","Stall until all messages so far has been sent.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","If the latency in the <code>LogMsg</code> channel is greater than this, …","","Connect via TCP to this log server.","","","","","Turns <code>info</code>-level logs into <code>debug</code>-level logs.","","","","","","","","Listen to multiple SDK:s connecting to us over TCP.","","","","","","","","","","","","","","","","","","","","Log an entity using an <code>ArrowMsg</code>.","A new recording has begun.","Clear all the components stored at an <code>EntityPath</code>","Clear all the components of an <code>[EntityPath]</code> and any …","A <code>ComponentBundle</code> holds an Arrow component column, and its …","Server-backed operation on an <code>EntityPath</code>.","Sent when the client shuts down the connection.","The most general log message sent from the SDK to the …","All ones.","A <code>MsgBundle</code> holds data necessary for composing a single …","A unique id per <code>crate::LogMsg</code>.","Operation to perform on an <code>EntityPath</code>, e.g. clearing all …","All zeroes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the datatype of the bundled component, discarding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the index of <code>component</code> in the bundle, if it exists.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","A unique id per <code>crate::LogMsg</code>.","","","","","Create a new <code>MsgBundle</code> with a pre-built Vec of …","","","Create a new <code>ComponentBundle</code> from a boxed <code>Array</code>. The <code>Array</code> …","Returns the number of component collections in this …","Returns the number of <em>instances</em> for a given <code>row</code> in the …","Returns the number of <em>instances</em> for a given <code>row</code> in the …","Returns the number of <em>rows</em> in this bundle, i.e. the length …","Returns the number of <em>rows</em> for each component collections …","","","","","","","","","","","","","","","","","","","","","","","","","","A shortened string representation of the message id.","","","","","","","","","Try to append a collection of <code>Component</code> onto the …","","","","","","","Extract a <code>MsgBundle</code> from an <code>ArrowMsg</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>ComponentBundle</code> value as a boxed <code>Array</code>.","Get the <code>ComponentBundle</code> value","","","","","","","","","","","","","","","","Stream log messages to a native viewer on the main thread.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Drains all pending log messages and starts a Rerun viewer …","Starts a Rerun viewer on the current thread and migrates …","","","","","","","","","","Configure the behavior of our analytics.","","The Rerun Viewer and Server","Where are we calling <code>run</code> from?","Deletes everything related to analytics.","Called from a command-line-input (the terminal).","","Prints the current configuration.","Prints extra information about analytics.","Disable analytics.","Associate an email address with the current user.","Enable analytics.","Called from the Rerun Python SDK.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set a maximum input latency, e.g. “200ms” or “10s”.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","An upper limit on how much memory the Rerun Viewer should …","","","","","","","","","","","What TCP port do we listen to (for SDK:s to connect to)?","Start with the puffin profiler running.","","Run the Rerun application and return an exit code.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Either a path to a <code>.rrd</code> file to load, or a websocket url …","Print version and quit","","","","","Start the viewer in the browser (instead of locally). …","","","","","","","","","","Store log messages in memory until you call …","Error creating the file.","Stream log messages to an <code>.rrd</code> file.","Errors that can occur when creating a <code>FileSink</code>.","Error encoding a log message.","Where the SDK sends its log messages.","Error spawning the file writer thread.","Stream log messages to a Rerun TCP server.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sink that does nothing. All log messages are just …","","","","","Drain all buffered <code>LogMsg</code>es and return them.","","","","","","","If the TCP session is disconnected, allow it to quit early …","","Wait until all logged data have been sent to the remove …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>false</code> if this sink just discards all messages.","","","","","","","","","","Start writing log messages to a file at the given path.","Connect to the given address in a background thread. …","An empty buffer.","","","","","","","","","","","","","","","","","","Send this log message.","","","","Send all these log messages.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The beginning of time.","","","Used e.g. for frames in a film.","A date-time represented as nanoseconds since unix epoch","Normal wall time.","A 64-bit number describing either nanoseconds OR sequence …","A point in time on any number of <code>Timeline</code>s.","The type of a <code>TimeInt</code> or <code>Timeline</code>.","A time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Human-readable formatting","","","Returns a formatted string of <code>time_range</code> on this <code>Timeline</code>.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","For time timelines.","For time timelines.","","For time timelines.","","For sequence timelines.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","If true, this time is likely relative to unix epoch.","","","","","","","The log time timeline to which all API functions will …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logging to this time means the data will show upp in all …","","","Returns the absolute datetime if applicable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Hosts two servers:","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Serve log-data over WebSockets and serve a Rerun web …","","","","","","","","","","","","","","","",""],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],0,[2,3],[4,5],[6],[4,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,3],[[]],[[]],[4,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,2],[8,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[2,2],[4,4],[6,6],[10,10],[11,11],[[]],[[]],[[]],[[]],[[]],[[4,4],12],[[6,6],12],[[10,10],12],[[11,11],12],0,[[7,13],2],0,0,[14,14],[[],10],[[7,14],7],0,[[],13],0,[15],[15],[15],[15],[15],[4,5],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[16,[4]]]],[[],[[16,[6]]]],[[],[[16,[10]]]],[[],[[16,[11]]]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[19,[17,18]]]],[15],[15],[15],[15],[15],[15],[15],[15],[[7,14],7],0,0,[[4,4],14],[[4,5],14],[[6,6],14],[[10,10],14],[[11,11],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[],20],[7],[[21,22],[[16,[23]]]],[[21,22],[[16,[23]]]],[[4,22],[[16,[23]]]],[[4,22],[[16,[23]]]],[[6,22],[[16,[23]]]],[[6,22],[[16,[23]]]],[[10,22],[[16,[23]]]],[[10,22],[[16,[23]]]],[[11,22],[[16,[23]]]],[[11,22],[[16,[23]]]],[[]],[[]],[[]],[24,21],[[]],[[]],[5,4],[25,4],[25,6],[[],6],[26,6],[[[19,[27,18]]],6],[[]],[5,6],[[]],[25,11],[5,11],[[]],[[],6],[5,[[16,[10]]]],[28,10],[4,5],[[],29],[[],29],[[],29],[[],29],[[],[[31,[30,2]]]],[4],[4,29],[6,32],[6],[10],[11],0,[6,29],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[33,[25]]]],[[6,6],14],[[6,6],14],[2,14],0,[6,14],[6,34],[[6,6],6],[6,[[9,[27]]]],[6,15],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],0,[[[35,[6]]],36],[[[35,[11]]],7],[[8,[37,[3,18]]],2],[5,4],[[[19,[27,18]]],6],[[[35,[11]]],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[9,[6]]]],[[4,4],[[9,[12]]]],[[6,6],[[9,[12]]]],[[10,10],[[9,[12]]]],[[11,11],[[9,[12]]]],0,[38],[[],10],[[7,10],7],0,[[],6],0,[[39,40],[[42,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,[35,[43]]],[[16,[2,44]]]],[36,[[16,[21]]]],[[2,17]],[[2,45,46]],[4,16],[6,16],[10,16],[11,16],[4,5],0,[2,47],0,[21,[[9,[48]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[36,50],[[16,[36,21]]]],[36,[[16,[36,21]]]],[[36,[9,[51]]],[[16,[36,21]]]],[[36,52,[35,[53]]],36],[[36,14],36],[[36,45],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[1],[1],[54,54],[54,54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[55,55],[56,56],[[]],[[]],0,[15],[15],[15],[15],[[]],[[]],[15],[15],[[55,55],14],[[],14],[[],14],[[55,22],57],[[56,22],57],[[]],[[]],[58,[[16,[56,59]]]],[58,[[16,[56,59]]]],[[],[[9,[60]]]],[[],15],[[],15],[[]],[[]],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[56,5,14,[0,[61,62]]],42],[[]],[[]],[[]],[[]],0,0,0,[56,[[42,[55]]]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[]],[[]],[[]],[[]],[[],9],[[],9],[[56,58],[[16,[59]]]],[[56,58],[[16,[59]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],0,[[[9,[63]]],[[9,[63]]]],[[],9],[[],[[9,[64]]]],[[],[[9,[65]]]],[[[9,[66]]],[[9,[66]]]],[[],9],[[],9],[[],[[9,[67]]]],[[],[[9,[68]]]],[[],[[9,[69]]]],[[],9],[[],9],[[],9],[[],9],[[[9,[70]]],[[9,[70]]]],[[],9],[[[9,[71]]],[[9,[71]]]],[[[9,[72]]],[[9,[72]]]],[[[9,[73]]],[[9,[73]]]],[[[9,[74]]],[[9,[74]]]],[[],9],[[],[[9,[75]]]],[[[9,[76]]],[[9,[76]]]],[[],[[9,[77]]]],[[[9,[78]]],[[9,[78]]]],[[[9,[79]]],[[9,[79]]]],[[],9],[[[9,[80]]],[[9,[80]]]],[[[9,[81]]],[[9,[81]]]],[[[9,[82]]],[[9,[82]]]],[[[9,[83]]],[[9,[83]]]],[[[9,[84]]],[[9,[84]]]],[[[9,[85]]],[[9,[85]]]],[[[9,[86]]],[[9,[86]]]],[[[9,[87]]],[[9,[87]]]],[[],[[9,[88]]]],[[],[[9,[89]]]],[[],[[9,[90]]]],[63,[[16,[91]]]],[92,[[16,[91]]]],[64,[[16,[91]]]],[65,[[16,[91]]]],[66,[[16,[91]]]],[93,[[16,[91]]]],[94,[[16,[91]]]],[67,[[16,[91]]]],[68,[[16,[91]]]],[69,[[16,[91]]]],[95,[[16,[91]]]],[96,[[16,[91]]]],[97,[[16,[91]]]],[[],[[16,[91]]]],[70,[[16,[91]]]],[98,[[16,[91]]]],[71,[[16,[91]]]],[72,[[16,[91]]]],[73,[[16,[91]]]],[74,[[16,[91]]]],[99,[[16,[91]]]],[75,[[16,[91]]]],[76,[[16,[91]]]],[77,[[16,[91]]]],[78,[[16,[91]]]],[79,[[16,[91]]]],[[],[[16,[91]]]],[80,[[16,[91]]]],[81,[[16,[91]]]],[82,[[16,[91]]]],[83,[[16,[91]]]],[84,[[16,[91]]]],[85,[[16,[91]]]],[86,[[16,[91]]]],[87,[[16,[91]]]],[88,[[16,[91]]]],[89,[[16,[91]]]],[90,[[16,[91]]]],[86,[[9,[100]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[85,101],0,[63,63],[92,92],[64,64],[65,65],[66,66],[102,102],[93,93],[94,94],[67,67],[68,68],[69,69],[95,95],[96,96],[97,97],[103,103],[70,70],[98,98],[71,71],[72,72],[73,73],[74,74],[99,99],[75,75],[76,76],[77,77],[78,78],[104,104],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[64,64],12],[[67,67],12],[[68,68],12],[[103,103],12],[[104,104],12],0,0,[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],64],[[],66],[[],102],[[],93],[[],68],[[],99],[[],85],[[],88],[[],89],[[],90],[29,81],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[94,25],[94,25],[[],[[16,[63]]]],[[],[[16,[92]]]],[[],[[16,[64]]]],[[],[[16,[65]]]],[[],[[16,[66]]]],[[],[[16,[102]]]],[[],[[16,[93]]]],[[],[[16,[94]]]],[[],[[16,[67]]]],[[],[[16,[68]]]],[[],[[16,[69]]]],[[],[[16,[95]]]],[[],[[16,[96]]]],[[],[[16,[97]]]],[[],[[16,[103]]]],[[],[[16,[70]]]],[[],[[16,[98]]]],[[],[[16,[71]]]],[[],[[16,[72]]]],[[],[[16,[99]]]],[[],[[16,[104]]]],[[],[[16,[81]]]],[[],[[16,[82]]]],[[],[[16,[85]]]],[[],[[16,[86]]]],[[],[[16,[87]]]],[[],[[16,[88]]]],[[],[[16,[89]]]],[[],[[16,[90]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],106],[83,106],[[63,63],14],[[92,92],14],[[64,64],14],[[65,65],14],[[66,66],14],[[102,102],14],[[93,93],14],[[94,94],14],[[67,67],14],[[68,68],14],[[69,69],14],[[95,95],14],[[96,96],14],[[97,97],14],[[103,103],14],[[70,70],14],[[98,98],14],[[71,71],14],[[72,72],14],[[73,73],14],[[74,74],14],[[99,99],14],[[76,76],14],[[104,104],14],[[80,80],14],[[81,81],14],[[82,82],14],[[83,83],14],[[84,84],14],[[85,85],14],[[86,86],14],[[87,87],14],[[88,88],14],[[89,89],14],[[90,90],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[63,22],[[16,[23]]]],[[92,22],[[16,[23]]]],[[64,22],[[16,[23]]]],[[65,22],[[16,[23]]]],[[66,22],[[16,[23]]]],[[102,22],[[16,[23]]]],[[93,22],[[16,[23]]]],[[94,22],[[16,[23]]]],[[67,22],[[16,[23]]]],[[67,22],[[16,[23]]]],[[68,22],[[16,[23]]]],[[69,22],[[16,[23]]]],[[95,22],[[16,[23]]]],[[96,22],[[16,[23]]]],[[97,22],[[16,[23]]]],[[103,22],[[16,[23]]]],[[70,22],[[16,[23]]]],[[98,22],[[16,[23]]]],[[71,22],[[16,[23]]]],[[71,22],[[16,[23]]]],[[72,22],[[16,[23]]]],[[73,22],[[16,[23]]]],[[74,22],[[16,[23]]]],[[99,22],[[16,[23]]]],[[75,22],[[16,[23]]]],[[76,22],[[16,[23]]]],[[77,22],[[16,[23]]]],[[78,22],[[16,[23]]]],[[79,22],[[16,[23]]]],[[104,22],[[16,[23]]]],[[80,22],[[16,[23]]]],[[81,22],[[16,[23]]]],[[81,22],[[16,[23]]]],[[82,22],[[16,[23]]]],[[83,22],[[16,[23]]]],[[84,22],[[16,[23]]]],[[85,22],[[16,[23]]]],[[86,22],[[16,[23]]]],[[87,22],[[16,[23]]]],[[88,22],[[16,[23]]]],[[88,22],[[16,[23]]]],[[89,22],[[16,[23]]]],[[89,22],[[16,[23]]]],[[90,22],[[16,[23]]]],[[90,22],[[16,[23]]]],[86,[[9,[100]]]],[86,88],0,[94,[[9,[107]]]],[86,[[9,[100]]]],[[]],[108,92],[[]],[[]],[[],65],[[]],[[]],[109,102],[[]],[[[19,[110,18]]],93],[[]],[[]],[[]],[[]],[25,69],[[]],[[]],[[[19,[18]]],95],[[]],[[[19,[18]]],96],[[]],[111,97],[[],97],[[]],[[]],[[]],[[]],[[]],[112,73],[[]],[[],73],[[],74],[[]],[108,74],[113,99],[[]],[[]],[[]],[[]],[114,77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[112,88],[[],88],[[]],[108,89],[[]],[[],89],[[]],[[[35,[25]]],84],[115,[[16,[83,116]]]],[[[35,[115]]],[[16,[83,116]]]],[[41,41,41],65],[[41,41,41,41],65],[94,111],[5,[[16,[94]]]],[[107,117],94],[[100,100,100,100],76],[[],[[9,[118]]]],[83,[[9,[118]]]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[94,[[9,[117]]]],[64],[67],[68],[103],[71],[104],[76,100],[29,81],[[],104],[83,104],0,0,[97],[88],[89],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[33,[25]]]],[[],14],[83,14],[67,14],[67,14],[[],14],[83,14],0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],82],[83,82],0,[72,103],0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[29,25],81],[[100,100,100],92],[[100,100],73],[[100,100,100],74],[[100,100,100,100],99],[[104,[19,[81,18]],80,82,[9,[100]]],83],[[[35,[25]],[9,[25]]],84],[[100,100,100],89],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[101,85],[101,85],0,[[],15],[83,15],[70,15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,101],[[64,64],[[9,[12]]]],[[67,67],[[9,[12]]]],[[68,68],[[9,[12]]]],[[103,103],[[9,[12]]]],[[104,104],[[9,[12]]]],0,[86,112],[[],103],[[],104],[86,[[9,[112]]]],0,[94,[[9,[107]]]],0,[94,[[16,[25]]]],[70,[[16,[119]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[63,16],[92,16],[64,16],[65,16],[66,16],[102,16],[93,16],[94,16],[67,16],[68,16],[69,16],[95,16],[96,16],[97,16],[103,16],[70,16],[98,16],[71,16],[72,16],[99,16],[104,16],[81,16],[82,16],[85,16],[86,16],[87,16],[88,16],[89,16],[90,16],[[]],[83],0,0,[[],15],[83,15],[67,[[9,[67]]]],[[[19,[41,18]]],[[16,[83,116]]]],[[[121,[120]]],[[16,[83,116]]]],0,[65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94,111],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[76],0,0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[122,[[16,[98,123]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[125,[[124,[100]]]]],[[16,[83]]]],[[],16],[[[125,[[124,[126]]]]],[[16,[83]]]],[[[125,[[128,[127]]]]],[[16,[83]]]],[[[125,[[128,[129]]]]],[[16,[83]]]],[[[125,[[128,[41]]]]],[[16,[83]]]],[[[125,[[124,[130]]]]],[[16,[83]]]],[[[125,[[124,[131]]]]],[[16,[83]]]],[[[125,[[128,[131]]]]],[[16,[83]]]],[[[125,[[128,[29]]]]],[[16,[83]]]],[[[125,[[128,[100]]]]],[[16,[83]]]],[[[125,[[124,[127]]]]],[[16,[83]]]],[[[125,[[124,[129]]]]],[[16,[83]]]],[[[125,[[128,[132]]]]],[[16,[83]]]],[[[125,[[128,[130]]]]],[[16,[83]]]],[[[125,[[124,[29]]]]],[[16,[83]]]],[[[125,[[124,[41]]]]],[[16,[83]]]],[[[125,[[124,[114]]]]],[[16,[83]]]],[[[125,[[124,[132]]]]],[[16,[83]]]],[[[125,[[128,[114]]]]],[[16,[83]]]],[[[125,[[128,[126]]]]],[[16,[83]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[29,81],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94,[[9,[107]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[90,100],0,[76,100],[29,81],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[88,100],[89,100],[90,100],0,0,0,0,0,[88,100],[89,100],[90,100],0,0,0,0,0,[89,100],[90,100],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[107],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[133,133],[134,134],[107,107],[117,117],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[117,5],[[],[[16,[133]]]],[[],[[16,[134]]]],[[],[[16,[107]]]],[[],[[16,[117]]]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[[133,133],14],[[134,134],14],[[107,107],14],[[117,117],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[133,22],[[16,[23]]]],[[133,22],[[16,[23]]]],[[134,22],[[16,[23]]]],[[107,22],[[16,[23]]]],[[107,22],[[16,[23]]]],[[117,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[15,133],[14,117],[5,[[16,[107]]]],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[134,133],107],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[133,16],[134,16],[107,16],[117,16],0,[[]],[[]],[[]],[[]],[[],25],[[],25],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[120,25],[135,25],[5,25],[[135,22],57],[39],[39],[39],[100],[[15,100,100,100,100]],[[108,108,15],34],[100],[15,34],0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[136,136],[137,29],[[136,53]],[[136,136]],[[136,136]],0,0,0,[136,100],[118,114],[136,114],[138,129],[139,5],[138,100],[138,114],[26],[139,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[139,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[136,53],[137,53],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[140,140],[141,141],[142,142],[106,106],[118,118],[143,143],[144,144],[145,145],[146,146],[32,32],[26,26],[27,27],[138,138],[139,139],[137,137],[147,147],[136,136],[148,148],[8,8],[149,149],[150,150],[151,151],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[143,143],12],[[144,144],12],[[26,26],12],[[27,27],12],[[138,138],12],[[139,139],12],[[136,136],12],[146,4],0,0,[[137,53],14],[[147,136],14],0,[[],139],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[139,5],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[16,[140]]]],[[],[[16,[141]]]],[[],[[16,[142]]]],[[],[[16,[106]]]],[[],[[16,[118]]]],[[],[[16,[143]]]],[[],[[16,[144]]]],[[],[[16,[146]]]],[[],[[16,[26]]]],[[],[[16,[27]]]],[[],[[16,[138]]]],[[],[[16,[139]]]],[[],[[16,[137]]]],[[],[[16,[147]]]],[[],[[16,[136]]]],[[],[[16,[148]]]],[[],[[16,[8]]]],[[],[[16,[149]]]],[[],[[16,[150]]]],[[],[[16,[151]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],0,[146,6],0,0,0,[[140,140],14],[[141,141],14],[[142,142],14],[[106,106],14],[[118,118],14],[[143,143],14],[[144,144],14],[[145,145],14],[[146,146],14],[[32,32],14],[[26,26],14],[[152,152],14],[[27,27],14],[[138,138],14],[[139,5],14],[[139,139],14],[[137,137],14],[[147,147],14],[[136,136],14],[[136,53],14],[[148,148],14],[[8,8],14],[[149,149],14],[[150,150],14],[[151,151],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[138,22],[[16,[23]]]],0,[145,29],[136,53],[[140,22],[[16,[23]]]],[[141,22],[[16,[23]]]],[[142,22],[[16,[23]]]],[[106,22],[[16,[23]]]],[[106,22],[[16,[23]]]],[[118,22],[[16,[23]]]],[[118,22],[[16,[23]]]],[[143,22],[[16,[23]]]],[[143,22],[[16,[23]]]],[[144,22],[[16,[23]]]],[[145,22],[[16,[23]]]],[[146,22],[[16,[23]]]],[[32,22],[[16,[23]]]],[[26,22],[[16,[23]]]],[[26,22],[[16,[23]]]],[[152,22],[[16,[23]]]],[[152,22],[[16,[23]]]],[[27,22],[[16,[23]]]],[[27,22],[[16,[23]]]],[[138,22],[[16,[23]]]],[[139,22],[[16,[23]]]],[[139,22],[[16,[23]]]],[[137,22],[[16,[23]]]],[[147,22],[[16,[23]]]],[[136,22],[[16,[23]]]],[[148,22],[[16,[23]]]],[[8,22],[[16,[23]]]],[[149,22],[[16,[23]]]],[[149,22],[[16,[23]]]],[[150,22],[[16,[23]]]],[[150,22],[[16,[23]]]],[[151,22],[[16,[23]]]],0,[[]],[[]],[[]],[[]],[[]],[25,143],[[]],[5,143],[[]],[[]],[[]],[[]],[[]],[[],26],[[]],[143,27],[25,27],[5,27],[[]],[136,138],[[]],[53,138],[5,139],[25,139],[[]],[[]],[[]],[137,147],[129,136],[153,136],[138,136],[[]],[114,136],[100,136],[53,136],[[]],[[]],[[]],[[]],[[]],[129,138],[129,138],[100,138],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,[143],[143,145],[144],[145],[143,145],[146],[32],[26],[27],[138],[139],[139,29],[136],0,[145,29],[32,29],0,0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[147,136],114],[144,14],[147,14],[145,14],[32,14],0,[26,14],[145,14],[32,14],[26,34],[26,[[9,[27]]]],[144,15],[26,15],[147,136],[[147,114],136],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[136,114]],0,[138,138],[136],[[6,4],146],[[[19,[27,18]]],26],[5,139],[[53,53],137],[[[35,[136]],[35,[136]]],147],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,[[9,[26]]]],[5,[[16,[[19,[27,18]],152]]]],[[143,143],[[9,[12]]]],[[144,144],[[9,[12]]]],[[26,26],[[9,[12]]]],[[27,27],[[9,[12]]]],[[138,138],[[9,[12]]]],[[139,139],[[9,[12]]]],[[136,53],[[9,[12]]]],[[136,136],[[9,[12]]]],0,0,0,0,0,[[[35,[53]]],137],[[[35,[136]]],147],0,[38],[[26,27]],0,0,0,[[],26],0,0,[136,53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[145,29],[140,16],[141,16],[142,16],[106,16],[118,16],[143,16],[144,16],[146,16],[26,16],[27,16],[138,16],[139,16],[137,16],[147,16],[136,16],[148,16],[8,16],[149,16],[150,16],[151,16],[106,29],0,[[136,53]],[[136,136]],[[136,136]],0,[[],136],0,[140,[[16,[45,24]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,0,[118,[[9,[131]]]],[[],16],[154,[[16,[140,24]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[137,137],137],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],[[16,[91]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,[[],105],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[[],106],0,[[155,155],14],[[155,22],[[16,[23]]]],[[155,22],[[16,[23]]]],[[116,22],[[16,[23]]]],[[116,22],[[16,[23]]]],[[123,22],[[16,[23]]]],[[123,22],[[16,[23]]]],0,[[]],[[]],[[]],[156,155],[[]],[157,116],[[]],[158,116],[159,123],[[]],[[],[[9,[118]]]],[[],104],0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[160],[[],14],[[],14],[[],34],0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],82],0,0,0,0,0,[[]],[161,9],0,[[],15],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[38],[38],[38],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,0,[[],15],[155,[[9,[48]]]],[116,[[9,[48]]]],[123,[[9,[48]]]],0,[[],25],[[],25],[[],25],0,0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[9,[110]]],[[9,[110]]]],[110,[[16,[91]]]],[162,163],[164,163],[162,[[47,[165]]]],[164,[[47,[165]]]],[162,[[37,[165,18]]]],[164,[[37,[165,18]]]],[162,163],[164,163],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,[162,105],[[],105],[164,105],0,0,[[],162],[[],164],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],0,0,0,0,0,0,0,0,0,0,[[162,22],[[16,[23]]]],[[164,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[166],[[]],[167],[[]],0,0,0,[162,15],[164,15],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],162],[[],164],[[]],[168,9],[169,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[162],[164],[[162,15]],[[164,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[162],[164],[162,[[16,[91]]]],[164,[[16,[91]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[162,9],[[16,[91]]]],[[164,9],[[16,[91]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[162,[[9,[170]]]],[164,[[9,[170]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[171,171],[[]],[15],[15],[[],[[16,[171]]]],[[]],[15],[[171,171],14],[[],14],[[],14],[[171,22],[[16,[23]]]],[[]],[[],15],[[]],[171,5],[[],9],[[]],[[]],[[]],[[]],[[]],[171,16],[171,5],0,[[]],[[],16],[41,[[16,[171,123]]]],[[],16],[[],49],[[]],[[]],[[],9],[[]],[[]],[[]],[53],[153],[15,[[19,[65,18]]]],[15,[[19,[67,18]]]],[50,[[19,[67,18]]]],[15,[[19,[25,18]]]],[15,[[19,[73,18]]]],[15,[[19,[76,18]]]],[15,[[19,[89,18]]]],0,0,0,0,0,0,0,0,0,0,0,[[172,17],[[16,[173]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[[34,174],[[16,[173]]]],[172,[[16,[173]]]],[[173,22],[[16,[23]]]],[[173,22],[[16,[23]]]],[[175,22],[[16,[23]]]],[[175,22],[[16,[23]]]],[[]],[[]],[176,173],[[]],[177,175],[[]],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[],[[16,[172,173]]]],[[],[[16,[[179,[178]],175]]]],[179,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[173,[[9,[48]]]],[175,[[9,[48]]]],[[],25],[[],25],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[1],[1],[180,14],[180,14],0,[180,181],[180,5],[180],[180],[180,120],[180,180],[180,182],[[[183,[180]]],[[180,[183,183]]]],[[[183,[180]]],[[180,[183,183]]]],[180],[180,181],[180,5],[180,180],[180,182],[180],[180,120],[[]],[[]],0,[[]],[[]],[[]],[[]],0,[[]],[[]],[180,[[9,[48]]]],[[],9],[[],9],[[],9],[[],9],0,[[],184],[180,180],[185,185],[[180,180]],[[]],[[]],[[180,180],12],[180],0,[[180,15]],[180,15],0,[[],[[185,[186]]]],[180],[15],[185],[15],[15],[180],[15],[185],[180,5],[[],[[16,[[185,[186]]]]]],[[]],[[]],[180],[180],[15],[15],[180],[180],[180],[[180,180],14],[[185,185],14],[[],14],[[],14],[[],14],[[],14],0,[[180,5]],[[180,5]],[180],[185],[185],[[[180,[16,16]]],[[16,[180]]]],[180],[[[180,[9,9]]],[[9,[180]]]],[[[180,[16,16]]],[[16,[180]]]],[180],0,[180,[[16,[158]]]],[180,9],[180,9],[180,180],[180,[[16,[158]]]],[[180,22],[[16,[23]]]],[[180,22],[[16,[23]]]],[[185,22],[[16,[23]]]],[180],[180],[16,180],[[]],[[[187,[186]]],[[185,[186]]]],[[],[[185,[186]]]],[[]],[[],[[185,[186]]]],[185,9],[[],29],[185,9],[185,9],[180],[185],[[],15],[[],15],[185,9],[[]],[180,16],[[[185,[186]]],[[187,[186]]]],[[]],[[]],[180],[[]],[180,180],[185],[185],[185],[185,188],[[]],[185,189],[[],[[19,[25,18]]]],0,[180,14],[180,14],[180,9],[180,9],[180,180],[180],[180],[180],[180,15],[180,15],[[],9],[[],9],[[]],[[]],[180,180],[180,180],[180,180],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[185,[186]]]],[180,9],[180,9],[[],190],[[],191],[[],190],[[],191],[[180,15],9],0,[180,[[9,[15]]]],[[]],[[]],[[]],[[]],[180],[[180,180],[[9,[12]]]],[180],[[[183,[180]],192],193],[180,[[9,[15]]]],[38],[180,[[16,[15,158]]]],[180,[[16,[158]]]],[[],16],[[180,25],[[16,[15,158]]]],[[180,19],[[16,[15,158]]]],[[180,25],[[16,[15,158]]]],[[180,41,19],[[16,[15,158]]]],[185,9],[180,9],[180],[180,9],[180,180],[180],[180],[180],[[]],[[]],[[]],[[]],0,[[180,194],[[16,[29,158]]]],[[[185,[186]]],16],[180],[180,[[9,[48]]]],[[],195],0,[[]],[[]],[[],25],0,[[],16],[[],16],[[],16],[[],16],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[183,192],193],[[],49],[[],49],0,[180],[180],[[]],[[]],[[]],[[]],[[],9],[[],9],0,[[]],[[]],[15,[[185,[186]]]],[15,185],[[],185],[180],[[]],[[]],[[]],[[]],[180,[[16,[15,158]]]],[180,[[16,[158]]]],[[],16],[[180,197],[[16,[158]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[198,198],[[[198,[199]],198],[[198,[199]]]],[[198,198],198],[[],14],[198],[200],[201],[202],[203,[[47,[165]]]],[202,[[47,[165]]]],[204,[[47,[165]]]],[205,[[47,[165]]]],[206,[[47,[165]]]],[207,[[47,[165]]]],[208,[[47,[165]]]],[209,[[47,[165]]]],[198,[[47,[165]]]],[210,[[47,[165]]]],[211,[[47,[165]]]],[200,[[47,[165]]]],0,[[],163],[[],163],[212,163],[213,163],[203,163],[214,163],[202,163],[215,163],[204,163],[216,163],[205,163],[217,163],[206,163],[218,163],[207,163],[208,163],[209,163],[201,163],[198,163],[219,163],[210,163],[211,163],[220,163],[221,163],[200,163],[[],163],[203,163],[202,163],[204,163],[205,163],[206,163],[207,163],[208,163],[209,163],[198,163],[210,163],[211,163],[200,163],[[],[[47,[165]]]],[212,[[47,[165]]]],[213,[[47,[165]]]],[214,[[47,[165]]]],[215,[[47,[165]]]],[216,[[47,[165]]]],[217,[[47,[165]]]],[218,[[47,[165]]]],[201,[[47,[165]]]],[219,[[47,[165]]]],[220,[[47,[165]]]],[221,[[47,[165]]]],[[],[[37,[165,18]]]],[212,[[37,[165,18]]]],[213,[[37,[165,18]]]],[214,[[37,[165,18]]]],[215,[[37,[165,18]]]],[216,[[37,[165,18]]]],[217,[[37,[165,18]]]],[218,[[37,[165,18]]]],[201,[[37,[165,18]]]],[219,[[37,[165,18]]]],[220,[[37,[165,18]]]],[221,[[37,[165,18]]]],[[],163],[212,163],[213,163],[214,163],[215,163],[216,163],[217,163],[218,163],[201,163],[219,163],[220,163],[221,163],[165,165],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[203,[[37,[165,18]]]],[202,[[37,[165,18]]]],[204,[[37,[165,18]]]],[205,[[37,[165,18]]]],[206,[[37,[165,18]]]],[207,[[37,[165,18]]]],[208,[[37,[165,18]]]],[209,[[37,[165,18]]]],[198,[[37,[165,18]]]],[210,[[37,[165,18]]]],[211,[[37,[165,18]]]],[200,[[37,[165,18]]]],[[],[[37,[222,18]]]],[[],[[37,[223,18]]]],[212,15],[216,15],[201,15],[220,15],[221,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,[[16,[224]]]],[15,[[16,[224]]]],[[[198,[199]],198],[[198,[199]]]],[198,198],[[198,198],198],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[198,198],198],[[[198,[199]],198],[[198,[199]]]],[198,198],[[[198,[199]],198],[[198,[199]]]],[[198,198],198],[198,198],[198,198],[[198,198],198],[[198,198],198],[[[198,[199]],198],[[198,[199]]]],[198,198],[[],184],[165,[[37,[165,18]]]],[165,[[37,[165,18]]]],[212,212],[213,213],[203,203],[214,214],[202,202],[204,204],[216,216],[205,205],[217,217],[206,206],[218,218],[207,207],[208,208],[209,209],[201,201],[198,198],[210,210],[211,211],[220,220],[221,221],[200,200],[225,225],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],105],[[],105],[212,105],[213,105],[203,105],[203,105],[214,105],[202,105],[202,105],[215,105],[204,105],[204,105],[216,105],[205,105],[217,105],[206,105],[218,105],[207,105],[208,105],[209,105],[201,105],[198,105],[198,105],[219,105],[210,105],[211,105],[220,105],[221,105],[200,105],[200,105],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],212],[[],213],[[],214],[[],215],[[],218],[[],201],[[],198],[[],220],[[],221],[[],200],[[],105],[[],105],[[],105],[[],105],[[105,15],105],[105,105],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[[198,[199]],198],[[198,[199]]]],[198,198],[[198,198],198],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],0,[[165,200],14],[[165,165],14],[[165,198],14],[[165,203],14],[[213,213],14],[[203,203],14],[[203,165],14],[[214,214],14],[[202,202],14],[[202,165],14],[[204,165],14],[[204,204],14],[[216,216],14],[[205,205],14],[[205,165],14],[[206,206],14],[[206,165],14],[[207,207],14],[[207,165],14],[[208,165],14],[[208,208],14],[[209,209],14],[[209,165],14],[[201,201],14],[[198,198],14],[[198,165],14],[[210,165],14],[[210,210],14],[[211,211],14],[[211,165],14],[[220,220],14],[[200,165],14],[[200,200],14],[[165,165],14],[212],[213],[214],[201],[220],[221],[[201,15,9]],[201],[212],[213],[214],[201],[220],[221],[212],[213],[214],[201],[220],[221],[213],[214],[201],[220],[213],[214],[201],[220],[213],[220],[208,37],0,[210],[211,19],0,[[165,22],[[16,[23]]]],[[212,22],[[16,[23]]]],[[213,22],[[16,[23]]]],[[203,22],[[16,[23]]]],[[214,22],[[16,[23]]]],[[202,22],[[16,[23]]]],[[215,22],[[16,[23]]]],[[204,22],[[16,[23]]]],[[216,22],[[16,[23]]]],[[205,22],[[16,[23]]]],[[217,22],[[16,[23]]]],[[206,22],[[16,[23]]]],[[218,22],[[16,[23]]]],[[207,22],[[16,[23]]]],[[208,22],[[16,[23]]]],[[209,22],[[16,[23]]]],[[201,22],[[16,[23]]]],[[198,22],[[16,[23]]]],[[219,22],[[16,[23]]]],[[210,22],[[16,[23]]]],[[211,22],[[16,[23]]]],[[220,22],[[16,[23]]]],[[221,22],[[16,[23]]]],[[200,22],[[16,[23]]]],[[225,22],[[16,[23]]]],[[]],[212,213],[[],213],[[]],[213,203],[212,203],[226,203],[[],203],[[]],[[],214],[[]],[214,202],[[],202],[227,202],[[]],[228],[[]],[[],215],[229,204],[215,204],[[]],[[]],[[],216],[230,205],[[]],[216,205],[[],205],[[]],[[]],[217,206],[231,206],[[]],[218,207],[[]],[232,207],[[]],[[]],[233,209],[[],201],[[]],[105,201],[[],198],[[]],[201,198],[234,198],[[]],[[]],[219,210],[235,210],[[]],[236,211],[221,220],[[],220],[[]],[[]],[220,200],[[],200],[[]],[221,200],[237,200],[[]],[[238,[9,[238]]],202],[[239,[9,[238]]],198],[[[239,[129]],[239,[41]],[9,[238]]],[[203,[129]]]],[[[239,[129]],[239,[41]],[9,[238]]],[[200,[129]]]],[240],[240],[[]],[[]],[[],212],[[],213],[[],203],[[],214],[[],202],[15,205],[[],201],[[],198],[[],220],[[],221],[[],200],[[],202],[[],202],[[],198],[[],198],[[],213],[[],203],[[],220],[[],200],[[],203],[[],214],[[],202],[[],205],[[],201],[[],198],[[],200],[240],[[],212],[[],213],[[],203],[[],214],[[],202],[[],201],[[],198],[[],220],[[],221],[[],200],[[],212],[[],213],[[],203],[[],214],[[],202],[[],201],[[],198],[[],220],[[],221],[[],200],[[],213],[[],203],[[],214],[[],202],[[],201],[[],198],[[],220],[[],200],[[],213],[[],214],[[],202],[[],201],[[],198],[[],220],[[],198],[[[19,[18]]],201],[[[19,[18]]],198],[[203,15],9],[[202,15],9],[[[207,[129]],15],9],[[198,15],9],[[200,15],9],[105,20],[[165,15],15],[105,105],[[165,5],[[37,[241,18]]]],[105],[105],[198,9],[[203,15],9],[[202,15],9],[[[207,[129]],15],9],[[198,15],9],[[200,15],9],[[165,5],[[37,[241,18]]]],[[[203,[129]]],15],[[[207,[129]]],15],[[[200,[129]]],15],0,[[211,15]],0,[[211,15]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[213,[[47,[165]]]],[214,[[47,[165]]]],[215,[[47,[165]]]],[218,[[47,[165]]]],[201,[[47,[165]]]],[219,[[47,[165]]]],[220,[[47,[165]]]],[215,[[37,[165,18]]]],[218,[[37,[165,18]]]],[210],[220],[212],[202],[201],[198],[219],[221],[212],[203],[214],[202],[202],[204],[216],[205],[206],[207],[208],[198],[198],[210],[211],[220],[221],[200],[[]],[203,[[180,[203,213]]]],[202,[[180,[202,214]]]],[198,[[180,[198,201]]]],[200,[[180,[200,220]]]],[[],[[19,[25,18]]]],[165,14],[[],14],[[],14],[15,14],[15,14],[15,14],[15,14],[15,14],[15,14],[204,14],[165,[[16,[14,242]]]],[105,14],[15,14],[15,14],[15,14],[15,14],[15,14],[15,14],[15,14],[212,[[225,[212]]]],[213,[[244,[[225,[212]],243]]]],[203,[[244,[[225,[203]],243]]]],[214,[[244,[14,243,243]]]],[202,[[244,[14,243,243]]]],[204,[[244,[[37,[245,18]],246,243]]]],[216,[[244,[[247,[41]],243]]]],[205,[[244,[[247,[41]],243]]]],[206,[[244,[[37,[165,18]],[225,[206]],243]]]],[207,[[244,[[37,[165,18]],[225,[207]],243]]]],[208,[[244,[[37,[165,18]],248,243]]]],[201,[[244,[249,243]]]],[198,[[244,[249,243]]]],[210,[[244,[[19,[[37,[245,18]],18]],250,243]]]],[211,251],[220,[[244,[5,[225,[221]],243]]]],[221,[[225,[221]]]],[200,[[244,[5,[225,[200]],243]]]],[204,[[16,[[244,[252,243]],91]]]],[216,[[247,[41]]]],[[204,15],15],[215,201],[204,198],0,0,[204,[[0,[253,254]]]],[204,[[0,[253,254]]]],[[],15],[[],15],[212,15],[212,15],[213,15],[203,15],[203,15],[214,15],[202,15],[202,15],[215,15],[204,15],[204,15],[216,15],[216,15],[205,15],[205,15],[217,15],[217,15],[206,15],[206,15],[218,15],[218,15],[207,15],[207,15],[208,15],[208,15],[209,15],[201,15],[198,15],[198,15],[219,15],[210,15],[211,15],[211,15],[220,15],[220,15],[221,15],[221,15],[200,15],[200,15],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[215,187],0,0,[[198,198],198],[198,198],[[[198,[199]],198],[[198,[199]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[217],[218],[219,19],[[],212],[[],213],[[105,255,[239,[41]],[9,[238]]],203],[[],214],[[105,238,[9,[238]]],202],[[],215],[15,216],[[105,[239,[41]],[9,[238]]],205],[15,217],[[105,[37,[165,18]],[9,[238]]],206],[[],218],[[105,255,[37,[165,18]],[9,[238]]],207],[[105,[255,[132]],[37,[165,18]],[9,[238]]],208],[[105,15],209],[[],201],[[105,239,[9,[238]]],198],[[105,[19,[[37,[256,18]],18]]],219],[[105,[19,[[37,[165,18]],18]],[9,[238]]],210],[[105,[239,[126]],[19,[[37,[165,18]],18]],[9,[[239,[132]]]]],211],[[],220],[[],221],[[105,255,[239,[41]],[9,[238]]],200],[[],225],[105,203],[105,202],[105,204],[105,205],[105,206],[105,207],[105,208],[105,209],[105,198],[105,210],[105,211],[105,200],[105,[[37,[165,18]]]],[[105,15],217],[[105,15],218],[[105,15],203],[[105,15],202],[[105,15],204],[[105,15],205],[[105,15],206],[[105,15],207],[[105,15],208],[[105,15],209],[[105,15],198],[[105,15],210],[[105,15],211],[[105,15],200],[[105,15],[[37,[165,18]]]],[[105,257,[19,[41,18]],[9,[170]]],220],[[105,257,[19,[41,18]]],221],[[105,255,[239,[41]],[9,[238]]],200],[15,218],[[5,14,15],217],[[5,14],218],[225,9],[225,9],[[],190],[[],191],[[],190],[[],191],[[225,15],9],[[],15],0,[[]],[212,257],[213,257],[203],[203,255],[218,257],[207,255],[208,255],[211,[[9,[239]]]],[220,257],[221,257],[200,255],[200],0,0,0,0,0,0,0,0,0,[[198,198]],[198],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[198],[[198,198]],[[198,198]],[198],[212,[[9,[[19,[41,18]]]]]],[213,[[9,[[19,[41,18]]]]]],[214,[[9,[14]]]],[216,[[9,[[19,[41,18]]]]]],[201,9],[220,[[9,[25]]]],[221,[[9,[25]]]],[212],[[213,9]],[[214,[9,[14]]]],[[216,9]],[[201,9]],[[219,14]],[[220,9]],[221],[[]],[212],[213],[214],[215],[215],[216],[217],[218],[201],[219],[220],[221],[198,198],[[198,198],198],[15],[[212,15]],[[212,15,15]],[[213,15,15]],[[213,15]],[[214,15]],[[214,15]],[[215,15]],[[215,15]],[[216,15]],[[216,15]],[[217,15]],[[217,15]],[[218,15]],[[218,15]],[[201,15]],[[201,15]],[[219,15]],[[219,15]],[[220,15]],[[220,15,15]],[[221,15,15]],[[221,15]],[198,198],[[198,198],198],[[[198,[199]],198],[[198,[199]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[198,[199]],198],[[198,[199]]]],[198,198],[[198,198],198],[[[198,[199]],198],[[198,[199]]]],[[198,198],198],[198,198],[[214,15,[9,[14]]]],[[201,15,9]],[[201,15,9]],[[203,[9,[238]]]],[[202,[9,[238]]]],[[204,[9,[238]]]],[[205,[9,[238]]]],[[206,[9,[238]]]],[[207,[9,[238]]]],[[208,[9,[238]]]],[[201,[9,[170]]]],[[198,[9,[238]]]],[[210,[9,[238]]]],[[200,[9,[238]]]],[[202,238]],[[201,[19,[18]]]],[[198,239]],[[]],[212],[212],[213],[213],[214],[214],[215],[215],[216],[216],[217],[217],[218],[218],[201],[201],[219],[219],[220],[220],[221],[221],[216,15],[205,15],[217,15],[206,15],0,0,0,0,[225],[[15,15],[[37,[165,18]]]],[[203,15,15],203],[[203,15,15],[[37,[165,18]]]],[[202,15,15],[[37,[165,18]]]],[[202,15,15],202],[[204,15,15],204],[[204,15,15],[[37,[165,18]]]],[[205,15,15],205],[[205,15,15],[[37,[165,18]]]],[[206,15,15],206],[[206,15,15],[[37,[165,18]]]],[[207,15,15],[[37,[165,18]]]],[[207,15,15],207],[[208,15,15],[[37,[165,18]]]],[[208,15,15],208],[[209,15,15],[[37,[165,18]]]],[[209,15,15],209],[[198,15,15],198],[[198,15,15],[[37,[165,18]]]],[[210,15,15],[[37,[165,18]]]],[[210,15,15],210],[[211,15,15],[[37,[165,18]]]],[[211,15,15],211],[[200,15,15],[[37,[165,18]]]],[[200,15,15],200],[[15,15],[[37,[165,18]]]],[[203,15,15],203],[[203,15,15],[[37,[165,18]]]],[[202,15,15],202],[[202,15,15],[[37,[165,18]]]],[[204,15,15],204],[[204,15,15],[[37,[165,18]]]],[[205,15,15],[[37,[165,18]]]],[[205,15,15],205],[[206,15,15],206],[[206,15,15],[[37,[165,18]]]],[[207,15,15],[[37,[165,18]]]],[[207,15,15],207],[[208,15,15],208],[[208,15,15],[[37,[165,18]]]],[[209,15,15],[[37,[165,18]]]],[[198,15,15],[[37,[165,18]]]],[[198,15,15],198],[[210,15,15],[[37,[165,18]]]],[[210,15,15],210],[[211,15,15],[[37,[165,18]]]],[[211,15,15],211],[[200,15,15],200],[[200,15,15],[[37,[165,18]]]],[[],195],[[198,198],198],[[[198,[199]],198],[[198,[199]]]],[198,198],[[205,105],205],[[201,105],201],[[198,105],198],[[],[[37,[165,18]]]],[203,[[37,[165,18]]]],[202,[[37,[165,18]]]],[204,[[37,[165,18]]]],[205,[[37,[165,18]]]],[206,[[37,[165,18]]]],[207,[[37,[165,18]]]],[208,[[37,[165,18]]]],[209,[[37,[165,18]]]],[198,[[37,[165,18]]]],[210,[[37,[165,18]]]],[211,[[37,[165,18]]]],[200,[[37,[165,18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[16,[91]]]],[212,[[16,[91]]]],[213,[[16,[91]]]],[214,[[16,[91]]]],[215,[[16,[91]]]],[217,[[16,[91]]]],[218,[[16,[91]]]],[201,[[16,[91]]]],[220,[[16,[91]]]],[221,[[16,[91]]]],[[],[[16,[91]]]],[[212,212],[[16,[91]]]],[[213,213],[[16,[91]]]],[[214,214],[[16,[91]]]],[[216,216],[[16,[91]]]],[[217,217],[[16,[91]]]],[[218,218],[[16,[91]]]],[[201,201],[[16,[91]]]],[[220,220],[[16,[91]]]],[[221,221],[[16,[91]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],[[16,[212,91]]]],[15,[[16,[216,91]]]],[15,[[16,[205,91]]]],[[],[[16,[221,91]]]],[[198,[37,[165,18]]],[[16,[204,91]]]],[[],[[16,[213]]]],[[],[[16,[203]]]],[[],[[16,[214]]]],[[],[[16,[202]]]],[[],[[16,[201]]]],[[],[[16,[220]]]],[[],[[16,[200]]]],[[],[[16,[213]]]],[[],[[16,[203]]]],[[],[[16,[214]]]],[[],[[16,[202]]]],[[],[[16,[201]]]],[[],[[16,[220]]]],[[],[[16,[200]]]],[105,[[16,[20,91]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[105,257,[19,[41,18]]],[[16,[212,91]]]],[[105,257,[19,[41,18]],[9,[170]]],[[16,[213,91]]]],[[105,255,[239,[41]],[9,[238]]],[[16,[203,91]]]],[[105,170,[9,[170]]],[[16,[214,91]]]],[[105,238,[9,[238]]],[[16,[202,91]]]],[[105,198,[37,[165,18]]],[[16,[204,91]]]],[[105,[19,[41,18]],[9,[170]]],[[16,[216,91]]]],[[105,[239,[41]],[9,[238]]],[[16,[205,91]]]],[[105,[37,[165,18]],[9,[238]]],[[16,[206,91]]]],[[105,255,[37,[165,18]],[9,[238]]],[[16,[207,91]]]],[[105,[255,[132]],[37,[165,18]],[9,[238]]],[[16,[208,91]]]],[[105,15],[[16,[209,91]]]],[[105,[19,[18]],[9,[170]]],[[16,[201,91]]]],[[105,239,[9,[238]]],[[16,[198,91]]]],[[105,[19,[[37,[256,18]],18]],[9,[170]]],[[16,[219,91]]]],[[105,[19,[[37,[165,18]],18]],[9,[238]]],[[16,[210,91]]]],[[105,[239,[126]],[19,[[37,[165,18]],18]],[9,[[239,[132]]]]],[[16,[211,91]]]],[[105,257,[19,[41,18]],[9,[170]]],[[16,[220,91]]]],[[105,257,[19,[41,18]]],[[16,[221,91]]]],[[105,255,[239,[41]],[9,[238]]],[[16,[200,91]]]],[[105,198,[37,[165,18]]],[[16,[204,91]]]],[[105,255,[239,[41]],[9,[238]]],[[16,[200,91]]]],[[],[[16,[91]]]],[212,[[16,[91]]]],[[213,9],[[16,[91]]]],[[214,[9,[14]]],[[16,[91]]]],[[215,9],[[16,[91]]]],[[216,9],[[16,[91]]]],[[217,9],[[16,[91]]]],[[218,9],[[16,[91]]]],[[201,9],[[16,[91]]]],[[220,9],[[16,[91]]]],[221,[[16,[91]]]],[217,[[16,[91]]]],[218,[[16,[91]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[211,239],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],[[9,[238]]]],[[],[[9,[170]]]],[212,[[9,[170]]]],[213,[[9,[170]]]],[203,[[9,[238]]]],[203,[[9,[238]]]],[214,[[9,[170]]]],[202,[[9,[238]]]],[202,[[9,[238]]]],[215,[[9,[170]]]],[204,[[9,[238]]]],[204,[[9,[238]]]],[216,[[9,[170]]]],[205,[[9,[238]]]],[205,[[9,[238]]]],[217,[[9,[170]]]],[206,[[9,[238]]]],[206,[[9,[238]]]],[218,[[9,[170]]]],[207,[[9,[238]]]],[207,[[9,[238]]]],[208,[[9,[238]]]],[209,[[9,[238]]]],[201,[[9,[170]]]],[198,[[9,[238]]]],[198,[[9,[238]]]],[219,[[9,[170]]]],[210,[[9,[238]]]],[210,[[9,[238]]]],[211,[[9,[238]]]],[220,[[9,[170]]]],[221,[[9,[170]]]],[200,[[9,[238]]]],[200,[[9,[238]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[212,15]],[[203,15]],[[202,15],14],[[204,15],[[37,[245,18]]]],[[216,15]],[[205,15]],[[206,15],[[37,[165,18]]]],[[207,15],[[37,[165,18]]]],[[208,15],[[37,[165,18]]]],[[198,15]],[[219,15],9],[[211,15],[[37,[245,18]]]],[[220,15],5],[[221,15],5],[[200,15],5],[[212,15]],[[203,15]],[[202,15],14],[[216,15]],[[205,15]],[[206,15],[[37,[165,18]]]],[[207,15],[[37,[165,18]]]],[[208,15],[[37,[165,18]]]],[[198,15]],[[211,15],[[37,[245,18]]]],[[220,15],5],[[221,15],5],[[200,15],5],[[]],[212,19],[213,19],[203,239],[203],[214,170],[202,238],[215],[204,37],[216,19],[205,239],[217],[206,37],[218],[207,37],[201,19],[198,239],[219,19],[210],[220,19],[221,19],[200,239],[200],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[213,[[225,[212]]]],[203,[[225,[203]]]],[214,243],[202,243],[204,246],[205,[[247,[41]]]],[206,[[225,[206]]]],[207,[[225,[207]]]],[208,248],[201,249],[198,249],[210,250],[220,[[225,[221]]]],[200,[[225,[200]]]],[204,[[16,[252,91]]]],[216],[201],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[15,15],212],[[15,15],213],[[15,15],220],[[15,15],221],[15,212],[15,213],[15,214],[[15,15],216],[15,218],[15,201],[15,220],[15,221],[[15,105],201],[[[9,[238]]],[[37,[165,18]]]],[[203,[9,[238]]],[[37,[165,18]]]],[[203,[9,[238]]],203],[[202,[9,[238]]],202],[[202,[9,[238]]],[[37,[165,18]]]],[[204,[9,[238]]],204],[[204,[9,[238]]],[[37,[165,18]]]],[[205,[9,[238]]],205],[[205,[9,[238]]],[[37,[165,18]]]],[[206,[9,[238]]],[[37,[165,18]]]],[[206,[9,[238]]],206],[[207,[9,[238]]],[[37,[165,18]]]],[[207,[9,[238]]],207],[[208,[9,[238]]],[[37,[165,18]]]],[[208,[9,[238]]],208],[[209,[9,[238]]],[[37,[165,18]]]],[[198,[9,[238]]],198],[[198,[9,[238]]],[[37,[165,18]]]],[[210,[9,[238]]],[[37,[165,18]]]],[[210,[9,[238]]],210],[[211,[9,[238]]],[[37,[165,18]]]],[[200,[9,[238]]],[[37,[165,18]]]],[[200,[9,[238]]],200],[[202,238],202],[[198,239],198],[[198,198],198],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[198,198],198],[[198,198],198],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[226,[[47,[165]]]],[236,[[47,[165]]]],[227,[[47,[165]]]],[230,[[47,[165]]]],[233,[[47,[165]]]],[234,[[47,[165]]]],[232,[[47,[165]]]],[235,[[47,[165]]]],[231,[[47,[165]]]],[237,[[47,[165]]]],[229,[[47,[165]]]],[[],[[47,[165]]]],[[],[[37,[165,18]]]],[226,[[37,[165,18]]]],[236,[[37,[165,18]]]],[227,[[37,[165,18]]]],[230,[[37,[165,18]]]],[233,[[37,[165,18]]]],[234,[[37,[165,18]]]],[232,[[37,[165,18]]]],[235,[[37,[165,18]]]],[231,[[37,[165,18]]]],[237,[[37,[165,18]]]],[229,[[37,[165,18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,[[],233],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[15,15,15]],[[226,15,15,15]],[[236,15,15,15]],[[227,15,15,15]],[[230,15,15,15]],[[233,15,15,15]],[[234,15,15,15]],[[232,15,15,15]],[[235,15,15,15]],[[231,15,15,15]],[[237,15,15,15]],[[229,15,15,15]],0,0,0,0,0,0,0,0,0,[15],[[226,15]],[[236,15]],[[227,15]],[[230,15]],[[233,15]],[[234,15]],[[232,15]],[[235,15]],[[231,15]],[[237,15]],[[229,15]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],15],[226,15],[236,15],[227,15],[230,15],[233,15],[234,15],[232,15],[235,15],[231,15],[237,15],[229,15],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,15],[[37,[258,18]]]],[[[19,[203,18]],14,15],226],[[[19,[211,18]],15],236],[[[19,[202,18]],14,15],227],[[[19,[205,18]],14,15],230],[105,233],[[[19,[198,18]],14,15],234],[[[19,[207,18]],14,15],232],[[[19,[210,18]],14,15],235],[[[19,[206,18]],14,15],231],[[[19,[200,18]],14,15],237],[[14,15],229],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[165,165],[[16,[[37,[241,18]],91]]]],[[],12],[[100,100],12],[[114,114],12],0,0,0,[1],[1],[1],[[238,238],238],[238],[170],[170],[[]],[[]],[[]],[[238,238],238],[[170,238]],[[238,238],238],[[170,238],170],[[170,238]],[[238,238],238],[[170,238],170],[[170,238]],[[238,238],238],[[170,238],170],[[170,238]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[170,15],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],[[19,[41,18]]]],[238,259],[170],[238,238],[260,260],[170,170],[[]],[[]],[[]],[[],238],[[],170],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[15],[15],[15],0,[[238,238],14],[[170,170],14],[[170,15,14]],[[170,238]],[[170,15,15]],[170],[170],[[238,22],[[16,[23]]]],[[260,22],[[16,[23]]]],[[170,22],[[16,[23]]]],[[]],[170,238],[[],238],[[]],[[]],[[],170],[[],[[19,[41,18]]]],[[],238],[[],170],[15,170],[15,170],[[],238],[[],170],[[],238],[[],170],[15,238],[[[19,[41,18]],15],238],[[[19,[41,18]],15],170],[[238,15],[[9,[14]]]],[[170,15],14],[[238,15],14],[[238,15],14],0,[[],15],[[],15],[[],15],[[]],[[]],[[]],[238],[238],[[]],[170],[238,[[180,[238,170]]]],[238,14],[170,14],[238,243],[170,243],[238,15],[170,15],0,0,[[],9],[[],9],[[],9],[[]],[[]],[[]],[238,170],[[],238],[238,260],[[],170],[15,238],[260,9],[260,9],[238,238],[170,170],[[260,15],9],[238,15],[170,15],[[238,15,15],15],0,[[238,238],238],[[]],[[]],[[]],[[]],[[]],[[]],[170,[[9,[14]]]],[[170,14]],[[170,14]],[[238,238,238,238],238],[[170,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[170,15,14]],[[170,15,14]],[[170,15,14]],[170],[260],[[238,15,15],238],[[238,15,15],238],[[238,238,238],238],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],[[16,[238]]]],[[],[[16,[170]]]],[[],[[16,[238]]]],[[],[[16,[170]]]],[[],16],[[],16],[[],16],[[[19,[41,18]],15],[[16,[238,91]]]],[[[19,[41,18]],15],[[16,[170,91]]]],[[],49],[[],49],[[],49],[238,238],[170],[238,15],[170,15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],0,0,[[]],[[]],[[]],[15,170],[[]],[[]],[[]],[[]],[[]],[[]],[[238,238],238],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[37,[222,18]]]],[[],[[37,[222,18]]]],0,[15,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,[[16,[224]]]],[15,[[16,[224]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[],184],[[],184],[243,243],[261,261],[262,262],[244,244],[[]],[[]],[[]],[[]],0,[[15,15],15],0,0,[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],0,[[15,15,22],[[16,[23]]]],[[263,22],[[16,[23]]]],[[259,22],[[16,[23]]]],[[264,22],[[16,[23]]]],[[243,22],[[16,[23]]]],[[261,22],[[16,[23]]]],[[262,22],[[16,[23]]]],[[244,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,14],[15,14],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[25,18]]]],[[],[[19,[25,18]]]],[263,14],[[41,15],14],0,0,[263,15],[259,15],0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,263],[[15,15],259],[15,264],[[15,15],243],[238,261],[[],262],[9,244],[[[9,[238]]],[[244,[243]]]],[263,9],[259,9],[264,9],[243,9],[261,9],[262,9],[244,9],[243,[[9,[14]]]],[262,9],[244,9],[[],190],[[],190],[[],191],[[],191],[[],190],[[],190],[[],191],[[],191],[[243,15],9],[[262,15],9],[[244,15],9],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[263],[263],[259],[259],[264],0,0,0,[[],265],[[],15],[263,15],[259,15],[259,15],[264,15],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[41,15,14],41],[[15,14]],[[15,14]],[263],[259],[264],[243],[262],[244],[261,15],0,0,[[],195],[[],195],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[244,262],[244],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[[],9],[239,[[16,[91]]]],[[],[[16,[91]]]],[239],[[]],[[]],[[]],[[]],[[],9],[[],9],[239,239],[[]],0,[[],105],[[],105],[[],239],[239],[15],[15],[[]],[15],[[239,239],14],[[239,22],[[16,[23]]]],[[]],[[[19,[18]]],239],[[],239],[239,[[9,[19]]]],[[],15],[[]],[239],[[],[[19,[25,18]]]],[239,14],[239,15],0,[[],9],[[]],[[],239],[[]],[[]],[239,15],0,[[]],[[]],[[]],[[]],[239,15],[239,15],[[239,15,15],239],[[239,15,15],239],[[]],[[],16],[[],16],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],49],[[]],[[]],[[],9],[[]],[[]],[[]],0,[1],[196],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[196,196],[[]],[196],[196],[15],[15],[[]],[15],[[196,196],14],[[],14],[[],14],[196,[[16,[[196,[[37,[165,18]]]],91]]]],[[196,22],[[16,[23]]]],[[]],[[],15],[[]],[196,[[19,[18]]]],[196,14],[196,15],[[],9],[[]],[[[19,[18]]],196],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[[19,[18]]],[[16,[196,91]]]],[[],49],[[]],[[]],[[],9],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[105,14],[105,14],[105,14],[165,15],[165,[[16,[[37,[245,18]],91]]]],[203,9],[202,[[9,[14]]]],[[]],[[]],[198,9],[200,[[9,[5]]]],[165,[[16,[[37,[245,18]],91]]]],[203,9],[202,[[9,[14]]]],[[]],[[]],[198,9],[200,[[9,[5]]]],[[]],[[]],[[]],[165,[[16,[[37,[245,18]],91]]]],[198,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[165,165],[[37,[165,18]]]],[[]],[[165,245],[[37,[165,18]]]],0,[[105,105],14],[[105,105],14],[[105,105],14],[105,14],[[105,105],14],[[105,105],14],[[]],[[]],[[]],[[]],[[]],0,[[165,165],[[37,[165,18]]]],[[]],[[165,245],[[37,[165,18]]]],[[165,165],[[37,[165,18]]]],[[]],[[165,245],[[37,[165,18]]]],[165,[[37,[165,18]]]],[[]],[[]],[[]],[[165,165],[[37,[165,18]]]],[[]],[[]],[[]],[[]],[[165,165],[[37,[165,18]]]],[[]],[[165,245],[[37,[165,18]]]],0,[[]],[[]],[[]],0,[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[198,198],[[198,15],198],[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[198,198],[[198,198]],[198],[[198,198]],[198],[[198,198]],[198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[[198,198],198],[198,198],[198,198],[[198,198],198],[198,198],[[198,198],[[16,[[198,[199]],91]]]],[[198,198],[[16,[[198,[199]],91]]]],[[198,198],[[16,[[198,[199]],91]]]],[[198,198],[[16,[[198,[199]],91]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,266],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,266],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],[[198,[199]]]],[[198,198],198],[[198,266],198],[[198,198],[[16,[[198,[129]],91]]]],[[198,266],[[16,[[198,[129]],91]]]],[[198,266],198],[[198,266],[[16,[[198,[129]],91]]]],[[198,198],198],[[198,198],[[16,[[198,[129]],91]]]],[[198,198,105],198],[[198,198,105],198],[[198,198,105]],[[198,198,105],[[16,[198,91]]]],[[198,105],[[16,[198,91]]]],[[198,105],198],[[198,105],198],[[198,105]],[[198,198]],[198],[202,14],[[202,202],202],[[202,267],202],[202,14],[165,202],[165,202],[202,202],[[202,202],202],[[202,267],202],[202,14],[[202,202],202],[[202,267],202],[202,14],[[202,202],202],[[202,267],202],0,[1],[[]],[[203,105],[[16,[[203,[132]],91]]]],[203,[[16,[204,91]]]],[[203,105],[[203,[129]]]],[[203,105],[[16,[[200,[129]],91]]]],[[203,105],198],[[203,105],[[16,[200,91]]]],[202,203],[202,198],[202,200],[[]],[[]],[[105,105],14],[[165,105,268],[[16,[[37,[165,18]],91]]]],[[]],[[],9],[[],9],[268,268],[[]],[198,[[198,[129]]]],[198,[[198,[132]]]],[198,[[198,[269]]]],[[198,15,15],[[198,[199]]]],[198,198],[198,198],[[],268],[15],[15],[204,[[16,[204,91]]]],[[204,105],[[16,[204,91]]]],[204,[[37,[165,18]]]],[[]],[15],[198,[[198,[100]]]],[[198,15,15],[[198,[199]]]],[[268,22],[[16,[23]]]],[[]],[[],15],[[198,15,15],[[198,[199]]]],[[]],[[],9],[[]],[198,[[198,[269]]]],[[198,270],200],[[]],[[]],0,[[203,105],198],[[200,105],198],[[198,105],198],[198,203],[[198,105],202],[198,[[16,[204,91]]]],[[198,105],198],[[198,105],198],[198,200],[[]],[[]],[[198,270,270],[[198,[129]]]],[198,[[198,[132]]]],[198,[[198,[132]]]],[[198,270,270],[[198,[132]]]],[198,[[198,[129]]]],[198,[[198,[129]]]],[[198,270],[[198,[132]]]],[[198,270],[[198,[129]]]],[[198,270,270,9],[[198,[129]]]],[[198,270,5],[[16,[200,91]]]],[[]],[[],16],[[],16],[[],49],[[]],[[]],[[],9],[200,[[16,[[200,[132]],91]]]],[[200,105],203],[200,[[198,[132]]]],[200,[[198,[129]]]],[200,[[16,[204,91]]]],[200,[[200,[129]]]],[200,[[198,[129]]]],[[200,105],198],[[200,25],[[16,[[198,[129]],91]]]],[[]],0,[[]],[[]],[204,[[16,[204,91]]]],[[204,105],[[16,[204,91]]]],0,0,0,0,0,0,0,[105,14],[105,14],[105,14],[105,14],[105,14],[105,14],[105,14],[105,14],[105,14],[105,14],[105,14],[105,14],[[165,165],202],[[],41],[[165,165],202],[[165,245],202],[[165,245],202],[[202,[9,[238]],[9,[238]]],202],[[202,[9,[238]],[9,[238]]],202],[[]],[[]],[[165,165],202],[[],41],[[165,165],202],[[],41],[[165,245],202],[[165,245],202],[[165,165],202],[[],41],[[165,165],202],[[],41],[[165,245],202],[[165,245],202],[[165,165],202],[[],41],[[165,165],202],[[165,245],202],[[165,245],202],0,0,[[203,203],202],[[203,203],202],[203,202],[203,202],[[203,203],202],[[203,203],202],[203,202],[203,202],[[203,203],202],[[203,203],202],[203,202],[203,202],[[203,203],202],[[203,203],202],[203,202],[203,202],[[202,14],202],[[202,202],202],[[202,202],202],[[202,14],202],[[202,14],202],[[202,202],202],[[202,202],202],[[202,14],202],[[202,14],202],[[202,202],202],[[202,202],202],[[202,14],202],[[202,14],202],[[202,202],202],[[202,202],202],[[202,14],202],[[202,14],202],[198,202],[[198,198],202],[[198,198],202],[198,202],[198,202],[[198,198],202],[[198,198],202],[198,202],[198,202],[[198,198],202],[[198,198],202],[198,202],[198,202],[[198,198],202],[[198,198],202],[198,202],[198,202],[[200,200],202],[[200,200],202],[[200,5],202],[[200,5],202],[[200,200],202],[[200,200],202],[[200,5],202],[[200,5],202],[[200,200],202],[[200,200],202],[[200,5],202],[[200,5],202],[[200,200],202],[[200,200],202],[[200,5],202],[[200,5],202],[[],[[16,[[37,[165,18]],91]]]],0,[202,[[16,[[37,[241,18]],91]]]],[[165,202],[[16,[[37,[165,18]],91]]]],[[196,202],[[16,[[196,[[37,[165,18]]]],91]]]],[[202,165,165],[[16,[[37,[165,18]],91]]]],[105,14],[[165,198],[[16,[[37,[165,18]],91]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[271,271],[20,20],[272,272],[273,273],[274,274],[105,105],[275,275],[270,270],[276,276],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,105],0,[[],274],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[271,271],14],[[20,20],14],[[272,272],14],[[273,273],14],[[274,274],14],[[105,105],14],[[275,275],14],[[270,270],14],[[276,276],14],[[272,271],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[274,274],[[271,22],[[16,[23]]]],[[20,22],[[16,[23]]]],[[272,22],[[16,[23]]]],[[273,22],[[16,[23]]]],[[274,22],[[16,[23]]]],[[105,22],[[16,[23]]]],[[275,22],[[16,[23]]]],[[270,22],[[16,[23]]]],[[276,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[[19,[20,18]]],274],[[]],[271,105],[273,105],[[]],[[]],[[]],[277,9],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[271],[20],[272],[273],[105],[275],[270],[276],[[274,5],[[9,[15]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[275,14],0,[275,14],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[105,14],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,275],[105,105],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[105,272],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[20,[277,[25,25,18]]],20],[[274,[277,[25,25,18]]],274],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],[15],[15],[[]],[15],[[91,22],[[16,[23]]]],[[91,22],[[16,[23]]]],[278,91],[279,91],[280,91],[158,91],[281,91],[282,91],[[]],[283,91],[[[0,[48,62,284]]],91],[[],15],[[]],[[],9],[[]],[[]],[[]],[38],[[]],[[]],[[],25],[[],16],[[],16],[[],49],[[]],[[]],[[],9],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[15],[15],[15],[15],[15],[15],[15],[15],0,0,[[]],[[]],[[]],[[]],[15],[15],[285],[286],[15],[287],[15],[[],285],[[],286],[[],287],[[[37,[165,18]]],286],[20,285],[[[37,[34,18]],20],287],[288,20],0,0,[[285,22],[[16,[23]]]],[[286,22],[[16,[23]]]],[[287,22],[[16,[23]]]],0,[[]],[[]],[[]],[[]],0,0,0,[[286,105],[[16,[[37,[165,18]],91]]]],[285,[[16,[20,91]]]],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],0,0,[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[288,[[9,[[16,[[37,[165,18]],91]]]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[37,[287,18]]],[[16,[288,91]]]],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],198],0,0,0,0,[1],[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[289,289],[290,290],[[]],[[]],[[],289],[15],[15],[15],[15],0,[[]],[[]],[15],[15],[[289,289],14],[[290,290],14],0,0,[[289,22],[[16,[23]]]],[[290,22],[[16,[23]]]],[[]],[[]],[[],15],[[],15],[[]],[[]],0,[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[]],[[]],[[]],[[]],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[291,291],[292,292],[[]],[[]],0,0,0,[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[16,[91]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],0,[[279,22],[[16,[23]]]],[[291,22],[[16,[23]]]],[[292,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[293],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[293],[[]],[[]],0,0,[294,14],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[293,291],[294,292],0,0,[[291,[9,[[19,[15,18]]]],[9,[15]]],293],[[292,[9,[[19,[15,18]]]]],294],[293,9],[294,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[185,291,9,[9,[15]],15,19,19],[[16,[[196,[[37,[165,18]]]],91]]]],[[291,19],[[16,[[185,[129,[37,[165,18]],186]],91]]]],[[],[[16,[291,91]]]],[[],[[16,[292,91]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[293,274],[294,274],0,0,0,[293],0,[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[295,[[196,[[37,[165,18]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[296,296],[297,297],[298,298],[[]],[[]],[[]],[298,196],0,0,[[],297],[[],[[19,[289,18]]]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],0,0,0,[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],0,[[296,296],14],[[297,297],14],[[298,298],14],[[],14],[[],14],[[],14],[[],14],[298,9],0,[299,[[16,[91]]]],[300,[[16,[91]]]],0,[[296,22],[[16,[23]]]],[[297,22],[[16,[23]]]],[[298,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[],298],[[[196,[[37,[165,18]]]]],298],[[]],[[],298],[[],29],[[],29],[300,301],[296],[297],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[299],[300],0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[297,299],[[274,[9,[[19,[289,18]]]],297],300],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[274,[[19,[41,18]]]],[[300,301]],[[299,274,[9,[[19,[289,18]]]]],[[16,[91]]]],[300,[[16,[91]]]],0,[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[291,297],[[16,[300,91]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[274,[9,[[19,[289,18]]]],297],[[16,[300,91]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[165,19,19,19,129,14,[9,[296]]]],[[299,196,9],[[16,[91]]]],[[300,196,9],[[16,[91]]]],0,0,0,[[],25],[[291,47],[[16,[[185,[129,[37,[165,18]],186]],91]]]],[[291,185,47,15],[[16,[[196,[[37,[165,18]]]],91]]]],0,0,0,0,[1],[1],[257],[255],[[]],[[]],[[]],[[]],[[]],[[]],[255,239],[257,15],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[257,257],[255,255],[[]],[[]],[[],257],[[],255],[15],[15],[15],[15],[[]],[[]],[15],[15],[[257,257],14],[[255,255],14],[[],14],[[],14],[[257,15]],[[257,22],[[16,[23]]]],[[255,22],[[16,[23]]]],[[[257,[132]]],[[257,[129]]]],[[]],[257,255],[255,[[255,[129]]]],[[]],[255,[[9,[257]]]],[[],15],[[],15],[[]],[[]],[257,[[19,[18]]]],[255,239],[257],[255],[257,15],[255,15],[257,15],[255,34],[[],9],[[],9],[[]],[[]],[[],257],[[],255],[[[19,[18]]],257],[239,255],[15,257],[[]],[[]],[[]],[[]],[257,9],[[257,15]],[[]],[[]],[[]],[[]],[257],[[255,15,15],255],[[257,15]],[[255,15]],[[257,15]],[[255,15]],[[]],[[]],[257,[[16,[91]]]],[[257,257],[[16,[91]]]],[[257,255,15,15],[[16,[91]]]],[[[19,[18]]],[[16,[257]]]],[[],16],[[[257,[129]]],[[16,[[257,[132]]]]]],[[],16],[[[19,[18]]],[[16,[255]]]],[255,[[16,[[255,[132]]]]]],[239,[[16,[255]]]],[[],[[16,[257,91]]]],[[],[[16,[257,91]]]],[[],16],[[],16],[257,[[16,[91]]]],[[257,15],[[16,[91]]]],[[],49],[[],49],[[]],[[]],[[]],[[]],[[],9],[[],9],[[]],[[]],[15,257],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],163],[302,163],[266,163],[303,163],[304,163],[267,163],[305,163],[306,163],[307,163],[308,163],[309,163],[310,163],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[302,302],[266,266],[303,303],[304,304],[267,267],[305,305],[306,306],[307,307],[308,308],[309,309],[310,310],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],105],[302,105],[266,105],[303,105],[304,105],[267,105],[305,105],[306,105],[307,105],[308,105],[309,105],[310,105],0,0,0,0,0,0,0,[[],306],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[245,245],14],[[302,302],14],[[266,266],14],[[303,303],14],[[304,304],14],[[267,267],14],[[305,305],14],[[306,306],14],[[307,307],14],[[308,308],14],[[309,309],14],[[310,310],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[302,22],[[16,[23]]]],[[266,22],[[16,[23]]]],[[303,22],[[16,[23]]]],[[304,22],[[16,[23]]]],[[267,22],[[16,[23]]]],[[305,22],[[16,[23]]]],[[306,22],[[16,[23]]]],[[307,22],[[16,[23]]]],[[308,22],[[16,[23]]]],[[309,22],[[16,[23]]]],[[310,22],[[16,[23]]]],[[]],[9,266],[[]],[9,303],[[]],[9,304],[[]],[[]],[[[9,[14]]],267],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[302,14],[266,14],[303,14],[304,14],[267,14],[305,14],[306,14],[307,14],[308,14],[309,14],[310,14],0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[105,[9,[[37,[245,18]]]]],302],[[105,9],266],[9,303],[9,304],[[[9,[14]]],267],[[105,[9,[[37,[165,18]]]]],305],[[],306],[[105,[9,[[19,[[37,[245,18]],18]]]]],307],[[105,[9,[[37,[165,18]]]]],308],[[105,9],309],[[105,126,[37,[245,18]]],310],[[165,15],[[37,[245,18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[266,105],266],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[310,126],0,[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[302,[[9,[37]]]],[266,9],[303,[[9,[5]]]],[304,9],[267,[[9,[14]]]],[309,9],[310,37],0,0,0,0,0,0,0,[305,37],[307],[308,[[9,[37]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[129,270,269],129],[[129,270,269],129],[132,311],[132,312],[129,311],[129,312],[5,[[16,[313,91]]]],[132,314],[132,314],[129,314],[129,314],[129,312],[129,312],[129,312],[[129,270],315],[[129,270],312],[129,312],[[270,270],114],[[200,5],[[198,[129]]]],[[5,5],[[9,[129]]]],[[200,5,25],[[16,[[198,[129]],91]]]],[[5,5],[[9,[129]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],184],[316,316],[269,269],[317,317],[318,318],[[]],[[]],[[]],[[]],[316,132],[269,132],0,[[],316],[[],269],[[],317],[[],318],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],0,[[316,316],14],[[269,269],14],[[317,317],14],[[318,318],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[316,22],[[16,[23]]]],[[316,22],[[16,[23]]]],[[269,22],[[16,[23]]]],[[269,22],[[16,[23]]]],[[317,22],[[16,[23]]]],[[317,22],[[16,[23]]]],[[318,22],[[16,[23]]]],[[318,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[[]],[[],316],[[],269],[[],317],[[],318],[131,317],[100,317],[[]],[[],316],[[],269],[[],317],[[],318],[[]],[15,9],[[199,199],318],[[],29],[[],29],[[],29],[316],[269],[318],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[25,18]]]],[[],14],[[],14],[[],14],[[],14],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[316,132],[269,132],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[316],[269],[318],[15,265],[[],319],[[],320],[[132,132],316],[[132,132,129],269],[265,9],[319,9],[320,9],[[],190],[[],191],[[],190],[[],191],[269,129],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[318,318],[[9,[12]]]],[[15,15],[[9,[320]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[265],[319],[320],0,[[],195],[[]],[316],[269],[317],[318],[317,131],[317,100],[[]],[316],[269],[317],[318],[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[321,321]],[[322,322]],[[323,323]],[[324,324]],[[325,325]],[[326,326]],[[327,327]],[[328,328]],[[329,329]],[[330,330]],[[331,331]],[[321,321]],[[322,322]],[[323,323]],[[324,324]],[[325,325]],[[326,326]],[[327,327]],[[328,328]],[[329,329]],[[330,330]],[[331,331]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[321,321],[322,322],[323,323],[324,324],[325,325],[326,326],[327,327],[328,328],[329,329],[330,330],[332,332],[333,333],[334,334],[331,331],[335,335],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],321],[[],322],[[],323],[[],324],[[],325],[[],326],[[],327],[[],328],[[],329],[[],330],[[],332],[[],333],[[],334],[[],331],[[],335],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],321],[[],322],[[],323],[[],324],[[],325],[[],326],[[],327],[[],328],[[],329],[[],330],[[],332],[[],333],[[],334],[[],331],[[],335],[[]],[41,321],[131,322],[127,323],[29,324],[126,325],[130,326],[132,327],[129,328],[100,329],[114,330],[317,332],[316,333],[269,334],[199,331],[318,335],0,0,0,0,0,0,[[321,15]],[[322,15]],[[323,15]],[[324,15]],[[325,15]],[[326,15]],[[327,15]],[[328,15]],[[329,15]],[[330,15]],[[332,15]],[[333,15]],[[334,15]],[[331,15]],[[335,15]],[[321,15]],[[322,15]],[[323,15]],[[324,15]],[[325,15]],[[326,15]],[[327,15]],[[328,15]],[[329,15]],[[330,15]],[[332,15]],[[333,15]],[[334,15]],[[331,15]],[[335,15]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[321,41],[322,131],[323,127],[324,29],[325,126],[326,130],[327,132],[328,129],[329,100],[330,114],[331,199],[[321,321],321],[[322,322],322],[[323,323],323],[[324,324],324],[[325,325],325],[[326,326],326],[[327,327],327],[[328,328],328],[[329,329],329],[[330,330],330],[[331,331],331],[321,41],[322,131],[323,127],[324,29],[325,126],[326,130],[327,132],[328,129],[329,100],[330,114],[331,199],[[321,321],321],[[322,322],322],[[323,323],323],[[324,324],324],[[325,325],325],[[326,326],326],[[327,327],327],[[328,328],328],[[329,329],329],[[330,330],330],[[331,331],331],0,[[],321],[[],322],[[],323],[[],324],[[],325],[[],326],[[],327],[[],328],[[],329],[[],330],[[],331],[[],321],[[],322],[[],323],[[],324],[[],325],[[],326],[[],327],[[],328],[[],329],[[],330],[[],331],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[321,29,321],321],[[322,127,322],322],[[323,131,323],323],[[324,41,324],324],[[325,29,325],325],[[326,127,326],326],[[327,131,327],327],[[328,41,328],328],[[329,131,329],329],[[330,41,330],330],[[332,127,332],332],[[333,41,333],333],[[334,41,334],334],[[331,41,331],331],[[335,41,335],335],[321,41],[322,131],[323,127],[324,29],[325,126],[326,130],[327,132],[328,129],[329,100],[330,114],[331,199],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[41,18]]]],[19],[[],25],0,0,0,0,0,0,0,0,0,0,[165,[[16,[34,91]]]],[165,[[16,[34,91]]]],[[],9],[[],[[16,[91]]]],[[],[[16,[91]]]],0,0,0,0,0,0,0,0,[[[9,[199]]],[[9,[199]]]],[[[9,[5]]],[[9,[25]]]],[9,[[9,[[19,[41,18]]]]]],[9,[[9,[[19,[41,18]]]]]],[[[9,[[37,[165,18]]]]],9],[[[9,[[37,[165,18]]]]],9],0,[199,[[16,[91]]]],[25,[[16,[91]]]],[19,[[16,[91]]]],[19,[[16,[91]]]],[[],[[16,[91]]]],[[],[[16,[91]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[[],105],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],[[16,[91]]]],[[],[[16,[91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[]],[[],[[16,[91]]]],[[],[[16,[91]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[112,112],[108,108],[336,336],[337,337],[338,338],[339,339],[340,340],[341,341],[342,342],[343,343],[[344,344,100],14],[[345,345,100],14],[[111,111,100],14],[[112,112,100],14],[[108,108,100],14],[[346,346,100],14],[[347,347,100],14],[[348,348,100],14],[[113,113,100],14],[[336,336,100],14],[[337,337,100],14],[[349,349,114],14],[[350,350,114],14],[[351,351,114],14],[[352,352,114],14],[[353,353,114],14],[[354,354,114],14],[[338,338,114],14],[[339,339,114],14],[[340,340,114],14],[[111,111]],[[112,112],112],[[112,100],112],[[108,108],108],[[108,100],108],[[346,346]],[[347,347]],[[348,348]],[[113,113],113],[[336,100],336],[[336,336],336],[[337,337],337],[[337,100],337],[[351,351]],[[352,352]],[[353,353]],[[354,354],354],[[338,114],338],[[338,338],338],[[339,114],339],[[339,339],339],[[340,340],340],[[340,114],340],[[341,341],341],[[341,132],341],[[342,342],342],[[342,132],342],[[343,343],343],[[343,132],343],[[355,127],355],[[355,355],355],[[356,356],356],[[356,127],356],[[357,357],357],[[357,127],357],[[111,111]],[[112,112]],[[112,100]],[[108,100]],[[108,108]],[[346,346]],[[347,347]],[[348,348]],[[336,336]],[[336,100]],[[337,100]],[[337,337]],[[351,351]],[[352,352]],[[353,353]],[[338,114]],[[338,338]],[[339,339]],[[339,114]],[[340,114]],[[340,340]],[[341,341]],[[341,132]],[[342,132]],[[342,342]],[[343,343]],[[343,132]],[[355,127]],[[355,355]],[[356,127]],[[356,356]],[[357,357]],[[357,127]],[[346,346],346],[[351,351],351],[[111,111],111],[[347,347],347],[[352,352],352],[[348,348],348],[[353,353],353],[358,14],[359,14],[360,14],[361,14],[362,14],[112,100],[[112,112],100],[[108,108],100],[[113,113],100],[[336,336],100],[[354,354],114],[[338,338],114],[[339,339],114],[358,14],[359,14],[360,14],[361,14],[362,14],[108,108],[336,336],[339,339],[108],[336],[339],[108,108],[336,336],[339,339],[346,351],[111,352],[347,352],[348,353],[112,338],[341,338],[355,338],[108,339],[336,339],[342,339],[356,339],[337,340],[343,340],[357,340],[354,113],[113,354],[112,341],[338,341],[355,341],[108,342],[336,342],[339,342],[356,342],[337,343],[340,343],[357,343],[351,346],[352,111],[353,348],[111],[112],[108],[346],[348],[336],[337],[351],[352],[353],[338],[339],[340],[341],[342],[343],[355],[356],[357],[111],[112],[108],[346],[348],[113],[336],[337],[351],[352],[353],[354],[338],[339],[340],[341],[342],[343],[355],[356],[357],[112,355],[338,355],[341,355],[108,356],[336,356],[339,356],[342,356],[337,357],[340,357],[343,357],[338,112],[341,112],[355,112],[339,108],[342,108],[356,108],[339,336],[342,336],[356,336],[340,337],[343,337],[357,337],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],108],[[358,358],358],[[359,359],359],[[360,360],360],[[361,361],361],[[362,362],362],[[341,341]],[[341,132]],[[342,132]],[[342,342]],[[343,132]],[[343,343]],[[355,127]],[[355,355]],[[356,356]],[[356,127]],[[357,357]],[[357,127]],[[358,358]],[[359,359]],[[360,360]],[[361,361]],[[362,362]],[358,127],[359,127],[360,127],[361,127],[362,127],[[358,358],358],[[359,359],359],[[360,360],360],[[361,361],361],[[362,362],362],[[341,132]],[[341,341]],[[342,132]],[[342,342]],[[343,343]],[[343,132]],[[355,127]],[[355,355]],[[356,356]],[[356,127]],[[357,357]],[[357,127]],[[358,358]],[[359,359]],[[360,360]],[[361,361]],[[362,362]],[[358,358],358],[[359,359],359],[[360,360],360],[[361,361],361],[[362,362],362],[[341,341]],[[341,132]],[[342,132]],[[342,342]],[[343,132]],[[343,343]],[[355,355]],[[355,127]],[[356,356]],[[356,127]],[[357,357]],[[357,127]],[[358,358]],[[359,359]],[[360,360]],[[361,361]],[[362,362]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[112,112],[108,108],[336,336],[337,337],[338,338],[339,339],[340,340],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[112,112,112],112],[[108,108,108],108],[[336,336,336],336],[[337,337,337],337],[[338,338,338],338],[[339,339,339],339],[[340,340,340],340],[[341,341,341],341],[[342,342,342],342],[[343,343,343],343],[[355,355,355],355],[[356,356,356],356],[[357,357,357],357],[[112,100,100],112],[[108,100,100],108],[[336,100,100],336],[[337,100,100],337],[[338,114,114],338],[[339,114,114],339],[[340,114,114],340],[[112,100],112],[[108,100],108],[[336,100],336],[[337,100],337],[[338,114],338],[[339,114],339],[[340,114],340],[[112,100],112],[[108,100],108],[[336,100],336],[[337,100],337],[[338,114],338],[[339,114],339],[[340,114],340],[363,363],[358,358],[359,359],[360,360],[361,361],[362,362],[344,344],[345,345],[111,111],[112,112],[108,108],[346,346],[347,347],[348,348],[113,113],[336,336],[337,337],[349,349],[350,350],[351,351],[352,352],[353,353],[354,354],[338,338],[339,339],[340,340],[341,341],[342,342],[343,343],[355,355],[356,356],[357,357],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[112,112],358],[[108,108],359],[[336,336],361],[[337,337],362],[[338,338],358],[[339,339],359],[[340,340],360],[[341,341],358],[[342,342],359],[[343,343],360],[[355,355],358],[[356,356],359],[[357,357],360],[[112,112],358],[[108,108],359],[[336,336],361],[[337,337],362],[[338,338],358],[[339,339],359],[[340,340],360],[[341,341],358],[[342,342],359],[[343,343],360],[[355,355],358],[[356,356],359],[[357,357],360],[[112,112],358],[[108,108],359],[[336,336],361],[[337,337],362],[[338,338],358],[[339,339],359],[[340,340],360],[[341,341],358],[[342,342],359],[[343,343],360],[[355,355],358],[[356,356],359],[[357,357],360],[[112,112],358],[[108,108],359],[[336,336],361],[[337,337],362],[[338,338],358],[[339,339],359],[[340,340],360],[[341,341],358],[[342,342],359],[[343,343],360],[[355,355],358],[[356,356],359],[[357,357],360],[[112,112],358],[[108,108],359],[[336,336],361],[[337,337],362],[[338,338],358],[[339,339],359],[[340,340],360],[[341,341],358],[[342,342],359],[[343,343],360],[[355,355],358],[[356,356],359],[[357,357],360],[[112,112],358],[[108,108],359],[[336,336],361],[[337,337],362],[[338,338],358],[[339,339],359],[[340,340],360],[[341,341],358],[[342,342],359],[[343,343],360],[[355,355],358],[[356,356],359],[[357,357],360],[[111,15],108],[[346,15],112],[[347,15],336],[[348,15],337],[[351,15],338],[[352,15],339],[[353,15],340],[[111,15],108],[[346,15],112],[[347,15],336],[[348,15],337],[[351,15],338],[[352,15],339],[[353,15],340],[113,113],[354,354],[[108,108],108],[[336,336],336],[[339,339],339],[[342,342],342],[[356,356],356],[[],363],[[],358],[[],359],[[],360],[[],361],[[],362],[[],344],[[],345],[[],111],[[],112],[[],108],[[],346],[[],347],[[],348],[[],113],[[],336],[[],337],[[],349],[[],350],[[],351],[[],352],[[],353],[[],354],[[],338],[[],339],[[],340],[[],341],[[],342],[[],343],[[],355],[[],356],[[],357],[15],[15],[15],[15],[15],[15],[344],[15],[345],[15],[15],[15],[15],[346],[15],[15],[15],[113],[15],[336],[15],[337],[15],[349],[15],[15],[350],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[344],[15],[345],[15],[15],[15],[15],[346],[15],[15],[15],[15],[113],[15],[336],[15],[337],[15],[349],[15],[350],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[16,[363]]]],[[],[[16,[358]]]],[[],[[16,[359]]]],[[],[[16,[360]]]],[[],[[16,[361]]]],[[],[[16,[362]]]],[[],[[16,[344]]]],[[],[[16,[345]]]],[[],[[16,[111]]]],[[],[[16,[112]]]],[[],[[16,[108]]]],[[],[[16,[346]]]],[[],[[16,[347]]]],[[],[[16,[348]]]],[[],[[16,[113]]]],[[],[[16,[336]]]],[[],[[16,[337]]]],[[],[[16,[349]]]],[[],[[16,[350]]]],[[],[[16,[351]]]],[[],[[16,[352]]]],[[],[[16,[353]]]],[[],[[16,[354]]]],[[],[[16,[338]]]],[[],[[16,[339]]]],[[],[[16,[340]]]],[[],[[16,[341]]]],[[],[[16,[342]]]],[[],[[16,[343]]]],[[],[[16,[355]]]],[[],[[16,[356]]]],[[],[[16,[357]]]],[111,100],[346,100],[347,100],[348,100],[351,114],[352,114],[353,114],[[112,112],100],[[108,108],100],[[336,336],100],[[337,337],100],[[338,338],114],[[339,339],114],[[340,340],114],[[112,112],100],[[108,108],100],[[336,336],100],[[337,337],100],[[338,338],114],[[339,339],114],[[340,340],114],[[112,100],112],[[112,112],112],[[108,100],108],[[108,108],108],[[113,100],113],[[336,100],336],[[336,336],336],[[337,337],337],[[337,100],337],[[354,114],354],[[338,338],338],[[338,114],338],[[339,114],339],[[339,339],339],[[340,114],340],[[340,340],340],[[341,132],341],[[341,341],341],[[342,342],342],[[342,132],342],[[343,132],343],[[343,343],343],[[355,355],355],[[355,127],355],[[356,356],356],[[356,127],356],[[357,357],357],[[357,127],357],[[112,112]],[[112,100]],[[108,108]],[[108,100]],[[336,100]],[[336,336]],[[337,337]],[[337,100]],[[338,338]],[[338,114]],[[339,339]],[[339,114]],[[340,340]],[[340,114]],[[341,341]],[[341,132]],[[342,342]],[[342,132]],[[343,132]],[[343,343]],[[355,355]],[[355,127]],[[356,127]],[[356,356]],[[357,127]],[[357,357]],[[338,338],351],[[339,339,339],352],[[340,340,340,340],353],[[112,112],100],[[108,108],100],[[113,113],100],[[336,336],100],[[337,337],100],[[354,354],114],[[338,338],114],[[339,339],114],[[340,340],114],[[341,341],132],[[342,342],132],[[343,343],132],[[355,355],127],[[356,356],127],[[357,357],127],[[112,112],112],[[108,108],108],[[336,336],336],[[337,337],337],[[338,338],338],[[339,339],339],[[340,340],340],[[341,341],341],[[342,342],342],[[343,343],343],[[355,355],355],[[356,356],356],[[357,357],357],[[],108],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[114,114,114,114],354],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[114,114],338],[[114,114,114],339],[[114,114,114,114],340],[[363,363],14],[[358,358],14],[[359,359],14],[[360,360],14],[[361,361],14],[[362,362],14],[[344,344],14],[[345,345],14],[[111,111],14],[[112,112],14],[[108,108],14],[[346,346],14],[[347,347],14],[[348,348],14],[[113,113],14],[[336,336],14],[[337,337],14],[[349,349],14],[[350,350],14],[[351,351],14],[[352,352],14],[[353,353],14],[[354,354],14],[[338,338],14],[[339,339],14],[[340,340],14],[[341,341],14],[[342,342],14],[[343,343],14],[[355,355],14],[[356,356],14],[[357,357],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[112,112],[108,108],[336,336],[337,337],[338,338],[339,339],[340,340],[[112,100],108],[[108,100],337],[[336,100],337],[[338,114],339],[[339,114],340],[[341,132],342],[[342,132],343],[[355,127],356],[[356,127],357],0,0,[112,112],[108,108],[336,336],[337,337],[338,338],[339,339],[340,340],[[363,22],[[16,[23]]]],[[358,22],[[16,[23]]]],[[358,22],[[16,[23]]]],[[359,22],[[16,[23]]]],[[359,22],[[16,[23]]]],[[360,22],[[16,[23]]]],[[360,22],[[16,[23]]]],[[361,22],[[16,[23]]]],[[361,22],[[16,[23]]]],[[362,22],[[16,[23]]]],[[362,22],[[16,[23]]]],[[344,22],[[16,[23]]]],[[344,22],[[16,[23]]]],[[345,22],[[16,[23]]]],[[345,22],[[16,[23]]]],[[111,22],[[16,[23]]]],[[111,22],[[16,[23]]]],[[112,22],[[16,[23]]]],[[112,22],[[16,[23]]]],[[108,22],[[16,[23]]]],[[108,22],[[16,[23]]]],[[346,22],[[16,[23]]]],[[346,22],[[16,[23]]]],[[347,22],[[16,[23]]]],[[347,22],[[16,[23]]]],[[348,22],[[16,[23]]]],[[348,22],[[16,[23]]]],[[113,22],[[16,[23]]]],[[113,22],[[16,[23]]]],[[336,22],[[16,[23]]]],[[336,22],[[16,[23]]]],[[337,22],[[16,[23]]]],[[337,22],[[16,[23]]]],[[349,22],[[16,[23]]]],[[349,22],[[16,[23]]]],[[350,22],[[16,[23]]]],[[350,22],[[16,[23]]]],[[351,22],[[16,[23]]]],[[351,22],[[16,[23]]]],[[352,22],[[16,[23]]]],[[352,22],[[16,[23]]]],[[353,22],[[16,[23]]]],[[353,22],[[16,[23]]]],[[354,22],[[16,[23]]]],[[354,22],[[16,[23]]]],[[338,22],[[16,[23]]]],[[338,22],[[16,[23]]]],[[339,22],[[16,[23]]]],[[339,22],[[16,[23]]]],[[340,22],[[16,[23]]]],[[340,22],[[16,[23]]]],[[341,22],[[16,[23]]]],[[341,22],[[16,[23]]]],[[342,22],[[16,[23]]]],[[342,22],[[16,[23]]]],[[343,22],[[16,[23]]]],[[343,22],[[16,[23]]]],[[355,22],[[16,[23]]]],[[355,22],[[16,[23]]]],[[356,22],[[16,[23]]]],[[356,22],[[16,[23]]]],[[357,22],[[16,[23]]]],[[357,22],[[16,[23]]]],[[],108],[112,112],[112,112],[108,108],[108,108],[336,336],[337,337],[337,337],[338,338],[339,339],[340,340],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[101,345],[[]],[364,345],[[[365,[100]]],111],[347,111],[344,111],[[]],[[[366,[100]]],111],[97,111],[73,112],[[],112],[[[367,[100]]],112],[[[368,[100]]],112],[[]],[[],112],[88,112],[[[369,[100]]],108],[[],108],[92,108],[74,108],[89,108],[79,108],[[]],[[],108],[[],108],[[[370,[100]]],108],[336,108],[[]],[[[371,[100]]],346],[[[372,[100]]],346],[[[365,[100]]],347],[[]],[344,347],[111,347],[[[366,[100]]],347],[345,348],[101,348],[[[373,[100]]],348],[[]],[[[374,[100]]],348],[364,348],[[[375,[100]]],113],[[]],[99,113],[[],336],[376,336],[[[370,[100]]],336],[[[369,[100]]],336],[108,336],[[]],[[],336],[[],336],[337,336],[376,337],[[]],[377,337],[[],337],[[],337],[[],337],[[],337],[[],337],[[],337],[[[378,[100]]],337],[[],337],[[],337],[113,337],[[]],[[]],[[]],[[[372,[114]]],351],[[[371,[114]]],351],[349,352],[[]],[[[365,[114]]],352],[[[366,[114]]],352],[[[374,[114]]],353],[350,353],[[[373,[114]]],353],[[]],[[]],[[[375,[114]]],354],[[],338],[[]],[[[367,[114]]],338],[[[368,[114]]],338],[[],338],[[[370,[114]]],339],[[]],[[],339],[[],339],[[[369,[114]]],339],[[],339],[[],340],[354,340],[[],340],[[],340],[[]],[[],340],[[],340],[[],340],[[[378,[114]]],340],[[]],[[[368,[132]]],341],[[],341],[[[367,[132]]],341],[[],341],[[],342],[[],342],[[[370,[132]]],342],[[]],[[[369,[132]]],342],[[],342],[[],343],[[],343],[[],343],[[[378,[132]]],343],[[],343],[[],343],[[],343],[[]],[[]],[[],355],[[[367,[127]]],355],[[],355],[[[368,[127]]],355],[[],356],[[[369,[127]]],356],[[],356],[[[370,[127]]],356],[[],356],[[]],[[[378,[127]]],357],[[]],[[],357],[[],357],[[],357],[[],357],[[],357],[[],357],[345,113],[350,354],[100,344],[100,111],[100,112],[100,112],[100,346],[100,347],[114,349],[114,351],[114,352],[114,338],[[100,112],344],[[114,338],349],[[],112],[[],108],[[],113],[[],336],[[],337],[[],354],[[],338],[[],339],[[],340],[[],341],[[],342],[[],343],[[],355],[[],356],[[],357],[[108,100],345],[[108,100],111],[[108,100],347],[[108,100],348],[[108,100],113],[[339,114],350],[[339,114],352],[[339,114],353],[[339,114],354],[[112,112,112],344],[[336,336,336,336],345],[[108,108,108],111],[[112,112],346],[[336,336,336],347],[[337,337,337,337],348],[[338,338,338],349],[[339,339,339,339],350],[[338,338],351],[[339,339,339],352],[[340,340,340,340],353],[[],344],[[],345],[[],111],[[],346],[[],347],[[],348],[[],349],[[],350],[[],351],[[],352],[[],353],[[],344],[[],345],[[],111],[[],346],[[],347],[[],348],[[],349],[[],350],[[],351],[[],352],[[],353],[[],344],[[],345],[[],111],[[],346],[[],347],[[],348],[[],349],[[],350],[[],351],[[],352],[[],353],[108,111],[112,346],[108,347],[337,348],[338,351],[339,352],[340,353],[[363,100,100,100],111],[[363,100,100,100],347],[[363,100,100,100],348],[[363,100,100,100],113],[[363,114,114,114],352],[[363,114,114,114],353],[[363,114,114,114],354],[346,344],[346,111],[346,347],[351,349],[351,352],[[346,112],344],[[351,338],349],[111,344],[111,345],[111,346],[111,348],[111,113],[352,349],[352,350],[352,351],[352,353],[352,354],[[111,108],345],[[352,339],350],[347,344],[347,346],[347,348],[347,113],[348,345],[348,111],[348,347],[348,113],[353,350],[353,352],[353,354],[113,345],[113,111],[113,347],[113,348],[354,350],[354,352],[354,353],[[108,108],113],[[339,339],354],[[112,112],113],[[338,338],354],[[108,108],113],[[339,339],354],[[113,108],345],[[113,108],348],[[354,339],350],[[354,339],353],[100,345],[100,111],[100,347],[100,348],[100,113],[114,350],[114,352],[114,353],[114,354],[100,345],[100,111],[100,347],[100,348],[100,113],[114,350],[114,352],[114,353],[114,354],[100,345],[100,111],[100,347],[100,348],[100,113],[114,350],[114,352],[114,353],[114,354],[112,344],[108,345],[112,111],[112,347],[108,348],[338,349],[339,350],[338,352],[339,353],[[112,100],346],[[338,114],351],[[112,100,112],344],[[112,100,112],111],[[112,100,112],347],[[338,114,338],349],[[338,114,338],352],[[108,113,108],345],[[108,113,108],348],[[339,354,339],350],[[339,354,339],353],[108,113],[339,354],[[],112],[[],108],[[],113],[[],336],[[],337],[[],354],[[],338],[[],339],[[],340],[[],341],[[],342],[[],343],[[],355],[[],356],[[],357],[112,344],[108,345],[112,111],[112,347],[108,348],[338,349],[339,350],[338,352],[339,353],[337,113],[340,354],[[100,100,100,100],113],[[114,114,114,114],354],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[112,100],14],[[108,100],14],[[337,100],14],[363],[358],[359],[360],[361],[362],[341],[342],[343],[355],[356],[357],0,[[112,15]],[[108,15]],[[336,15]],[[337,15]],[[338,15]],[[339,15]],[[340,15]],[[341,15]],[[342,15]],[[343,15]],[[355,15]],[[356,15]],[[357,15]],[[112,15]],[[108,15]],[[336,15]],[[337,15]],[[338,15]],[[339,15]],[[340,15]],[[341,15]],[[342,15]],[[343,15]],[[355,15]],[[356,15]],[[357,15]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[344,344],[345,345],[111,111],[346,346],[347,347],[348,348],[113,113],[349,349],[350,350],[351,351],[352,352],[353,353],[354,354],[344,14],[345,14],[111,14],[112,14],[108,14],[346,14],[347,14],[348,14],[113,14],[336,14],[337,14],[349,14],[350,14],[351,14],[352,14],[353,14],[354,14],[338,14],[339,14],[340,14],[344,14],[345,14],[111,14],[112,14],[108,14],[346,14],[347,14],[348,14],[113,14],[336,14],[337,14],[349,14],[350,14],[351,14],[352,14],[353,14],[354,14],[338,14],[339,14],[340,14],[112,358],[108,359],[336,361],[337,362],[338,358],[339,359],[340,360],[113,14],[354,14],[112,127],[108,127],[336,127],[337,127],[338,127],[339,127],[340,127],[341,127],[342,127],[343,127],[112,14],[108,14],[113,14],[336,14],[337,14],[354,14],[338,14],[339,14],[340,14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[132,132],341],[[132,132,132],342],[[132,132,132,132],343],[[],108],[112,100],[108,100],[113,100],[336,100],[337,100],[354,114],[338,114],[339,114],[340,114],[112,100],[108,100],[113,100],[336,100],[337,100],[354,114],[338,114],[339,114],[340,114],[112,100],[108,100],[113,100],[336,100],[337,100],[354,114],[338,114],[339,114],[340,114],[[112,112,100],112],[[108,108,100],108],[[113,113,100],113],[[336,336,100],336],[[337,337,100],337],[[354,354,114],354],[[338,338,114],338],[[339,339,114],339],[[340,340,114],340],[108,108],[[108,108,108],345],[[108,108,108],348],[[339,339,339],350],[[339,339,339],353],[[108,108,108],345],[[108,108,108],348],[[339,339,339],350],[[339,339,339],353],[[108,108,108],345],[[108,108,108],348],[[339,339,339],350],[[339,339,339],353],[[108,108,108],345],[[108,108,108],348],[[339,339,339],350],[[339,339,339],353],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[112,112],346],[[108,108,108],111],[[336,336,336],347],[[337,337,337,337],348],0,0,0,0,[[112,112],112],[[108,108],108],[[336,336],336],[[337,337],337],[[338,338],338],[[339,339],339],[[340,340],340],[[341,341],341],[[342,342],342],[[343,343],343],[[355,355],355],[[356,356],356],[[357,357],357],[112,100],[108,100],[336,100],[337,100],[338,114],[339,114],[340,114],[341,132],[342,132],[343,132],[355,127],[356,127],[357,127],[112,100],[108,100],[337,100],[[112,112],112],[[108,108],108],[[336,336],336],[[337,337],337],[[338,338],338],[[339,339],339],[[340,340],340],[[341,341],341],[[342,342],342],[[343,343],343],[[355,355],355],[[356,356],356],[[357,357],357],[112,100],[108,100],[336,100],[337,100],[338,114],[339,114],[340,114],[341,132],[342,132],[343,132],[355,127],[356,127],[357,127],[[344,344]],[[344,111]],[[344,347]],[[345,348]],[[345,101],345],[[345,345]],[[345,379],379],[[111,111]],[[111,336],336],[[111,108]],[[111,100]],[[111,344]],[[112,100],112],[[112,112],112],[[108,108],108],[[108,100],108],[[346,112]],[[346,100]],[[346,346]],[[347,336]],[[347,100]],[[347,347]],[[347,108],108],[[347,344]],[[348,348]],[[348,100]],[[348,345]],[[348,101],348],[[348,379],379],[[348,337]],[[113,113],113],[[113,336]],[[113,100],113],[[113,108]],[[336,100],336],[[336,336],336],[[337,100],337],[[337,337],337],[[349,352]],[[349,349]],[[350,353]],[[350,350]],[[351,351]],[[351,114]],[[351,338]],[[352,339]],[[352,352]],[[352,349]],[[352,114]],[[353,350]],[[353,340]],[[353,114]],[[353,353]],[[354,114],354],[[354,354],354],[[354,339]],[[338,338],338],[[338,114],338],[[339,339],339],[[339,114],339],[[340,114],340],[[340,340],340],[[341,132],341],[[341,341],341],[[342,132],342],[[342,342],342],[[343,132],343],[[343,343],343],[[355,127],355],[[355,355],355],[[356,356],356],[[356,127],356],[[357,127],357],[[357,357],357],[[112,112,112],112],[[108,108,108],108],[[336,336,336],336],[[337,337,337],337],[[338,338,338],338],[[339,339,339],339],[[340,340,340],340],[[111,100]],[[111,111]],[[112,100]],[[112,112]],[[108,100]],[[108,108]],[[346,346]],[[346,100]],[[347,100]],[[347,347]],[[348,100]],[[348,348]],[[113,113]],[[336,100]],[[336,336]],[[337,100]],[[337,337]],[[351,114]],[[351,351]],[[352,114]],[[352,352]],[[353,114]],[[353,353]],[[354,354]],[[338,114]],[[338,338]],[[339,339]],[[339,114]],[[340,114]],[[340,340]],[[341,341]],[[341,132]],[[342,132]],[[342,342]],[[343,343]],[[343,132]],[[355,127]],[[355,355]],[[356,127]],[[356,356]],[[357,127]],[[357,357]],[[346,346],346],[[351,351],351],[[111,111],111],[[347,347],347],[[352,352],352],[[348,348],348],[[353,353],353],[[113,113],113],[[354,354],354],[[111,100],111],[[346,100],346],[[347,100],347],[[348,100],348],[[351,114],351],[[352,114],352],[[353,114],353],[[346,112],112],[[351,338],338],[[111,108],108],[[347,108],108],[[113,108],108],[[352,339],339],[[354,339],339],[[111,336],336],[[347,336],336],[[113,336],336],[[348,337],337],[[353,340],340],[111],[112,112],[108,108],[346],[347],[348],[113,113],[336,336],[337,337],[351],[352],[353],[354,354],[338,338],[339,339],[340,340],[341,341],[342,342],[343,343],[[14,14],358],[[14,14,14],359],[[14,14,14,14],360],[[14,14,14],361],[[14,14,14,14],362],[[100,100],112],[[100,100,100],108],[[100,100,100],336],[[100,100,100,100],337],[[114,114],338],[[114,114,114],339],[[114,114,114,114],340],[[132,132],341],[[132,132,132],342],[[132,132,132,132],343],[[127,127],355],[[127,127,127],356],[[127,127,127,127],357],[112,112],[108,108],[113,113],[336,336],[337,337],[354,354],[338,338],[339,339],[340,340],[112,112],[108,108],[336,336],[337,337],[338,338],[339,339],[340,340],[358,358],[359,359],[360,360],[361,361],[362,362],[341],[342],[343],[355],[356],[357],[[100,100,100,100,100,100],348],[[114,114,114,114,114,114],353],[[100,100,100,100,100,100],348],[[114,114,114,114,114,114],353],[[100,100,100,100,100,100],348],[[114,114,114,114,114,114],353],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[112,112],[338,338],[341,341],[[112,112],100],[[338,338],114],[[341,341],132],[[100,100,100],348],[[114,114,114],353],[[100,100,100],348],[[114,114,114],353],[[100,100,100],348],[[114,114,114],353],[[100,100,100],348],[[114,114,114],353],[[100,100,100,100],348],[[114,114,114,114],353],[[100,100,100,100],348],[[114,114,114,114],353],[[100,100,100,100],348],[[114,114,114,114],353],[[112,100],112],[[108,100],108],[[336,100],336],[[337,100],337],[[338,114],338],[[339,114],339],[[340,114],340],[[],344],[[],345],[[],111],[[],111],[[],112],[[],112],[[],108],[[],108],[[],346],[[],346],[[],347],[[],347],[[],348],[[],348],[[],113],[[],113],[[],336],[[],336],[[],337],[[],337],[[],349],[[],350],[[],351],[[],351],[[],352],[[],352],[[],353],[[],353],[[],354],[[],354],[[],338],[[],338],[[],339],[[],339],[[],340],[[],340],[[],341],[[],341],[[],342],[[],342],[[],343],[[],343],[[],355],[[],355],[[],356],[[],356],[[],357],[[],357],[[112,112],112],[[108,108],108],[[336,336],336],[[337,337],337],[[338,338],338],[[339,339],339],[[340,340],340],[[112,112],112],[[108,108],108],[[336,336],336],[[337,337],337],[[338,338],338],[[339,339],339],[[340,340],340],[[348,108],108],[[353,339],339],[[100,100,100,100],113],[112,112],[108,108],[336,336],[337,337],[338,338],[339,339],[340,340],[[108,108],108],[[112,112],112],[[108,108],108],[[336,336],336],[[337,337],337],[[338,338],338],[[339,339],339],[[340,340],340],[[112,112],112],[[108,108],108],[[336,336],336],[[337,337],337],[[338,338],338],[[339,339],339],[[340,340],340],[[112,112],112],[[112,100],112],[[108,100],108],[[108,108],108],[[336,336],336],[[336,100],336],[[337,100],337],[[337,337],337],[[338,114],338],[[338,338],338],[[339,339],339],[[339,114],339],[[340,340],340],[[340,114],340],[[341,341],341],[[341,132],341],[[342,342],342],[[342,132],342],[[343,132],343],[[343,343],343],[[355,355],355],[[355,127],355],[[356,127],356],[[356,356],356],[[357,357],357],[[357,127],357],[[112,100]],[[112,112]],[[108,100]],[[108,108]],[[336,336]],[[336,100]],[[337,337]],[[337,100]],[[338,114]],[[338,338]],[[339,339]],[[339,114]],[[340,340]],[[340,114]],[[341,341]],[[341,132]],[[342,132]],[[342,342]],[[343,343]],[[343,132]],[[355,127]],[[355,355]],[[356,356]],[[356,127]],[[357,127]],[[357,357]],[[],108],[[112,112],112],[[338,338],338],[[341,341],341],[[108,108],[[9,[113]]]],[[108,108],[[9,[113]]]],[112,112],[108,108],[336,336],[337,337],[338,338],[339,339],[340,340],[[111,15],108],[[346,15],112],[[347,15],336],[[348,15],337],[[351,15],338],[[352,15],339],[[353,15],340],[112,112],[108,108],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[358,112,112],112],[[359,108,108],108],[[361,336,336],336],[[362,337,337],337],[[358,338,338],338],[[359,339,339],339],[[360,340,340],340],[[358,341,341],341],[[359,342,342],342],[[360,343,343],343],[[358,355,355],355],[[359,356,356],356],[[360,357,357],357],[363,16],[358,16],[359,16],[360,16],[361,16],[362,16],[344,16],[345,16],[111,16],[112,16],[108,16],[346,16],[347,16],[348,16],[113,16],[336,16],[337,16],[349,16],[350,16],[351,16],[352,16],[353,16],[354,16],[338,16],[339,16],[340,16],[341,16],[342,16],[343,16],[355,16],[356,16],[357,16],[[341,131]],[[341,130]],[[341,341]],[[341,355]],[[341,126]],[[341,132]],[[341,127]],[[341,41]],[[342,342]],[[342,127]],[[342,132]],[[342,356]],[[342,131]],[[342,126]],[[342,41]],[[342,130]],[[343,127]],[[343,132]],[[343,357]],[[343,131]],[[343,126]],[[343,130]],[[343,343]],[[343,41]],[[355,126]],[[355,41]],[[355,341]],[[355,130]],[[355,131]],[[355,127]],[[355,355]],[[355,132]],[[356,126]],[[356,132]],[[356,131]],[[356,342]],[[356,127]],[[356,41]],[[356,130]],[[356,356]],[[357,126]],[[357,357]],[[357,130]],[[357,132]],[[357,41]],[[357,127]],[[357,131]],[[357,343]],[[341,41]],[[341,132]],[[341,127]],[[341,131]],[[341,130]],[[341,355]],[[341,341]],[[341,126]],[[342,342]],[[342,130]],[[342,132]],[[342,356]],[[342,41]],[[342,131]],[[342,126]],[[342,127]],[[343,126]],[[343,357]],[[343,132]],[[343,41]],[[343,131]],[[343,130]],[[343,127]],[[343,343]],[[355,355]],[[355,41]],[[355,132]],[[355,130]],[[355,126]],[[355,127]],[[355,131]],[[355,341]],[[356,356]],[[356,342]],[[356,132]],[[356,126]],[[356,127]],[[356,131]],[[356,41]],[[356,130]],[[357,126]],[[357,130]],[[357,41]],[[357,132]],[[357,127]],[[357,343]],[[357,131]],[[357,357]],[112,112],[108,108],[336,336],[337,337],[338,338],[339,339],[340,340],[341,341],[342,342],[343,343],[[113,113,100],113],[[354,354,114],354],[14,358],[14,359],[14,360],[14,361],[14,362],[100,112],[100,108],[100,336],[100,337],[114,338],[114,339],[114,340],[132,341],[132,342],[132,343],[127,355],[127,356],[127,357],[108,108],[337,337],[[112,112],112],[[108,108],108],[[337,337],337],[[112,112,112,112],112],[[108,108,108,108],108],[[337,337,337,337],337],[[111,111]],[[112,112],112],[[112,100],112],[[108,108],108],[[108,100],108],[[346,346]],[[347,347]],[[348,348]],[[113,113],113],[[336,100],336],[[336,336],336],[[337,337],337],[[337,100],337],[[351,351]],[[352,352]],[[353,353]],[[354,354],354],[[338,338],338],[[338,114],338],[[339,114],339],[[339,339],339],[[340,340],340],[[340,114],340],[[341,341],341],[[341,132],341],[[342,342],342],[[342,132],342],[[343,132],343],[[343,343],343],[[355,355],355],[[355,127],355],[[356,127],356],[[356,356],356],[[357,357],357],[[357,127],357],[[111,111]],[[112,100]],[[112,112]],[[108,100]],[[108,108]],[[346,346]],[[347,347]],[[348,348]],[[336,100]],[[336,336]],[[337,337]],[[337,100]],[[351,351]],[[352,352]],[[353,353]],[[338,114]],[[338,338]],[[339,339]],[[339,114]],[[340,340]],[[340,114]],[[341,132]],[[341,341]],[[342,342]],[[342,132]],[[343,132]],[[343,343]],[[355,127]],[[355,355]],[[356,127]],[[356,356]],[[357,127]],[[357,357]],[[346,346],346],[[351,351],351],[[111,111],111],[[347,347],347],[[352,352],352],[[348,348],348],[[353,353],353],[[],111],[[],111],[[],112],[[],112],[[],108],[[],108],[[],346],[[],346],[[],347],[[],347],[[],348],[[],348],[[],113],[[],113],[[],336],[[],336],[[],337],[[],337],[[],351],[[],351],[[],352],[[],352],[[],353],[[],353],[[],354],[[],354],[[],338],[[],338],[[],339],[[],339],[[],340],[[],340],[[],341],[[],341],[[],342],[[],342],[[],343],[[],343],[[],355],[[],355],[[],356],[[],356],[[],357],[[],357],0,[112],[108],[113],[336],[337],[354],[338],[339],[340],[341],[342],[343],[355],[356],[357],[113],[354],[337,357],[344],[345],[111],[346],[347],[348],[349],[350],[351],[352],[353],[344],[345],[111],[346],[347],[348],[349],[350],[351],[352],[353],[[113,363]],[[354,363]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[345],[348],[350],[353],[113,108],[354,339],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[344,112],112],[[111,112],112],[[347,112],112],[[349,338],338],[[352,338],338],[[345,108],108],[[348,108],108],[[350,339],339],[[353,339],339],[[345,336],336],[[348,336],336],[[344,112],112],[[111,112],112],[[347,112],112],[[349,338],338],[[352,338],338],[[345,108],108],[[348,108],108],[[350,339],339],[[353,339],339],[[345,336],336],[[348,336],336],0,0,0,0,[111,111],[346,346],[347,347],[348,348],[351,351],[352,352],[353,353],[112,112],[108,108],[337,337],[108,112],[336,112],[337,108],[339,338],[340,339],[342,341],[343,342],[356,355],[357,356],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[112,[[9,[112]]]],[108,[[9,[108]]]],[336,[[9,[336]]]],[337,[[9,[337]]]],[338,[[9,[338]]]],[339,[[9,[339]]]],[340,[[9,[340]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],108],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[127,127],355],[[127,127,127],356],[[127,127,127,127],357],[[100,100],112],[[100,100,100],108],[[100,100,100],336],[[100,100,100,100],337],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[344],[345],[111],[346],[347],[348],[349],[350],[351],[352],[353],[112],[108],[113],[336],[337],[354],[338],[339],[340],[341],[342],[343],[355],[356],[357],[[]],[337,112],[340,338],[343,341],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,112],[340,338],[343,341],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,112],[340,338],[343,341],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,112],[340,338],[343,341],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[337,112],[340,338],[343,341],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,112],[108,112],[336,112],[337,112],[338,338],[339,338],[340,338],[341,341],[342,341],[343,341],[355,355],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,108],[108,108],[336,336],[337,108],[338,339],[339,339],[340,339],[341,342],[342,342],[343,342],[355,356],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[[]],[112,108],[108,108],[336,336],[337,108],[338,339],[339,339],[340,339],[341,342],[342,342],[343,342],[355,356],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[[]],[112,112],[108,112],[336,112],[337,112],[338,338],[339,338],[340,338],[341,341],[342,341],[343,341],[355,355],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,108],[108,108],[336,336],[337,108],[338,339],[339,339],[340,339],[341,342],[342,342],[343,342],[355,356],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[[]],[112,108],[108,108],[336,336],[337,108],[338,339],[339,339],[340,339],[341,342],[342,342],[343,342],[355,356],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[113,108],[336,336],[337,108],[354,339],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,112],[336,112],[337,112],[339,338],[340,338],[342,341],[343,341],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[337,112],[340,338],[343,341],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,112],[108,112],[336,112],[337,112],[338,338],[339,338],[340,338],[341,341],[342,341],[343,341],[355,355],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,108],[108,108],[336,336],[337,108],[338,339],[339,339],[340,339],[341,342],[342,342],[343,342],[355,356],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[[]],[112,108],[108,108],[336,336],[337,108],[338,339],[339,339],[340,339],[341,342],[342,342],[343,342],[355,356],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[[]],[112,112],[108,112],[336,112],[337,112],[338,338],[339,338],[340,338],[341,341],[342,341],[343,341],[355,355],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,108],[108,108],[336,336],[337,108],[338,339],[339,339],[340,339],[341,342],[342,342],[343,342],[355,356],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[[]],[112,108],[108,108],[336,336],[337,108],[338,339],[339,339],[340,339],[341,342],[342,342],[343,342],[355,356],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[[]],[112,337],[108,337],[336,337],[337,337],[338,340],[339,340],[340,340],[341,343],[342,343],[343,343],[355,357],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,112],[336,112],[337,112],[339,338],[340,338],[342,341],[343,341],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[337,112],[340,338],[343,341],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,112],[336,112],[337,112],[339,338],[340,338],[342,341],[343,341],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,112],[336,112],[337,112],[339,338],[340,338],[342,341],[343,341],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,112],[336,112],[337,112],[339,338],[340,338],[342,341],[343,341],[356,355],[357,355],[[]],[337,108],[340,339],[343,342],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,108],[336,336],[337,108],[339,339],[340,339],[342,342],[343,342],[356,356],[357,356],[[]],[337,337],[340,340],[343,343],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],[[]],[[]],[108,337],[336,337],[337,337],[339,340],[340,340],[342,343],[343,343],[356,357],[357,357],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[112,112],346],[[108,108,108],111],[[336,336,336],347],[[337,337,337,337],348],0,0,[[100,100,100,100],113],0,0,[[100,100],112],[[100,100,100],108],[[100,100,100],336],[[100,100,100,100],337],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[338,338],351],[[339,339,339],352],[[340,340,340,340],353],[[114,114,114,114],354],[[114,114],338],[[114,114,114],339],[[114,114,114,114],340],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[132,132],341],[[132,132,132],342],[[132,132,132,132],343],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[127,127],355],[[127,127,127],356],[[127,127,127,127],357],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],0,[[115,100],115],[[]],[380],[381],[382],[383],[[]],[[380,380]],[[381,381]],[[382,382]],[[383,383]],[[]],[380],[381],[382],[383],[[]],[[]],[115],[384,385],[115,[[9,[385]]]],[384,385],[115,[[9,[385]]]],[115,[[9,[385]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[385,385],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[385],[384],[385,385],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[115,[[9,[384]]]],[385],[385,[[16,[386,387]]]],[385,[[16,[388,387]]]],[385,[[16,[386,387]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[389,131],[[]],[[380,380]],[[381,381]],[[382,382]],[[383,383]],[[127,127]],[[384,127,127]],[[115,127,127,[382,[41]]]],[[115,100],115],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[385],[384],[115],[[115,132],115],0,[390,384],0,[390,384],[389,41],[391,14],[391,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[392,127,127,127,127]],[389,41],[393,41],[[]],[380],[381],[382],[383],[[]],[380],[381],[382],[383],[[]],[380],[381],[382],[383],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[385,385],[390,390],[394,394],[384,384],[389,389],[393,393],[380,380],[381,381],[382,382],[383,383],[115,115],[391,391],[395,395],[396,396],[397,397],[392,392],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[398,[[16,[[19,[390,18]],157]]]],[115,389],0,[[],389],[384,[[384,[[19,[18]]]]]],[[127,127],[[16,[157]]]],[[399,127,127],14],[[384,399,127,127],14],[[115,127,127,127,127],115],[[115,127,127,127,127],115],[396,29],0,0,[[],384],[[],115],[390,394],0,[15],[15],[15],[15],[15],[15],[384],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[392],[15],[15],[15],[15],[15],[15],[384],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[392],[[]],[[]],[384],[384],[115],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[384,400],[384,401],[384,402],[384,403],[[394,394],14],[[384,384],14],[[389,389],14],[[393,393],14],[[380,380],14],[[381,381],14],[[382,382],14],[[383,383],14],[[115,115],14],[[391,391],14],[[395,395],14],[[396,396],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[[384,[[381,[41]],[19,[41,18]]]],[9,[41]]],[[384,[[382,[41]],[19,[41,18]]]]]],[391],[385],[115,115],[[385,15],14],0,[115,115],[115,115],[[157,22],[[16,[23]]]],[[157,22],[[16,[23]]]],[[385,22],[[16,[23]]]],[[394,22],[[16,[23]]]],[[384,22],[[16,[23]]]],[[389,22],[[16,[23]]]],[[393,22],[[16,[23]]]],[[380,22],[[16,[23]]]],[[381,22],[[16,[23]]]],[[382,22],[[16,[23]]]],[[383,22],[[16,[23]]]],[[115,22],[[16,[23]]]],[[391,22],[[16,[23]]]],[[395,22],[[16,[23]]]],[[396,22],[[16,[23]]]],[[397,22],[[16,[23]]]],[[]],[[]],[158,157],[387,157],[[]],[[]],[[]],[[]],[[]],[389,393],[[]],[[]],[[],380],[[]],[[],381],[[],382],[[]],[[]],[[],383],[[[384,[[381,[131]],[19,[131,18]]]]],115],[[[384,[[383,[131]],[19,[131,18]]]]],115],[[[384,[[380,[41]],[19,[41,18]]]]],115],[[]],[[[384,[[380,[100]],[19,[100,18]]]]],115],[[[384,[[382,[131]],[19,[131,18]]]]],115],[[[384,[[381,[41]],[19,[41,18]]]]],115],[[[384,[[380,[131]],[19,[131,18]]]]],115],[[[384,[[381,[100]],[19,[100,18]]]]],115],[[[384,[[382,[100]],[19,[100,18]]]]],115],[[[384,[[382,[41]],[19,[41,18]]]]],115],[[[384,[[383,[41]],[19,[41,18]]]]],115],[[[384,[[383,[100]],[19,[100,18]]]]],115],[[]],[[]],[391,395],[[]],[[]],[[]],[[]],[[],380],[[],381],[[],382],[[],383],[404,[[16,[115,157]]]],[[],[[9,[391]]]],[[127,127],[[384,[[19,[18]]]]]],[[],[[9,[391]]]],[[127,127],394],[[[384,[[382,[41]],[19,[41,18]]]],127,127,394],390],[[],[[16,[391,157]]]],[[127,127],[[384,[[19,[18]]]]]],[[127,127],[[9,[384]]]],[405,394],[[]],[[],380],[[],381],[[],382],[[],383],[[]],[[],380],[[],381],[[],382],[[],383],[[127,127,[19,[18]]],[[9,[[384,[[19,[18]]]]]]]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[385,41,127,127],9],[[127,127]],[[384,127,127]],[[384,127,127]],[[115,127,127],[[382,[41]]]],[[384,127,127],9],[[127,127]],[[384,127,127]],[[384,127,127]],[[115,127,127],382],[[384,127,127],9],[[385,41,127,127],9],[115,115],[[],[[16,[391,157]]]],[385,14],[389,14],[389,14],[384],[389],[393],[380],[381],[382],[383],[391],[[],127],[384,127],[115,127],0,0,[[115,132],115],0,[[],[[16,[157]]]],[385,9],[385,9],0,[[127,127],14],[[385,41,127,127],14],[[385,41,127,127],15],[385],[[385,41,127,127],[[9,[15]]]],[384],[[380,15]],[[381,15]],[[382,15]],[[383,15]],[[385,15,15,15],[[9,[15]]]],[385],[384],[[380,15]],[[381,15]],[[382,15]],[[383,15]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[392],0,[392],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[390,[[384,[[382,[41]],[19,[41,18]]]]]],[115,[[19,[41,18]]]],[384,385],[[],398],[[]],[[]],[115,[[384,[[381,[131]],[19,[131,18]]]]]],[115,[[384,[[381,[41]],[19,[41,18]]]]]],[115,[[384,[[383,[131]],[19,[131,18]]]]]],[115,[[384,[[383,[41]],[19,[41,18]]]]]],[384],[[],[[16,[157]]]],[115,[[384,[[380,[131]],[19,[131,18]]]]]],[115,[[384,[[380,[100]],[19,[100,18]]]]]],[115,[[384,[[380,[41]],[19,[41,18]]]]]],[115,[[384,[[382,[131]],[19,[131,18]]]]]],[115,[[384,[[382,[100]],[19,[100,18]]]]]],[115,[[384,[[382,[41]],[19,[41,18]]]]]],[[[384,[[19,[18]]]]],[[19,[18]]]],[[]],[380],[381],[382],[383],[115],0,[[385,406],14],0,0,[390,127],0,[391,[[16,[115,157]]]],[[],[[16,[115,157]]]],[391,[[16,[115,157]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[380,380],[381,381],[382,382],[383,383],[[]],[[380,380],380],[[381,381],381],[[382,382],382],[[383,383],383],[[]],[380,380],[381,381],[382,382],[383,383],[[]],0,[385,[[9,[15]]]],[[]],[[[37,[34,18]]],398],[[[384,[[382,[41]],[19,[41,18]]]]],390],[[127,127],[[384,[[19,[18]]]]]],[[127,127,127,127],392],[[127,127],115],[[127,127],115],[[127,127],115],[[127,127],115],[[127,127],115],[[127,127],115],[[127,127],115],[[127,127],115],[[127,127],115],[[127,127],115],[398,[[9,[[16,[390,157]]]]]],[397,9],[394],[[],[[16,[115,157]]]],[[],393],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[394,394],[[9,[12]]]],[[],397],[384,407],[384,408],[38],[[127,127]],[[384,127,127]],[[384,127,127]],[[115,127,127,[382,[41]]]],0,[[],[[16,[157]]]],[[],[[16,[157]]]],[[127,127,127,127],[[16,[157]]]],[[127,127,127,127],[[16,[157]]]],[396,29],[[115,127,127,409],115],[[115,127,127,409],115],[[115,127,127,409],115],[115,115],[115,115],[115,115],[384,410],[384,411],[384,412],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[384,[[16,[157]]]],[115,[[16,[157]]]],[[127,127,389],[[16,[157]]]],[[127,127,389,391],[[16,[157]]]],[[384,391],[[16,[157]]]],[[115,391],[[16,[157]]]],[[],29],[413,[[16,[157]]]],[[385,41,127,127]],[157,[[9,[48]]]],[385],[[127,127,127,127],392],[[392,127,127,127,127],392],[[115,127,127],115],[[115,127,127],115],[115,[[19,[41,18]]]],[392,[[384,[[19,[18]]]]]],[[],381],[380,381],[381,381],[382,381],[383,381],[115,[[384,[[381,[131]],[19,[131,18]]]]]],[115,[[384,[[381,[100]],[19,[100,18]]]]]],[115,[[384,[[381,[41]],[19,[41,18]]]]]],[[],383],[380,383],[381,383],[382,383],[383,383],[115,[[384,[[383,[131]],[19,[131,18]]]]]],[115,[[384,[[383,[100]],[19,[100,18]]]]]],[115,[[384,[[383,[41]],[19,[41,18]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],380],[380,380],[381,380],[382,380],[383,380],[115,[[384,[[380,[131]],[19,[131,18]]]]]],[115,[[384,[[380,[100]],[19,[100,18]]]]]],[115,[[384,[[380,[41]],[19,[41,18]]]]]],[[],382],[380,382],[381,382],[382,382],[383,382],[115,[[384,[[382,[131]],[19,[131,18]]]]]],[115,[[384,[[382,[100]],[19,[100,18]]]]]],[115,[[384,[[382,[41]],[19,[41,18]]]]]],[[],25],[385,[[385,[[19,[18]]]]]],[390,127],0,[396,29],0,[[],29],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[385,[[16,[384]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[127,127]],[[384,127,127]],[[127,127]],[[384,127,127]],[[115,100,132],115],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[127,127,127,127],392],[[392,127,127,127,127],392],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],127],[384,127],[115,127],0,0,[[127,127],385],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[127,127,389],[[16,[157]]]],[[127,127,389],[[16,[157]]]],[384,[[16,[157]]]],[115,[[16,[157]]]],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[407,407],[410,410],[400,400],[402,402],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[[407,22],[[16,[23]]]],[[408,22],[[16,[23]]]],[[410,22],[[16,[23]]]],[[411,22],[[16,[23]]]],[[400,22],[[16,[23]]]],[[402,22],[[16,[23]]]],[[401,22],[[16,[23]]]],[[403,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[25,18]]]],[[],[[19,[25,18]]]],[407,15],[408,15],[410,15],[411,15],[400,15],[402,15],[401,15],[403,15],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[407,9],[408,9],[410,[[9,[407]]]],[411,[[9,[408]]]],[400,9],[402,9],[401,9],[403,9],[407,9],[408,9],[410,[[9,[407]]]],[411,[[9,[408]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[407],[408],[410],[411],[400],[402],[401],[403],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[47,[165]],91]]]],[[],[[16,[[37,[165,18]],91]]]],[[],[[16,[[196,[[37,[165,18]]]],91]]]],[[],[[16,[[196,[[47,[165]]]],91]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[414,414],[415,415],[[]],[[]],[416,389],0,0,[[],415],0,[15],[15],[15],[15],[15],[15],[15],[15],[416],[[]],[[]],[[]],[[]],[131,415],[15],[15],[15],[15],[[417,127,127,389],[[16,[157]]]],[417,[[16,[157]]]],[[414,414],14],[[415,415],14],[[],14],[[],14],[[],14],[[],14],[[414,22],[[16,[23]]]],[[415,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[416,[[16,[157]]]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],0,0,0,[[],[[16,[416,157]]]],[[],417],[41,417],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[416,[[16,[157]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[416,131,131],[[16,[157]]]],[[417,415]],0,[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[417,127,127,389],[[16,[157]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[418,419],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[420,420],[421,421],[[]],[[]],[418,389],0,0,0,[[],420],[[],421],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[418],0,[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[[422,127,127,389],[[16,[157]]]],[[420,420],14],[[421,421],14],[[],14],[[],14],[[],14],[[],14],0,[[420,22],[[16,[23]]]],[[421,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[419,398],[418,[[16,[157]]]],[418,14],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[16,[418,157]]]],[[],422],[[420,421],422],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[423,[[16,[15,158]]]],[[],16],[418,[[16,[157]]]],[[423,19],[[16,[15,158]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[418,29],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],0,[413,[[16,[418,157]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[422,127,127,389],[[16,[157]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[424,424],[425,425],[426,426],[427,427],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[424,424],14],[[425,425],14],[[426,426],14],[[427,427],14],[[],14],[[],14],[[428,22],[[16,[23]]]],[[428,22],[[16,[23]]]],[[424,22],[[16,[23]]]],[[429,22],[[16,[23]]]],[[429,22],[[16,[23]]]],[[430,22],[[16,[23]]]],[[430,22],[[16,[23]]]],[[425,22],[[16,[23]]]],[[431,22],[[16,[23]]]],[[431,22],[[16,[23]]]],[[432,22],[[16,[23]]]],[[432,22],[[16,[23]]]],[[426,22],[[16,[23]]]],[[427,22],[[16,[23]]]],[[427,22],[[16,[23]]]],0,0,0,[428,427],[429,427],[431,427],[427,428],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[391,427],[120,427],[[427,424],428],[427,429],[427,431],[425,430],[426,432],[[],29],[[],29],[[],29],[[],29],[424],[425],[426],[427],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[428,424],[430,425],[432,426],0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[427,[35,[[37,[48,18]]]]],429],[[427,[35,[[37,[48,18]]]]],431],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[38],[38],[38],[38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[429,[[9,[48]]]],[430,[[9,[48]]]],[431,[[9,[48]]]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[388,127,127]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[412],[386],[388],[[]],[[]],[[]],[[]],[[]],0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[412,412],[386,386],[388,388],[387,387],[406,406],[[]],[[]],[[]],[[]],[[]],0,[[41,127,127],412],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[386],[388],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[[412,412],14],[[387,387],14],[[406,406],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[412],[[412,15],14],[386,385],[388,385],[[412,22],[[16,[23]]]],[[386,22],[[16,[23]]]],[[388,22],[[16,[23]]]],[[387,22],[[16,[23]]]],[[387,22],[[16,[23]]]],[[406,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[386,41,127,127],9],[[388,41,127,127],9],[[386,127,127]],[[388,127,127]],[[388,127,127]],[[386,41,127,127],9],[[388,41,127,127],9],[412,14],[412],[387],[406],0,0,[386],[388],[386],[388],[[412,41,127,127],14],[[386,127,127],14],[[388,127,127],14],[[412,41,127,127],15],[[412,41,127,127],[[9,[15]]]],[[412,15,15,15],[[9,[15]]]],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,[[]],[[]],[[]],[[]],[[]],[386,385],[388,385],[[412,406],14],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[412,[[9,[15]]]],[386,15],[388,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[406,406],[[9,[12]]]],0,0,[38],[[388,127,127]],[[41,127,127],412],[386],[388],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[412,41,127,127]],[[386,127,127]],[[388,127,127]],[412],[[]],[[]],[[]],[[]],[[]],[[],25],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[386,[[16,[388]]]],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[1],[1],[[]],[[]],[100,[[384,[[19,[18]]]]]],[[]],[[]],[[]],[[]],[132,[[384,[[19,[18]]]]]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[433,433],[409,409],[[]],[[]],0,[100,[[384,[[19,[18]]]]]],[[127,127,127,127],392],[[127,127,127,127],392],[15],[15],[15],[15],[384],[[]],[[]],[15],[15],[[409,409],14],[[],[[384,[[19,[18]]]]]],[[],[[384,[[19,[18]]]]]],[384,[[16,[157]]]],[[]],[[],[[384,[[19,[18]]]]]],[384,[[16,[157]]]],[[]],[[409,22],[[16,[23]]]],[[]],[[]],[[],[[384,[381,[19,[18]]]]]],[[],[[384,[383,[19,[18]]]]]],[[],[[384,[[19,[18]]]]]],[[],[[384,[[19,[18]]]]]],[[],14],[433,14],[[]],[132,[[384,[[19,[18]]]]]],[384,[[384,[[381,[41]],[19,[41,18]]]]]],[[],15],[[433,381],15],[[],15],[[],15],[[]],[[]],[[]],[15,9],[[433,15],9],[[],9],[[],9],[[]],[[]],[[]],[[433,381]],[[]],[[]],[[]],[[]],[[129,129]],[[127,127]],[[129,129]],[[127,127,409],[[384,[[19,[18]]]]]],[[],[[384,[[19,[18]]]]]],[384,[[16,[157]]]],[[]],[[],[[384,[[19,[18]]]]]],[384,[[16,[157]]]],[[],[[384,[[19,[18]]]]]],[384,[[16,[157]]]],[[]],[[]],[[]],[[]],[[127,127],[[384,[[19,[18]]]]]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[100,132],[[384,[[19,[18]]]]]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[132,[[384,[[19,[18]]]]]],[132],[100,[[384,[[19,[18]]]]]],[100],[384],[[],[[384,[381,[19,[18]]]]]],[[],[[384,[383,[19,[18]]]]]],[[],[[384,[[19,[18]]]]]],[[],[[384,[[19,[18]]]]]],[[],14],[132,[[384,[[19,[18]]]]]],[132],[384,[[384,[[381,[41]],[19,[41,18]]]]]],[[],15],[[]],[15,9],[[]],0,0,0,[1],[1],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[413,127,127],[[16,[157]]]],[[413,434],[[16,[157]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[435],[434,434],[413,413],[[]],[[]],[435,[[16,[115,157]]]],[[],434],[[],413],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[15],[15],[15],[[434,434],14],[[413,413],14],[[],14],[[],14],[[],14],[[],14],[[434,22],[[16,[23]]]],[[413,22],[[16,[23]]]],[435,[[9,[391]]]],0,[[413,29]],[[413,15]],[[]],[[]],[[]],[[],29],[[],29],[434],[413],[[],15],[[],15],[[],15],0,[[]],[[]],[[]],[435,[[16,[157]]]],[435],[[435,413]],0,[[],9],[[],9],[[],9],[[]],[[]],[[]],0,0,0,[[],435],[435],[[],413],[[],[[16,[[435,[[178,[436]]]],158]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[413,29],[[16,[157]]]],[[413,15],[[16,[157]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[435,391]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[]],[[]],[[]],[391,435],[435,[[16,[435,158]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1],[[]],[[]],[[]],[[]],[[],9],[[],9],[399,399],[[]],[15],[15],[[]],[15],[[399,399],14],[[],14],[[],14],[[399,22],[[16,[23]]]],[[]],[[],29],[399],0,[[],15],[[]],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],49],[[]],[[]],[[],9],[[]],0,[[]],[[]],0,0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[437,437],[438,438],[[]],[[]],[15],[15],[15],[15],[[]],[[]],[15],[15],[[437,437],14],[[438,438],14],[[],14],[[],14],[[],14],[[],14],[438,29],[[437,22],[[16,[23]]]],[[438,22],[[16,[23]]]],[[]],[[]],[[],29],[[],29],[437],[[[0,[439,440]]],437],[438],[[[0,[439,440]]],438],[437,29],[438,29],[[],15],[[],15],[[]],[[]],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[438,29],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[]],[[]],[[]],[[]],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],0,[15],[15],[[]],[15],0,[[274,196],[[16,[45,24]]]],[[],20],[[24,22],[[16,[23]]]],[[24,22],[[16,[23]]]],[152,24],[[]],[91,24],[441,24],[[],15],[[]],[[],9],[[]],0,[[],4],0,[[]],[[]],[38],[[]],[[]],[24,[[9,[48]]]],0,[[],25],[442,[[16,[154,24]]]],[442,[[16,[154,24]]]],[442,[[16,[154,24]]]],[[],16],[[],16],[[],49],[[]],[[]],[[],9],0,[[]],[[[37,[165,18]]],[[207,[132]]]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,[[16,[[19,[27,18]],152]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],0,[[443,15]],[[444,445],41],[[444,445],41],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[446,[9,[129]],[9,[129]]]],[[],447],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[448,448],[447,447],[443,443],[[]],[[]],[[]],0,0,0,0,0,[[444,41,445]],[[],446],[[],444],[[],448],[[],443],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[[448,448],14],[[447,447],14],[[443,443],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[448,22],[[16,[23]]]],[[447,22],[[16,[23]]]],[[443,22],[[16,[23]]]],[[]],[[]],[[]],[[]],[[]],[[],29],[443],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[446,14],[[448,447],[[9,[100]]]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[],444],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[16,[448,25]]]],[[444,41,445,15],41],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[447,447]],[[443,15]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[],9],[[],9],[15],[15],[[]],[15],[[]],0,[[],[[9,[443]]]],[[],15],[[]],[[],14],[[],9],[[]],[[]],[[]],0,[[]],[[]],[14],0,0,0,[[],[[9,[449]]]],[[],16],[[],16],[5],[[],49],0,[[]],[[]],[[],9],[[]],[[]],[[]],[[],114],0,0,0,0,0,[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[450,450],[[]],[[],[[16,[17,242]]]],[[],451],[[],450],[[],13],[15],[15],[15],[15],[[]],[[]],[451],[15],[15],[451],0,0,0,[17,[[19,[41,18]]]],0,[[450,450],14],[451],0,[[450,22],[[16,[23]]]],[[]],[[]],[[],15],[[],15],[[]],[[]],[[],9],[[],9],[[]],[[]],0,0,[13,451],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[451,17]],0,0,[[131,450],[[16,[[452,[17]],242]]]],[[]],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[]],[[]],[[]],[[]],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[[],[[9,[442]]]],[442,[[16,[91]]]],[442,453],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[14,6],46],[442,442],[454,454],[154,154],[17,17],[46,46],[[]],[[]],[[]],[[]],[[]],[[442,442],12],0,[[],105],[454,105],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[16,[442]]]],[[],[[16,[17]]]],[[],[[16,[46]]]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[46,6],0,[[442,442],14],[[46,46],14],[[],14],[[],14],[[],14],[[],14],[[154,4],[[9,[15]]]],[[442,22],[[16,[23]]]],[[442,22],[[16,[23]]]],[[454,22],[[16,[23]]]],[[154,22],[[16,[23]]]],[[154,22],[[16,[23]]]],[[17,22],[[16,[23]]]],[[46,22],[[16,[23]]]],[[]],[[]],[[]],[151,17],[[]],[140,17],[148,17],[[]],[[],29],[442],[17,442],[[],15],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],0,[[],4],[454,4],0,[[4,[207,[132]]],454],[[442,6,45,[19,[454,18]]],154],[[]],[[4,105],454],[[4,165],454],[154,15],[[454,15],[[9,[15]]]],[[154,15],[[9,[15]]]],[454,15],[154,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[442,442],[[9,[12]]]],[[],442],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[442,16],[17,16],[46,16],[442,25],0,[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[154,[[16,[24]]]],[[],16],[[[19,[18]]],[[16,[454,24]]]],[[],16],[19,[[16,[454,24]]]],[[],[[16,[454,24]]]],[[],16],[140,[[16,[154,24]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],0,[454,[[37,[165,18]]]],[454,207],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[15],[15],[[]],[15],[[]],[[],15],[[]],[[],9],[[]],[[]],[[]],[[]],[[]],[[455,17]],[2,456],[8,456],[[],16],[[],16],[[],49],[[]],[[]],[[],9],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[40,457],[54,54],[54,54],[54,54],[54,54],[54,54],[54,54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[458,458],[459,459],[40,40],[[]],[[]],[[]],[[],54],[[],54],0,[15],[15],[15],[15],[15],[15],[15],[15],[[]],[[]],[[]],[[]],[15],[15],[15],[15],0,[[40,40],14],[[],14],[[],14],[[460,22],57],[[458,22],57],[[459,22],57],[[40,22],57],[[]],[[]],[[]],[[]],[58,[[16,[460,59]]]],[58,[[16,[458,59]]]],[58,[[16,[459,59]]]],[58,[[16,[460,59]]]],[58,[[16,[458,59]]]],[58,[[16,[459,59]]]],[[],[[9,[60]]]],[5,14],[5,14],[25,42],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[40,14],[120,[[42,[[452,[17]]]]]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],0,[[39,457,461,462,25],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[25]]],100],0,0,[460,462],[[39,40],[[42,[41]]]],[459,[[16,[463]]]],[[39,40,460],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[460,58],[[16,[59]]]],[[458,58],[[16,[59]]]],[[459,58],[[16,[59]]]],[[460,58],[[16,[59]]]],[[458,58],[[16,[59]]]],[[459,58],[[16,[59]]]],0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[],464],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[37,[3,18]]]],[[]],[[]],[[]],[[]],[[],[[19,[17,18]]]],[464,[[19,[17,18]]]],[465],[15],[15],[15],[15],[[]],[466],[[]],[466],[[44,22],[[16,[23]]]],[[44,22],[[16,[23]]]],[[]],[[]],[173,44],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[]],[[]],[[]],[[]],[[],14],0,[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[[35,[43]]],[[16,[465,44]]]],[13,466],[[],464],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[[465,17]],[[466,17]],[[464,17]],[[[19,[17,18]]]],[[464,[19,[17,18]]]],[44,[[9,[48]]]],[[],25],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[53,53],[[153,138]],[[53,53]],[[53,136]],[[153,138]],[[53,53]],[[],9],[[],[[16,[91]]]],[53,100],[53,114],[53,129],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[153,153],[53,53],[52,52],[45,45],[467,467],[[]],[[]],[[]],[[]],[[]],[[153,153],12],[[53,53],12],[[52,52],12],[[45,45],12],[[467,467],12],[[],105],[[],52],[[],45],[15],[15],[15],[15],[15],[15],[15],[15],[15],[15],[[],[[16,[153]]]],[[],[[16,[53]]]],[[],[[16,[52]]]],[[],[[16,[45]]]],[[],[[16,[467]]]],[[]],[[]],[[]],[[]],[[]],[15],[15],[15],[15],[15],[[153,153],14],[[53,136],14],[[53,53],14],[[52,52],14],[[45,45],14],[[467,467],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[153,22],[[16,[23]]]],[[53,22],[[16,[23]]]],[[52,22],[[16,[23]]]],[[45,22],[[16,[23]]]],[[467,22],[[16,[23]]]],[153,25],[[467,53],25],[[467,137],25],[[52,137],25],[53,153],[[]],[136,153],[153,53],[[]],[138,53],[129,53],[[]],[[]],[[],45],[[]],[129,[[9,[467]]]],[[],45],[129,53],[129,53],[129,153],[129,53],[114,153],[129,53],[29,[[9,[467]]]],[129,153],[[45,52],[[9,[53]]]],[[],29],[[],29],[[],29],[[],29],[[],29],[153],[53],[52],[45],[467],[[],15],[[],15],[[],15],[[],15],[[],15],[[45,52,53],[[9,[53]]]],[[]],[[]],[[]],[[]],[[]],[45],[45],[153,14],[45,14],[153,14],[53,14],[45,14],[45,468],[[[469,[153]],100],153],[[],52],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[52,139],0,[153,129],[53],[[[35,[139]],467],52],[[]],[[[35,[139]]],52],[[[35,[139]]],52],[[],153],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[153,153],[[9,[12]]]],[[53,136],[[9,[12]]]],[[53,53],[[9,[12]]]],[[52,52],[[9,[12]]]],[[45,45],[[9,[12]]]],[[467,467],[[9,[12]]]],[[45,52],[[9,[53]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[153,16],[53,16],[52,16],[45,16],[467,16],[[153,138]],[[153,153],138],[[53,53]],[[53,136]],[[53,53]],[[],53],[[],45],[45,468],[45,468],[153,[[9,[470]]]],[[]],[[]],[[]],[[]],[[]],[470,[[16,[153]]]],[471,[[16,[153]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[52,467],0,[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[15],[15],[[]],[472],[15],[[]],[[],15],[[]],[[],9],[[]],[[473,14],472],[14,[[37,[3]]]],[[]],[[]],[[]],[[]],[[472,17]],0,[[],16],[[],16],[[],49],[[]],[[]],[[],9],[[]],0,[[]],[[]]],"p":[[3,"Private"],[3,"Session"],[8,"LogSink"],[3,"ComponentName"],[15,"str"],[3,"EntityPath"],[3,"SessionBuilder"],[3,"RecordingInfo"],[4,"Option"],[3,"RecordingId"],[3,"ApplicationId"],[4,"Ordering"],[4,"SocketAddr"],[15,"bool"],[15,"usize"],[4,"Result"],[4,"LogMsg"],[3,"Global"],[3,"Vec"],[3,"Field"],[4,"MsgSenderError"],[3,"Formatter"],[3,"Error"],[4,"MsgBundleError"],[3,"String"],[3,"EntityPathImpl"],[4,"EntityPathPart"],[3,"Uuid"],[15,"u64"],[3,"RawMutex"],[3,"MutexGuard"],[3,"EntityPathHash"],[4,"Resettable"],[8,"Iterator"],[8,"Into"],[3,"MsgSender"],[3,"Box"],[3,"Demand"],[3,"BuildInfo"],[4,"CallSource"],[15,"u8"],[6,"Result"],[3,"PathBuf"],[4,"FileSinkError"],[3,"TimePoint"],[4,"PathOp"],[3,"Arc"],[8,"Error"],[3,"TypeId"],[8,"IntoIterator"],[8,"SerializableComponent"],[3,"Timeline"],[3,"TimeInt"],[3,"Command"],[4,"RerunBehavior"],[3,"RerunArgs"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[8,"FnOnce"],[8,"Send"],[3,"Arrow3D"],[3,"ClassId"],[3,"ColorRGBA"],[3,"AnnotationInfo"],[3,"InstanceKey"],[3,"KeypointId"],[3,"Label"],[3,"RawMesh3D"],[4,"MeshFormat"],[4,"Mesh3D"],[3,"Point2D"],[3,"Point3D"],[3,"Radius"],[4,"Rect2D"],[3,"Scalar"],[3,"ScalarPlotProps"],[3,"Size3D"],[4,"TensorData"],[3,"TensorDimension"],[4,"TensorDataMeaning"],[3,"Tensor"],[3,"TextEntry"],[3,"Rigid3"],[3,"Pinhole"],[4,"Transform"],[3,"Vec2D"],[3,"Vec3D"],[3,"Vec4D"],[4,"Error"],[3,"Box3D"],[3,"AnnotationContext"],[3,"ViewCoordinates"],[3,"LineStrip2D"],[3,"LineStrip3D"],[3,"Mat3x3"],[3,"EncodedMesh3D"],[3,"Quaternion"],[15,"f32"],[3,"IsoTransform"],[3,"ClassDescription"],[3,"MeshId"],[3,"TensorId"],[4,"DataType"],[4,"TensorDataType"],[3,"SignedAxis3"],[3,"Vec3"],[3,"ClassDescriptionArrow"],[3,"ClassMapElemArrow"],[3,"Mat3"],[3,"Vec2"],[3,"Quat"],[15,"f64"],[4,"DynamicImage"],[4,"TensorImageError"],[4,"Handedness"],[4,"TensorElement"],[4,"RawMeshError"],[3,"Path"],[8,"AsRef"],[3,"EncodedMesh3DArrow"],[4,"FieldError"],[3,"ViewRepr"],[3,"ArrayBase"],[15,"i8"],[15,"u32"],[3,"OwnedRepr"],[15,"i64"],[15,"i16"],[15,"u16"],[15,"i32"],[4,"Axis3"],[4,"Sign"],[3,"Backtrace"],[3,"TimeReal"],[3,"TimeRange"],[3,"Duration"],[3,"TimelineName"],[3,"ArrowMsg"],[3,"BBox2D"],[3,"Box3"],[4,"Index"],[4,"BatchIndex"],[3,"IndexHash"],[3,"ComponentPath"],[3,"TimeRangeF"],[3,"BeginRecordingMsg"],[3,"PythonVersion"],[4,"RecordingSource"],[3,"EntityPathOpMsg"],[4,"PathParseError"],[3,"Time"],[3,"MsgBundle"],[4,"TensorCastError"],[3,"ShapeError"],[4,"ImageError"],[3,"Error"],[3,"TryFromSliceError"],[3,"FastFixedSizeListArray"],[3,"FastFixedSizeArrayIter"],[3,"MutableAnnotationInfoArray"],[8,"Any"],[3,"MutableClassMapElemArrowArray"],[8,"Array"],[3,"AnnotationInfoArray"],[3,"ClassMapElemArrowArray"],[3,"AnnotationInfoArrayIterator"],[3,"ClassMapElemArrowArrayIterator"],[3,"MutableBitmap"],[4,"ViewDir"],[3,"Encoder"],[4,"EncodeError"],[8,"Write"],[4,"DecodeError"],[4,"Error"],[4,"Error"],[3,"BufReader"],[3,"Decoder"],[4,"Either"],[3,"CStr"],[3,"OsStr"],[3,"Pin"],[3,"Replacements"],[3,"AHashMap"],[3,"RandomState"],[3,"HashMap"],[3,"IntoKeys"],[3,"IntoValues"],[3,"Recompositions"],[3,"Decompositions"],[3,"Context"],[4,"Poll"],[4,"SeekFrom"],[3,"StreamSafe"],[3,"Chunk"],[3,"Arguments"],[3,"PrimitiveArray"],[15,"i128"],[3,"Utf8Array"],[3,"MutablePrimitiveArray"],[3,"BooleanArray"],[3,"BinaryArray"],[3,"DictionaryArray"],[3,"FixedSizeBinaryArray"],[3,"FixedSizeListArray"],[3,"ListArray"],[3,"MapArray"],[3,"NullArray"],[3,"StructArray"],[3,"UnionArray"],[3,"MutableBinaryValuesArray"],[3,"MutableBinaryArray"],[3,"MutableBooleanArray"],[3,"MutableDictionaryArray"],[3,"MutableFixedSizeBinaryArray"],[3,"MutableFixedSizeListArray"],[3,"MutableListArray"],[3,"MutableStructArray"],[3,"MutableUtf8Array"],[3,"MutableUtf8ValuesArray"],[8,"TakeIteratorNulls"],[8,"TakeIterator"],[4,"PolarsError"],[3,"ArrayValuesIter"],[3,"GrowableBinary"],[3,"GrowableBoolean"],[15,"never"],[3,"GrowableDictionary"],[3,"GrowableFixedSizeBinary"],[3,"GrowableFixedSizeList"],[3,"GrowableList"],[3,"GrowableNull"],[3,"GrowablePrimitive"],[3,"GrowableStruct"],[3,"GrowableUnion"],[3,"GrowableUtf8"],[3,"Bitmap"],[3,"Buffer"],[3,"OwnedFd"],[8,"Fn"],[3,"Error"],[3,"BitmapIter"],[4,"ZipValidity"],[8,"Scalar"],[3,"DictionaryValuesIter"],[3,"ChunksExact"],[3,"MapValuesIter"],[3,"Iter"],[3,"StructValueIter"],[3,"UnionIter"],[3,"DictionaryValuesIterTyped"],[8,"TrustedLen"],[8,"Clone"],[3,"OffsetsBuffer"],[8,"MutableArray"],[3,"Offsets"],[8,"Growable"],[3,"BitChunks"],[3,"IntoIter"],[3,"SlicesIterator"],[3,"ZipValidityIter"],[3,"BitChunksExact"],[3,"BitChunksExactMut"],[3,"BitChunkIter"],[3,"PrimitiveScalar"],[3,"BooleanScalar"],[3,"CastOptions"],[3,"months_days_ns"],[4,"TimeUnit"],[4,"PrimitiveType"],[4,"PhysicalType"],[4,"IntegerType"],[3,"Schema"],[4,"UnionMode"],[4,"IntervalUnit"],[3,"BTreeMap"],[3,"Utf8Error"],[4,"OutOfSpecKind"],[3,"Error"],[3,"FromUtf8Error"],[3,"Utf8Error"],[3,"TryReserveError"],[8,"Sync"],[3,"ArrowSchema"],[3,"ArrowArray"],[3,"ArrowArrayStream"],[3,"ArrowArrayStreamReader"],[3,"IpcField"],[3,"IpcSchema"],[3,"FileMetadata"],[3,"StreamMetadata"],[3,"FileReader"],[3,"StreamReader"],[4,"StreamState"],[4,"Compression"],[3,"WriteOptions"],[3,"Record"],[3,"StreamWriter"],[3,"FileWriter"],[3,"EncodedData"],[3,"DictionaryScalar"],[3,"Utf8Scalar"],[3,"BinaryScalar"],[3,"ListScalar"],[3,"NullScalar"],[3,"StructScalar"],[3,"FixedSizeListScalar"],[3,"FixedSizeBinaryScalar"],[3,"UnionScalar"],[3,"NaiveDate"],[3,"NaiveDateTime"],[3,"FixedOffset"],[3,"NaiveTime"],[3,"DateTime"],[3,"days_ms"],[3,"f16"],[3,"i256"],[3,"BitChunkOnes"],[3,"IndexRange"],[3,"u8x64"],[3,"u16x32"],[3,"u32x16"],[3,"u64x8"],[3,"i8x64"],[3,"i16x32"],[3,"i32x16"],[3,"i64x8"],[3,"f32x16"],[3,"f64x8"],[3,"i128x8"],[3,"f16x32"],[3,"days_msx8"],[3,"months_days_nsx8"],[3,"i256x8"],[3,"Vec3A"],[3,"Vec4"],[3,"DVec2"],[3,"DVec3"],[3,"DVec4"],[3,"IVec2"],[3,"IVec3"],[3,"IVec4"],[3,"Affine2"],[3,"Affine3A"],[3,"Mat2"],[3,"Mat3A"],[3,"Mat4"],[3,"DAffine2"],[3,"DAffine3"],[3,"DMat2"],[3,"DMat3"],[3,"DMat4"],[3,"DQuat"],[3,"UVec2"],[3,"UVec3"],[3,"UVec4"],[3,"BVec2"],[3,"BVec3"],[3,"BVec4"],[3,"BVec3A"],[3,"BVec4A"],[4,"EulerRot"],[3,"Conformal3"],[3,"ColumnMatrix3"],[3,"RowMatrix3"],[3,"Vector2"],[3,"Point2"],[3,"Point3"],[3,"Vector3"],[3,"ColumnMatrix2"],[3,"RowMatrix2"],[3,"RowMatrix4"],[3,"ColumnMatrix4"],[3,"Quaternion"],[3,"__m128"],[3,"ColorRgba8"],[3,"Vector4"],[3,"Ray3"],[3,"Rgb"],[3,"Luma"],[3,"Rgba"],[3,"LumaA"],[3,"ImageBuffer"],[3,"FlatSamples"],[3,"View"],[4,"Error"],[3,"ViewMut"],[4,"ColorType"],[3,"Frame"],[4,"ImageFormat"],[3,"SubImage"],[4,"ExtendedColorType"],[3,"Delay"],[4,"ImageOutputFormat"],[3,"Progress"],[3,"Pixels"],[3,"Frames"],[3,"Rect"],[3,"EnumeratePixels"],[3,"EnumeratePixelsMut"],[3,"EnumerateRows"],[3,"EnumerateRowsMut"],[8,"ImageDecoder"],[3,"Duration"],[4,"NormalForm"],[3,"Pixels"],[3,"PixelsMut"],[4,"FilterType"],[3,"Rows"],[3,"RowsMut"],[3,"SampleLayout"],[3,"Limits"],[4,"PixelDensityUnit"],[3,"PixelDensity"],[3,"JpegDecoder"],[3,"JpegEncoder"],[3,"PngDecoder"],[3,"ApngDecoder"],[4,"CompressionType"],[4,"FilterType"],[3,"PngEncoder"],[3,"PngReader"],[4,"UnsupportedErrorKind"],[4,"ParameterErrorKind"],[4,"LimitErrorKind"],[4,"ImageFormatHint"],[3,"UnsupportedError"],[3,"EncodingError"],[3,"ParameterError"],[3,"DecodingError"],[3,"LimitError"],[3,"BiLevel"],[3,"LimitSupport"],[3,"Reader"],[3,"File"],[3,"Hash64"],[3,"Hash128"],[8,"Hash"],[8,"Copy"],[4,"Infallible"],[3,"MsgId"],[3,"CountAndSize"],[3,"AccountingAllocator"],[3,"Layout"],[3,"MemoryHistory"],[3,"MemoryUse"],[3,"MemoryLimit"],[3,"TrackingStatistics"],[3,"ServerOptions"],[3,"Client"],[3,"Receiver"],[15,"u128"],[3,"ComponentBundle"],[3,"NativeViewerSink"],[6,"Result"],[4,"AppEnvironment"],[4,"Commands"],[4,"AnalyticsCommands"],[3,"Args"],[3,"StartupOptions"],[3,"Profiler"],[4,"CliError"],[3,"BufferedSink"],[3,"FileSink"],[3,"TcpSink"],[4,"TimeType"],[8,"ExactSizeIterator"],[3,"RangeInclusive"],[3,"OffsetDateTime"],[3,"SystemTime"],[3,"RemoteViewerServer"],[3,"Runtime"],[8,"Component"],[8,"TensorTrait"],[8,"TensorDataTypeTrait"],[13,"BadEscape"],[13,"RustSdk"],[3,"FixedSizeArrayField"],[13,"BadTensorShape"],[8,"DictionaryKey"],[8,"GenericBinaryArray"],[8,"TryExtend"],[8,"TryExtendFromSelf"],[8,"TryPush"],[8,"BitChunk"],[8,"BitChunkIterExact"],[8,"SimdOrd"],[8,"Sum"],[8,"ArrayAdd"],[8,"ArrayCheckedAdd"],[8,"ArrayCheckedDiv"],[8,"ArrayCheckedMul"],[8,"ArrayCheckedRem"],[8,"ArrayCheckedSub"],[8,"ArrayDiv"],[8,"ArrayMul"],[8,"ArrayOverflowingAdd"],[8,"ArrayOverflowingMul"],[8,"ArrayOverflowingSub"],[8,"ArrayRem"],[8,"ArraySaturatingAdd"],[8,"ArraySaturatingMul"],[8,"ArraySaturatingSub"],[8,"ArraySub"],[8,"ArrayWrappingAdd"],[8,"ArrayWrappingMul"],[8,"ArrayWrappingSub"],[8,"Simd8"],[8,"Simd8PartialEq"],[8,"Simd8Lanes"],[8,"Simd8PartialOrd"],[13,"InvalidBuffer"],[13,"InvalidBuffersLength"],[13,"InvalidBitmap"],[13,"InvalidId"],[13,"InvalidIdDataType"],[8,"Offset"],[8,"NativeType"],[8,"Index"],[8,"NativeSimd"],[8,"Simd"],[8,"FromMaskChunk"],[8,"ArrowDeserialize"],[8,"TryIntoCollection"],[8,"ArrowField"],[3,"I128"],[3,"LargeString"],[3,"LargeBinary"],[3,"FixedSizeBinary"],[3,"LargeVec"],[3,"FixedSizeVec"],[8,"ArrowSerialize"],[8,"FlattenChunk"],[8,"TryIntoArrow"],[8,"Vec3Swizzles"],[8,"Vec4Swizzles"],[8,"Vec2Swizzles"],[8,"Pixel"],[8,"PixelWithColorType"],[8,"Primitive"],[8,"GenericImageView"],[8,"EncodableLayout"],[8,"GenericImage"],[8,"AnimationDecoder"],[8,"ImageDecoderRect"],[8,"ImageEncoder"],[8,"ConvertBuffer"],[13,"Unsupported"],[8,"ColorMap"],[13,"Email"]],"a":{"cross":[14023,14024,14025],"determinant":[14023,14024,14025],"magnitude":[13555,13556,13557,13558,13559,13560,13561,13562,13563],"magnitude2":[13573,13574,13575,13576,13577,13578,13579,13580,13581],"mix":[13582,13583,13584,13585,13586,13587,13588,13589,13590],"scale":[13194,13195,13196,13197,13198,13199,13200],"wedge":[14023,14024,14025]}},\
"rerun_bindings":{"doc":"The Rerun Python Log SDK.","t":[7,0,0,0,5,5,5,3,3,3,3,4,3,3,6,3,13,3,13,13,3,13,13,13,13,4,13,13,13,13,18,18,3,13,3,3,13,3,3,3,4,4,3,18,18,18,13,13,18,18,18,3,13,3,3,13,3,3,13,3,4,13,3,13,18,3,3,4,3,3,3,4,4,3,3,8,3,3,4,13,13,13,13,13,13,3,3,3,3,13,13,13,13,13,13,13,13,13,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,10,11,11,12,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,11,5,5,11,11,5,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,5,5,5,10,11,12,5,12,12,10,11,11,11,11,12,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,12,12,12,12,11,11,12,12,12,12,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["GLOBAL","arrow","python_bridge","python_session","array_to_rust","build_chunk_from_components","get_registered_component_names","AnnotationContext","AnnotationInfo","AnnotationInfoTuple","Arrow3D","Axis3","Box3D","ClassDescription","ClassDescriptionTuple","ClassId","ClassId","ColorRGBA","Depth","Encoded","EncodedMesh3D","F32","F64","Glb","Gltf","Handedness","I16","I32","I64","I8","IDENTITY","IDENTITY","InstanceKey","JPEG","KeypointId","Label","Left","LineStrip2D","LineStrip3D","Mat3x3","Mesh3D","MeshFormat","MeshId","NEGATIVE_X","NEGATIVE_Y","NEGATIVE_Z","Negative","Obj","POSITIVE_X","POSITIVE_Y","POSITIVE_Z","Pinhole","Pinhole","Point2D","Point3D","Positive","Quaternion","Radius","Raw","RawMesh3D","Rect2D","Right","Rigid3","Rigid3","SPLAT","Scalar","ScalarPlotProps","Sign","SignedAxis3","Size3D","Tensor","TensorData","TensorDataMeaning","TensorDimension","TensorId","TensorTrait","TextEntry","ThreadInfo","Transform","U16","U32","U64","U8","Unknown","Unknown","Vec2D","Vec3D","Vec4D","ViewCoordinates","X","XCYCW2H2","XCYCWH","XYWH","XYXY","Y","YXHW","YXYX","Z","ZERO","ZERO","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","albedo_factor","arguments","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_deserialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","arrow_serialize","as_vec3","aspect_ratio","authkey","axis","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","az","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","child_from_parent","class_map","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","color","connect","convert_color","data","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default","default","default","default","default","default_recording_id","depth","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","describe","describe","describe_short","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","disconnect","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dtype","dtype","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extract","extract","extract","extract","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","focal_length","focal_length_in_pixels","format","forward","fov_y","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_body","from_dim","from_dynamic_image","from_image","from_rgb","from_rgba","from_right_handed","from_rub","from_str","from_str","from_up_and_handedness","from_xywh","get","get","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_recording_id","handedness","hash","hash","hash","hash","hash","hash","height","height","id","id","id","image_from_cam","index","index","index","indices","info","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_py","into_resettable","is_enabled","is_shaped_like_an_image","is_shaped_like_an_image","is_specific","is_splat","is_vector","is_vector","items_iter","keypoint_connections","keypoint_map","label","level","log_annotation_context","log_arrow_msg","log_cleared","log_image_file","log_mesh_file","log_meshes","log_pinhole","log_rigid3","log_transform","log_unknown_transform","log_view_coordinates","log_view_coordinates_up_handedness","log_view_coordinates_xyz","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossless_try_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","lossy_into","main","meaning","meaning","meaning","mesh_id","mesh_id","mesh_id","meter","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","named","new","new","new","new","new","new","new","new","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_array","new_child_from_parent","new_parent_from_child","normals","now","num_dim","num_dim","num_triangles","origin","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","parent_from_child","parse_entity_path","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","positions","principal_point","python_session","python_version","random","random","rerun_bindings","resolution","resolution","right","rotation","sanity_check","sanity_check","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","save","scattered","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serve","set_enabled","set_recording_id","set_thread_time","set_time","set_time_nanos","set_time_seconds","set_time_sequence","shape","shape","shape","shutdown","sign","size","size_in_bytes","size_in_bytes","specific_index","tensor_from_jpeg_bytes","tensor_from_jpeg_file","tensor_id","thread_now","time","time_point","to_array","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rub","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","top_left_corner","transform","translation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_object_raw","unnamed","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","up","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vector","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","w","width","width","with","wrap","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","x","x","x","x","x","x","x","x","y","y","y","y","y","y","y","y","z","z","z","z","z","z","PythonSession","RecordingMetaData","application_id","az","az","borrow","borrow","borrow_mut","borrow_mut","cast_from","cast_from","checked_as","checked_as","checked_cast_from","checked_cast_from","connect","default","default","deref","deref","deref_mut","deref_mut","disconnect","downcast","downcast","drop","drop","drop_msgs_if_disconnected","enabled","flush","from","from","has_sent_begin_recording_msg","init","init","into","into","is_enabled","is_official_example","lossless_try_into","lossless_try_into","lossy_into","lossy_into","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","recording_id","recording_id","recording_meta_data","recording_source","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","save","send","send_path_op","set_application_id","set_default_enabled","set_enabled","set_python_version","set_recording_id","set_sink","sink","to_recording_info","try_from","try_from","try_into","try_into","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","upcast","upcast","vzip","vzip","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from"],"q":["rerun_bindings","","","","rerun_bindings::arrow","","","rerun_bindings::python_bridgererun_bindings::python_session","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Methods for handling Arrow datamodel log ingest","","","Perform conversion between a pyarrow array to arrow2 types.","Build a <code>LogMsg</code> and vector of <code>Field</code> given a ‘**kwargs’…","","The <code>AnnotationContext</code> provides additional information on …","Information about an Annotation.","","A 3D Arrow","One of <code>X</code>, <code>Y</code>, <code>Z</code>.","A 3D bounding box represented by it’s half-lengths","The description of a semantic Class.","","A 16-bit ID representing a type of semantic class.","","An RGBA color tuple.","","","Compressed/encoded mesh format","","","Binary <code>glTF</code>.","<code>glTF</code>.","Left or right handedness. Used to describe a coordinate …","","","","","","","A number used to specify a specific instance in an entity.","","A 16-bit ID representing a type of semantic keypoint …","A String label component","","A Line Strip of 2D points","A Line Strip of 3D points","A 3x3 column-major Matrix made up of 3 Vecs","A Generic 3D Mesh.","The format of a binary mesh file, e.g. GLTF, GLB, OBJ","A unique id per <code>Mesh3D</code>.","","","","","Wavefront .obj.","","","","Camera perspective projection (a.k.a. intrinsics).","The parent is some local camera space, the child an image …","A point in 2D space.","A point in 3D space.","","A Quaternion represented by 4 real numbers.","A Radius component","","A raw “triangle soup” mesh.","A rectangle in 2D space.","","A proper rigid 3D transform, i.e. a rotation and a …","For example: the parent is a 3D world space, the child a …","A special value indicating that this [<code>InstanceKey]</code> is …","A double-precision scalar.","Additional properties of a scalar when rendered as a plot.","Positive (<code>+</code>) or Negative (<code>-</code>).","One of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …","A 3D size, e.g. the size of a 3D box.","A Multi-dimensional Tensor","Flattened <code>Tensor</code> data payload","","Flattened <code>Tensor</code> data payload","A unique id per <code>Tensor</code>.","","A text entry component, comprised of a text body and its …","Thread-local info","A transform between two spaces.","","","","","","We don’t know the transform, but it is …","A vector in 2D space.","A vector in 3D space.","A vector in 4D space.","How we interpret the coordinate system of an entity/space.","","[x_center, y_center, width/2, height/2]","[x_center, y_center, width, height]","[x, y, w, h], with x,y = left,top.","[x0, y0, x1, y1], with x0,y0 = left,top and x1,y1 = …","","[y, x, h, w], with x,y = left,top.","[y0, x0, y1, x1], with x0,y0 = left,top and x1,y1 = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Albedo factor applied to the final color of the meshata payloadisconnect from remote server (if any).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Focal length.","X &amp; Y focal length in pixels.","","","Field of View on the Y axis, i.e. the angle between top …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Construct a tensor from <code>image::DynamicImage</code>.","Construct a tensor from something that can be turned into …","","","","Returns a matrix that translates RUB to this coordinate …","","","Choses a coordinate system based on just an up-axis.","","","","","","","","","","","","","","","","","","","","","","<code>ClassId</code> or <code>KeypointId</code> to which this annotation info …","Column-major projection matrix.","","","","Optionally, the flattened indices array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Is logging enabled in the global session?","","","Are we referring to a specific instance of the entity …","Are we referring to all instances of the entity (e.g. all …","","","","Semantic connections between two keypoints.","","","","","","","Log an image file given its contents or path on disk.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The per-element data meaning Used to indicated if the data …","","","","Reciprocal scale of meter unit for depth images","","","","","","","","","","","","","","","","","","","","","","","","","","Optional name of the dimension, e.g. “color” or “…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optionally, the flattened normals array for this mesh.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The flattened positions array of this mesh.","Principal point of the pinhole camera, i.e. the …","The global <code>PythonSession</code> object used by the Python API.","","","","The python module is called “rerun_bindings”.","","Pixel resolution (usually integers) of child image space. …","","How is the child rotated?","Returns an error if this does not span all three …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serve a web-viewer.","Enable or disable logging in the global session.","","","","","","Set the current time globally. Used for all subsequent …","","","Dimensionality and length","","","Number of elements on this dimension. I.e. size-1 is the …","","","Returns <code>None</code> if splat, otherwise the index.","Construct a tensor from the contents of a JPEG file.","Construct a tensor from the contents of a JPEG file on …","Unique identifier for the tensor","","","The current time, which can be set by users.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a matrix that translates this coordinate system to …","","","","","","","","","","four columns of an affine transformation matrix","Translation to parent from childet access to the thread-local <code>ThreadInfo</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The python API bindings create a single <code>PythonSession</code> …","Used to construct a <code>RecordingInfo</code>:","","","","","","","","","","","","","","Send log data to a remote viewer/server.","","","","","","","Disconnects any TCP connection, shuts down any server, and …","","","","","If the tcp session is disconnected, allow it to quit early …","Is this session enabled? If not, all calls into it are …","Wait until all logged data have been sent to the remove …","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if logging is enabled on this <code>Session</code>.","","","","","","","","","","The current <code>RecordingId</code>, if set.","","","","","","","","Drains all pending log messages and saves them to disk …","Send a <code>LogMsg</code>.","Send a <code>PathOp</code>.","Set the <code>ApplicationId</code> to use for the following stream of …","Set whether or not logging is enabled by default. This …","Enable or disable logging on this <code>Session</code>.","","Set the <code>RecordingId</code> of this message stream.","Set the <code>LogSink</code> to use. This is where the log messages …","Where we put the log messages.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,54,21,0,29,29,20,20,0,29,29,29,29,48,33,0,29,0,0,58,0,0,0,0,0,0,49,49,49,57,20,49,49,49,0,35,0,0,57,0,0,21,0,0,58,0,35,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,54,35,0,0,0,0,56,25,25,25,25,56,25,25,56,22,23,54,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,60,29,30,31,32,33,34,35,36,37,38,19,54,12,41,13,14,15,42,43,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,12,41,13,14,15,42,43,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,49,34,0,49,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,32,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,47,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,33,42,54,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,60,29,30,31,32,33,34,35,36,37,38,54,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,60,29,30,31,32,33,34,35,36,37,38,13,16,17,59,60,15,0,0,31,12,41,13,14,15,42,43,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,13,15,55,42,17,48,33,36,37,38,0,30,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,43,58,43,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,48,60,30,33,34,35,36,37,38,0,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,127,31,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,25,60,29,30,31,32,33,34,35,36,37,38,13,13,14,14,15,15,55,55,42,42,43,43,56,56,57,57,49,49,58,58,16,16,17,17,18,18,59,59,20,20,60,60,30,30,32,32,54,54,54,71,54,12,41,13,14,15,55,42,43,56,56,57,49,49,58,16,16,17,18,44,45,46,59,19,47,20,20,21,22,23,48,24,25,26,27,28,60,29,30,30,31,32,33,34,35,36,36,37,37,38,38,34,34,47,43,34,64,54,71,12,41,41,13,14,14,15,15,55,55,42,42,43,56,57,49,58,16,17,18,18,44,44,45,45,46,46,46,59,19,47,20,21,22,22,22,23,23,23,48,48,24,25,26,26,27,28,60,29,30,31,32,33,34,35,36,36,36,37,37,37,38,32,56,31,31,14,14,58,43,43,49,43,25,127,31,13,16,17,59,20,60,0,43,13,16,17,59,20,60,25,30,127,31,15,34,46,36,37,19,55,0,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,54,18,0,127,31,16,16,127,31,54,55,55,15,32,0,0,0,0,0,0,0,0,0,0,0,0,0,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,0,127,31,31,21,19,47,31,12,41,13,14,42,43,16,17,18,44,45,21,22,23,48,24,25,26,27,28,31,32,35,36,37,30,30,41,49,22,23,48,31,32,37,12,41,13,14,15,42,43,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,33,33,19,64,127,31,19,12,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,33,0,13,16,17,59,60,19,34,0,0,59,60,0,34,34,43,33,43,19,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,0,27,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,48,60,30,33,34,35,36,37,38,0,0,0,64,64,0,0,0,127,31,31,0,49,30,127,31,16,31,31,31,64,0,64,14,54,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,60,29,30,31,32,33,34,35,36,37,38,43,56,49,16,20,30,36,37,38,25,47,33,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,54,30,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,43,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,12,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,38,48,25,30,64,54,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,64,54,71,12,41,13,14,15,55,42,43,56,57,49,58,16,17,18,44,45,46,59,19,47,20,21,22,23,48,24,25,26,27,28,60,29,30,31,32,33,34,35,36,37,38,36,37,38,41,22,23,48,28,36,37,38,41,22,23,48,28,37,38,41,23,48,28,0,0,120,120,97,120,97,120,97,120,97,120,97,120,97,97,120,97,120,97,120,97,97,120,97,120,97,97,97,97,120,97,97,120,97,120,97,97,120,120,97,120,97,120,97,120,97,97,120,97,120,120,97,120,97,97,97,97,97,97,97,97,97,97,97,120,120,97,120,97,120,97,120,97,120,97,120,97,120,97,120,97,120,97],"f":[0,0,0,0,[[1,[3,[2]]],4],[[5,6,7],[[4,[8]]]],[9,[[4,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],0,[9,[[11,[1]]]],[[[3,[12]]],[[3,[12]]]],[[],3],[[],[[3,[13]]]],[[],[[3,[14]]]],[[[3,[15]]],[[3,[15]]]],[[],3],[[],3],[[],[[3,[16]]]],[[],[[3,[17]]]],[[],[[3,[18]]]],[[],3],[[],3],[[],3],[[],3],[[[3,[19]]],[[3,[19]]]],[[],3],[[[3,[20]]],[[3,[20]]]],[[[3,[21]]],[[3,[21]]]],[[[3,[22]]],[[3,[22]]]],[[[3,[23]]],[[3,[23]]]],[[],3],[[],[[3,[24]]]],[[[3,[25]]],[[3,[25]]]],[[],[[3,[26]]]],[[[3,[27]]],[[3,[27]]]],[[[3,[28]]],[[3,[28]]]],[[],3],[[[3,[29]]],[[3,[29]]]],[[[3,[30]]],[[3,[30]]]],[[[3,[31]]],[[3,[31]]]],[[[3,[32]]],[[3,[32]]]],[[[3,[33]]],[[3,[33]]]],[[[3,[34]]],[[3,[34]]]],[[[3,[35]]],[[3,[35]]]],[[],[[3,[36]]]],[[],[[3,[37]]]],[[],[[3,[38]]]],[12,[[40,[39]]]],[41,[[40,[39]]]],[13,[[40,[39]]]],[14,[[40,[39]]]],[15,[[40,[39]]]],[42,[[40,[39]]]],[43,[[40,[39]]]],[16,[[40,[39]]]],[17,[[40,[39]]]],[18,[[40,[39]]]],[44,[[40,[39]]]],[45,[[40,[39]]]],[46,[[40,[39]]]],[[],[[40,[39]]]],[19,[[40,[39]]]],[47,[[40,[39]]]],[20,[[40,[39]]]],[21,[[40,[39]]]],[22,[[40,[39]]]],[23,[[40,[39]]]],[48,[[40,[39]]]],[24,[[40,[39]]]],[25,[[40,[39]]]],[26,[[40,[39]]]],[27,[[40,[39]]]],[28,[[40,[39]]]],[[],[[40,[39]]]],[29,[[40,[39]]]],[30,[[40,[39]]]],[31,[[40,[39]]]],[32,[[40,[39]]]],[33,[[40,[39]]]],[34,[[40,[39]]]],[35,[[40,[39]]]],[36,[[40,[39]]]],[37,[[40,[39]]]],[38,[[40,[39]]]],[49],[34,[[3,[50]]]],[9,[[52,[51]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[33,53],0,[54,54],[12,12],[41,41],[13,13],[14,14],[15,15],[55,55],[42,42],[43,43],[56,56],[57,57],[49,49],[58,58],[16,16],[17,17],[18,18],[44,44],[45,45],[46,46],[59,59],[19,19],[47,47],[20,20],[21,21],[22,22],[23,23],[48,48],[24,24],[25,25],[26,26],[27,27],[60,60],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,13],61],[[16,16],61],[[17,17],61],[[59,59],61],[[60,60],61],0,[[[3,[62]]],4],[[[52,[51]]],4],0,[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],64],[[],13],[[],15],[[],55],[[],42],[[],17],[[],48],[[],33],[[],36],[[],37],[[],38],[9,65],[66,30],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[43,62],[58,2],[43,62],[[],[[40,[12]]]],[[],[[40,[41]]]],[[],[[40,[13]]]],[[],[[40,[14]]]],[[],[[40,[15]]]],[[],[[40,[55]]]],[[],[[40,[42]]]],[[],[[40,[43]]]],[[],[[40,[56]]]],[[],[[40,[57]]]],[[],[[40,[49]]]],[[],[[40,[58]]]],[[],[[40,[16]]]],[[],[[40,[17]]]],[[],[[40,[18]]]],[[],[[40,[44]]]],[[],[[40,[45]]]],[[],[[40,[46]]]],[[],[[40,[59]]]],[[],[[40,[19]]]],[[],[[40,[47]]]],[[],[[40,[20]]]],[[],[[40,[21]]]],[[],[[40,[48]]]],[[],[[40,[60]]]],[[],[[40,[30]]]],[[],[[40,[33]]]],[[],[[40,[34]]]],[[],[[40,[35]]]],[[],[[40,[36]]]],[[],[[40,[37]]]],[[],[[40,[38]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[67],[[],68],[31,68],[[12,12],69],[[41,41],69],[[13,13],69],[[14,14],69],[[15,15],69],[[55,55],69],[[42,42],69],[[43,43],69],[[56,56],69],[[57,57],69],[[49,49],69],[[58,58],69],[[16,16],69],[[17,17],69],[[18,18],69],[[44,44],69],[[45,45],69],[[46,46],69],[[59,59],69],[[19,19],69],[[47,47],69],[[20,20],69],[[21,21],69],[[22,22],69],[[23,23],69],[[48,48],69],[[25,25],69],[[60,60],69],[[29,29],69],[[30,30],69],[[31,31],69],[[32,32],69],[[33,33],69],[[34,34],69],[[35,35],69],[[36,36],69],[[37,37],69],[[38,38],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[[],69],[1,[[4,[54]]]],[1,[[4,[54]]]],[1,[[40,[70]]]],[1,[[4,[71]]]],[[54,72],73],[[12,72],[[40,[74]]]],[[41,72],[[40,[74]]]],[[13,72],[[40,[74]]]],[[14,72],[[40,[74]]]],[[15,72],[[40,[74]]]],[[55,72],[[40,[74]]]],[[42,72],[[40,[74]]]],[[43,72],[[40,[74]]]],[[56,72],[[40,[74]]]],[[56,72],[[40,[74]]]],[[57,72],[[40,[74]]]],[[49,72],[[40,[74]]]],[[49,72],[[40,[74]]]],[[58,72],[[40,[74]]]],[[16,72],[[40,[74]]]],[[16,72],[[40,[74]]]],[[17,72],[[40,[74]]]],[[18,72],[[40,[74]]]],[[44,72],[[40,[74]]]],[[45,72],[[40,[74]]]],[[46,72],[[40,[74]]]],[[59,72],[[40,[74]]]],[[19,72],[[40,[74]]]],[[47,72],[[40,[74]]]],[[20,72],[[40,[74]]]],[[20,72],[[40,[74]]]],[[21,72],[[40,[74]]]],[[22,72],[[40,[74]]]],[[23,72],[[40,[74]]]],[[48,72],[[40,[74]]]],[[24,72],[[40,[74]]]],[[25,72],[[40,[74]]]],[[26,72],[[40,[74]]]],[[27,72],[[40,[74]]]],[[28,72],[[40,[74]]]],[[60,72],[[40,[74]]]],[[29,72],[[40,[74]]]],[[30,72],[[40,[74]]]],[[30,72],[[40,[74]]]],[[31,72],[[40,[74]]]],[[32,72],[[40,[74]]]],[[33,72],[[40,[74]]]],[[34,72],[[40,[74]]]],[[35,72],[[40,[74]]]],[[36,72],[[40,[74]]]],[[36,72],[[40,[74]]]],[[37,72],[[40,[74]]]],[[37,72],[[40,[74]]]],[[38,72],[[40,[74]]]],[[38,72],[[40,[74]]]],[34,[[3,[50]]]],[34,36],0,[43,[[3,[49]]]],[34,[[3,[50]]]],[[]],[[]],[[]],[[]],[[]],[75,41],[[]],[[]],[[],14],[[]],[71,15],[76,55],[[]],[[]],[[[52,[77,78]]],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62,18],[[]],[[]],[[[52,[78]]],44],[[[52,[78]]],45],[[]],[[]],[[],46],[79,46],[[]],[[]],[[]],[[]],[[]],[[],22],[80,22],[[]],[[],23],[75,23],[[]],[81,48],[[]],[[]],[[]],[82,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[80,36],[[],37],[[]],[75,37],[[]],[[[83,[62]]],32],[67,56],[84,[[40,[31,85]]]],[[[83,[84]]],[[40,[31,85]]]],[[51,51,51],14],[[51,51,51,51],14],[69,58],[43,79],[2,[[40,[43]]]],[2,[[40,[49]]]],[[49,58],43],[[50,50,50,50],25],[[],[[3,[86]]]],[31,[[3,[86]]]],[[],66],[[],66],[[],66],[[],66],[[],66],[[],66],[[],[[4,[62]]]],[43,[[3,[58]]]],[13],[16],[17],[59],[20],[60],[25,50],[66,30],[[],60],[31,60],0,0,[46],[36],[37],0,0,[[62,[3,[87]],69]],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[54,9],88],[[],[[89,[62]]]],[[],69],[[],69],[31,69],[16,69],[16,69],[[],69],[31,69],[[],90],0,0,0,0,[[2,52,69],4],[[2,6,69],4],[[2,69],4],[[2,[3,[[52,[51]]]],[3,[87]],[3,[2]],69],4],[[2,2,[91,[50]],69],4],[[2,[52,[[92,[50]]]],[52,[[3,[[92,[93]]]]]],[52,[[3,[[92,[50]]]]]],[52,[[3,[[92,[50]]]]]],69],4],[[2,69],4],[[2,69,94,69],4],[[2,35,69],4],[[2,69],4],[[2,43,69],4],[[2,2,69,69],4],[[2,2,[3,[69]],69],4],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,[52,[62]]],[[4,[51]]]],[[],95],[31,95],0,[21,59],0,0,0,[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],[[],96],0,[[66,62],30],[[50,50,50],41],[[57,56],49],[[50,50],22],[[50,50,50],23],[[50,50,50,50],48],[[60,[52,[30,78]],29,95,[3,[50]]],31],[[[83,[62]],[3,[62]]],32],[[50,50,50],37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53,33],[53,33],0,[64,7],[[],67],[31,67],[19,67],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,53],[2,[[4,[5]]]],[[13,13],[[3,[61]]]],[[16,16],[[3,[61]]]],[[17,17],[[3,[61]]]],[[59,59],[[3,[61]]]],[[60,60],[[3,[61]]]],0,[34,80],[[],[[98,[97]]]],[9,99],[[],59],[[],60],[[9,100],4],[34,[[3,[80]]]],0,[43,[[3,[49]]]],0,[43,[[40,[62]]]],[19,[[40,[101]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,4],0,[12,40],[41,40],[13,40],[14,40],[15,40],[55,40],[42,40],[43,40],[56,40],[57,40],[49,40],[58,40],[16,40],[17,40],[18,40],[44,40],[45,40],[46,40],[59,40],[19,40],[47,40],[20,40],[21,40],[48,40],[60,40],[30,40],[33,40],[34,40],[35,40],[36,40],[37,40],[38,40],[69,4],[69],[2,4],[[102,[3,[103]]]],[[64,102,[3,[103]]]],[[2,[3,[104]]]],[[2,[3,[82]]]],[[2,[3,[104]]]],[[]],[31],0,[9],0,0,[[],67],[31,67],[16,[[3,[16]]]],[[[52,[51,78]]],[[40,[31,85]]]],[[[106,[105]]],[[40,[31,85]]]],0,[[],7],[69,7],0,[14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,79],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[25],0,0,[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[107,[[40,[47,108]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[[111,[[110,[109]]]]],[[40,[31]]]],[[[111,[[112,[66]]]]],[[40,[31]]]],[[[111,[[112,[104]]]]],[[40,[31]]]],[[[111,[[110,[51]]]]],[[40,[31]]]],[[[111,[[112,[82]]]]],[[40,[31]]]],[[[111,[[110,[113]]]]],[[40,[31]]]],[[[111,[[110,[50]]]]],[[40,[31]]]],[[[111,[[110,[66]]]]],[[40,[31]]]],[[[111,[[112,[114]]]]],[[40,[31]]]],[[],40],[[[111,[[110,[115]]]]],[[40,[31]]]],[[[111,[[112,[51]]]]],[[40,[31]]]],[[[111,[[112,[113]]]]],[[40,[31]]]],[[[111,[[112,[93]]]]],[[40,[31]]]],[[[111,[[110,[93]]]]],[[40,[31]]]],[[[111,[[112,[109]]]]],[[40,[31]]]],[[[111,[[110,[114]]]]],[[40,[31]]]],[[[111,[[112,[115]]]]],[[40,[31]]]],[[[111,[[112,[50]]]]],[[40,[31]]]],[[[111,[[110,[82]]]]],[[40,[31]]]],[[[111,[[110,[104]]]]],[[40,[31]]]],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[[],116],[9,117],[66,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,[[3,[49]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,50],0,[25,50],[66,30],[118],[9,[[40,[[11,[1]],70]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,50],[37,50],[38,50],0,0,0,0,0,[36,50],[37,50],[38,50],0,0,0,0,0,[37,50],[38,50],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[97,119]],[[],120],[[],97],[67],[67],[67],[67],[97],[[]],[[]],[67],[67],[97],0,[97],[[]],[[]],0,[[],67],[[],67],[[]],[[]],[97,69],0,[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[97,[[3,[65]]]],0,0,0,[[]],[[]],[[]],[[]],[[97,[83,[87]]],[[40,[121]]]],[[97,8]],[[97,7,122]],[[97,123,69]],[[97,69]],[[97,69]],[[97,99]],[[97,65]],[[97,[125,[124]]]],0,[120,[[3,[126]]]],[[],40],[[],40],[[],40],[[],40],[[],116],[[],116],[[]],[[]],[[]],[[]],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"PyAny"],[15,"str"],[4,"Option"],[6,"PyResult"],[3,"EntityPath"],[3,"PyDict"],[3,"TimePoint"],[4,"LogMsg"],[3,"Python"],[3,"Private"],[3,"Py"],[3,"Arrow3D"],[3,"ClassId"],[3,"ColorRGBA"],[3,"AnnotationInfo"],[3,"InstanceKey"],[3,"KeypointId"],[3,"Label"],[3,"RawMesh3D"],[4,"MeshFormat"],[4,"Mesh3D"],[3,"Point2D"],[3,"Point3D"],[3,"Radius"],[4,"Rect2D"],[3,"Scalar"],[3,"ScalarPlotProps"],[3,"Size3D"],[4,"TensorData"],[3,"TensorDimension"],[3,"Tensor"],[3,"TextEntry"],[3,"Rigid3"],[3,"Pinhole"],[4,"Transform"],[3,"Vec2D"],[3,"Vec3D"],[3,"Vec4D"],[4,"Error"],[4,"Result"],[3,"Box3D"],[3,"AnnotationContext"],[3,"ViewCoordinates"],[3,"LineStrip2D"],[3,"LineStrip3D"],[3,"Mat3x3"],[3,"EncodedMesh3D"],[3,"Quaternion"],[3,"SignedAxis3"],[15,"f32"],[15,"u8"],[3,"Vec"],[3,"IsoTransform"],[4,"TensorDataMeaning"],[3,"ClassDescription"],[4,"Axis3"],[4,"Sign"],[4,"Handedness"],[3,"MeshId"],[3,"TensorId"],[4,"Ordering"],[3,"String"],[4,"DataType"],[3,"ThreadInfo"],[3,"RecordingId"],[15,"u64"],[15,"usize"],[4,"TensorDataType"],[15,"bool"],[3,"PyErr"],[3,"AnnotationInfoTuple"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Vec3"],[3,"ClassDescriptionArrow"],[3,"ClassMapElemArrow"],[3,"Global"],[3,"Mat3"],[3,"Vec2"],[3,"Quat"],[15,"f64"],[8,"Into"],[4,"DynamicImage"],[4,"TensorImageError"],[4,"TensorElement"],[3,"PathBuf"],[6,"PyObject"],[4,"Resettable"],[3,"PyClassItemsIter"],[6,"PyReadonlyArray2"],[6,"PyReadonlyArray1"],[15,"u32"],[6,"Quaternion"],[4,"TensorDataMeaning"],[3,"ComponentName"],[3,"PythonSession"],[6,"MutexGuard"],[3,"PythonVersion"],[3,"PyModule"],[4,"RawMeshError"],[3,"Timeline"],[3,"TimeInt"],[15,"i64"],[3,"Path"],[8,"AsRef"],[3,"EncodedMesh3DArrow"],[4,"FieldError"],[15,"i32"],[3,"OwnedRepr"],[3,"ArrayBase"],[3,"ViewRepr"],[15,"i8"],[15,"u16"],[15,"i16"],[3,"TypeId"],[3,"PyTypeObject"],[8,"FnOnce"],[4,"SocketAddr"],[3,"RecordingMetaData"],[4,"FileSinkError"],[4,"PathOp"],[3,"ApplicationId"],[8,"LogSink"],[3,"Box"],[3,"RecordingInfo"],[8,"TensorTrait"]]},\
"run_wasm":{"doc":"Intended to be used as an xtask in order to make it …","t":[5],"n":["main"],"q":["run_wasm"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"test_image_memory":{"doc":"Logs a bunch of big images to test Rerun memory usage.","t":[7,5,5],"n":["GLOBAL","log_images","main"],"q":["test_image_memory","",""],"d":["","",""],"i":[0,0,0],"f":[0,[1,[[4,[[3,[2]]]]]],[[],[[4,[[3,[2]]]]]]],"p":[[3,"Session"],[8,"Error"],[3,"Box"],[4,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
